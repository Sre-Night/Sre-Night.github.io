<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Welcome to Sre.Night&#39;s world</title>
      <link href="/2025/05/22/hello-world/"/>
      <url>/2025/05/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法</title>
      <link href="/2025/05/19/KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2025/05/19/KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h1><h2 id="KNN算法简介"><a href="#KNN算法简介" class="headerlink" title="KNN算法简介"></a>KNN算法简介</h2><h3 id="KNN算法思想"><a href="#KNN算法思想" class="headerlink" title="KNN算法思想"></a>KNN算法思想</h3><ul><li><p><strong>K-近邻算法</strong>（K Nearest Neighbor，简称KNN）。</p><ul><li>根据你的“<strong>邻居</strong>”来<strong>推断</strong>出你的类别</li><li>如果一个样本在<strong>特征空间中</strong>的 <strong>k 个最相似</strong>的样本中的大多数<strong>属于某一个类别</strong>，则该样本也属于这个类别</li></ul></li><li><p><strong>样本相似性</strong>：样本都是属于一个任务数据集的。样本<strong>距离越近</strong>则<strong>越相似</strong>。</p></li></ul><p>利用K近邻算法预测电影类型</p><style>.qqudibjceljj{zoom:80%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831143341119-1747654339826-1.png" class="qqudibjceljj" alt="image-20230831143341119"><style>.mypklcpnsppk{zoom:80%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831143403932-1747654361076-3.png" class="mypklcpnsppk" alt="image-20230831143403932"><ul><li>二维平面上点a(x1, y1)与(x2, y2)间的欧氏距离：</li></ul><style>.epbvewhpwyeo{zoom:80%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831143436328-1747654491160-5.png" class="epbvewhpwyeo" alt="image-20230831143436328"><ul><li>三维平面上点a(x1, y1, z1)与(x2, y2, z2)间的欧氏距离：</li></ul><img src="./KNN算法/image-20230831143430741-1747654622814-7.png" alt="image-20230831143430741" style="zoom:80%;" /><ul><li>n维平面上点a(x11,x12, …… , x1n)与(x21, x22, …… ,x2n)间的欧氏距离：</li></ul><img src="./KNN算法/image-20230831143416184-1747654641667-9.png" alt="image-20230831143416184" style="zoom:80%;" /><h3 id="K值的选择"><a href="#K值的选择" class="headerlink" title="K值的选择"></a>K值的选择</h3><ul><li><p>K值过小：用<strong>较小邻域</strong>中的训练实例进行预测，容易受到<strong>异常点</strong>的影响，K值的减小就意味着<strong>整体模型变得复杂</strong>，容易发生<strong>过拟合</strong></p><blockquote><p>K值过小需要<strong>频繁调整决策边界</strong>以适应局部数据波动。这会显著<strong>增加模型的复杂度</strong>，使决策边界呈现不规则的锯齿状，最终导致<strong>过拟合</strong>（训练误差低但测试误差高）</p><ul><li><p>关于频繁调整决策边界：当K值过小时（如K&#x3D;1），模型仅依赖<strong>单个或极少数邻近样本</strong>进行预测。此时，决策边界会围绕每个训练样本的局部位置形成细碎的“锯齿状”结构。例如：</p><ul><li><strong>新增一个异常点</strong>：该点的位置会直接扭曲其邻近区域的决策边界，迫使边界围绕异常点重新划分（如原本属于类别A的区域被异常点划入类别B）</li><li><strong>样本分布不均匀</strong>：在稀疏区域，少量样本的微小位置变化会导致边界剧烈波动，模型需要不断调整以匹配这些局部特征</li></ul></li><li><p>关于模型变得复杂：</p><ul><li><strong>特征空间分割过细</strong><br>小K值要求模型在特征空间中为每个样本划分独立的“势力范围”。当样本量增加时，这些细碎的分区需要频繁调整以容纳新样本，边界重构的计算量急剧上升</li><li><strong>对噪声的敏感反馈</strong><br>噪声或标注错误的样本会生成<strong>伪局部模式</strong>。例如，一个误标为“猫”的狗图片（噪声），在K&#x3D;1时会形成一个以该样本为中心的猫类区域，迫使决策边界绕行该区域，形成非真实的分类结构</li></ul></li></ul></blockquote></li><li><p>K值过大：用<strong>较大邻域</strong>中的训练实例进行预测，受到<strong>样本均衡</strong>的问题，且K值的增大就意味着整体的模型<strong>变得简单，使得分类边界不明显，欠拟合</strong></p><blockquote><p>K值过大：实质是通过<strong>平滑决策边界</strong>降低模型复杂度，但极端情况（如K&#x3D;N）会退化为简单多数投票模型，完全忽略特征空间中的局部信息，<strong>使得分类界限不明显</strong>，导致<strong>欠拟合</strong>（训练误差和测试误差均较高）。此时<strong>近似误差增大</strong>，模型无法捕捉数据细节</p><ul><li>模型容易偏向<strong>数量占优的类别</strong>（如猫狗分类数据集中狗样本占80%，大K值可能将所有预测结果偏向狗类）</li><li>极端情况K&#x3D;N（N为样本总数）会直接预测数量<strong>最多的类别</strong>，完全忽略特征空间信息</li></ul><blockquote><p><strong>平滑决策边界的概念</strong></p><p><strong>平滑决策边界</strong>指模型通过综合考虑样本的全局或局部分布规律，形成的连续、规则且波动较小的分类分界线。其核心目标是<strong>减少噪声干扰</strong>并提升模型的<strong>泛化能力</strong>，避免因过度拟合局部细节而产生锯齿状或不规则边界。</p></blockquote></blockquote></li></ul><h3 id="KNN的应用方式"><a href="#KNN的应用方式" class="headerlink" title="KNN的应用方式"></a>KNN的应用方式</h3><ul><li><p>解决问题：分类问题、回归问题</p></li><li><p>算法思想：若一个样本在特征空间中的 k 个<strong>最相似的</strong>样本大多数属于某一个类别，则该样本<strong>也属于这个类别</strong></p></li><li><p>相似性：<strong>欧氏距离</strong></p></li><li><p><strong>分类问题</strong>的处理流程：</p><ul><li><ol><li>计算未知<strong>样本</strong>到<strong>每一个训练样本</strong>的距离</li></ol></li><li><ol start="2"><li>将训练样本根据距离大小<strong>升序排列</strong></li></ol></li><li><ol start="3"><li>取出<strong>距离最近的 K 个</strong>训练样本</li></ol></li><li><ol start="4"><li>进行<strong>多数表决</strong>，统计 K 个样本中哪个类别的样本个数最多</li></ol></li><li><ol start="5"><li>将未知的样本<strong>归属到</strong>出现<strong>次数最多</strong>的类别</li></ol></li></ul></li><li><p><strong>回归问题</strong>的处理流程：</p><ul><li><ol><li>计算未知<strong>样本</strong>到<strong>每一个训练样本</strong>的距离</li></ol></li><li><ol start="2"><li>将训练样本根据距离大小<strong>升序排列</strong></li></ol></li><li><ol start="3"><li>取出<strong>距离最近的 K 个</strong>训练样本</li></ol></li><li><ol start="4"><li>把这个 K 个样本的目标值<strong>计算其平均值</strong></li></ol></li><li><ol start="5"><li>将上述平均值作为将<strong>未知的样本预测的值</strong></li></ol></li></ul></li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="分类API"><a href="#分类API" class="headerlink" title="分类API"></a>分类API</h3><p>KNN分类API：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.neighbors.KNeighborsClassifier(n_neighbors=<span class="number">5</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Sklearn.neighbor <span class="keyword">import</span> KNeighborClassifier(n_neighbors = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据（特征工程）</span></span><br><span class="line">x = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练</span></span><br><span class="line">model.fit(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型预测</span></span><br><span class="line"><span class="built_in">print</span>(model.predict([[<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]]))</span><br></pre></td></tr></table></figure><p>n_neighbors：int,可选（默认&#x3D; 5），k_neighbors查询默认使用的邻居数</p><h3 id="回归API"><a href="#回归API" class="headerlink" title="回归API"></a>回归API</h3><p>KNN分类API：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sklearn.neighbors.KNeighborsRegressor(n_neighbors=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier,KNeighborsRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据(特征工程)</span></span><br><span class="line">x = [</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">]</span><br><span class="line">y = [<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>,<span class="number">0.4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.实例化</span></span><br><span class="line">model = KNeighborsRegressor(n_neighbors=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.训练</span></span><br><span class="line">model.fit(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.预测</span></span><br><span class="line"><span class="built_in">print</span>(model.predict([[<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]]))</span><br></pre></td></tr></table></figure><h2 id="距离度量方法"><a href="#距离度量方法" class="headerlink" title="距离度量方法"></a>距离度量方法</h2><h3 id="欧式距离"><a href="#欧式距离" class="headerlink" title="欧式距离"></a>欧式距离</h3><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831153948263-1747654680288-11.png" alt="image-20230831153948263"></p><h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h3><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831154005301-1747654702676-13.png" alt="image-20230831154005301"></p><h3 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h3><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831154033908-1747654718135-15.png" alt="image-20230831154033908"></p><p><strong>绝对差 最大值</strong></p><h3 id="闵氏距离"><a href="#闵氏距离" class="headerlink" title="闵氏距离"></a>闵氏距离</h3><p>闵可夫斯基距离，不是一种新的距离的度量方式。而是<strong>距离的组合</strong>，是对多个距离度量公式的<strong>概括性的表述</strong></p><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831154217579-1747654733524-17.png" alt="image-20230831154217579"></p><h2 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h2><h3 id="为什么进行归一化、标准化"><a href="#为什么进行归一化、标准化" class="headerlink" title="为什么进行归一化、标准化"></a>为什么进行归一化、标准化</h3><p>特征的<strong>单位或者大小相差较大，或者某特征的方差相比其他的特征要大出几个数量级</strong>，<strong>容易影响（支配）目标结果</strong>，使得一些模型（算法）无法学习到其它的特征。</p><style>.wcgorzrvbnts{zoom:80%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831155159883-1747654745039-19.png" class="wcgorzrvbnts" alt="image-20230831155159883"><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>通过对原始数据进行变换把数据映射到【mi,mx】(默认为[0,1])之间</p><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831155813699-1747654771671-21.png" alt="image-20230831155813699"></p><p>数据归一化的API实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocession <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm01_MinMaxScaler</span>():</span><br><span class="line">    <span class="comment"># 1.准备数据</span></span><br><span class="line">    raw_data = [</span><br><span class="line">        [<span class="number">90</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">40</span>],</span><br><span class="line">    [<span class="number">60</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">45</span>],</span><br><span class="line">    [<span class="number">75</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">46</span>],</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.初始归一化对象</span></span><br><span class="line">    transformer = MinMaxScaler()<span class="comment">#（01）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.对原始特征进行变换</span></span><br><span class="line">    data = transformer.fit_transform(raw_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.打印归一化后的结果</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>归一化受到最大值与最小值的影响，这种方法<strong>容易受</strong>到异常数据的影响, <strong>鲁棒性较差</strong>，适合传统<strong>精确小数据</strong>场景</p><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><p>通过对原始数据进行标准化，转换为<strong>均值为0</strong>，<strong>标准差为1</strong>的标准正态分布的数据</p><style>.wdpmhsttvwme{zoom:50%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831160053298-1747654791663-23.png" class="wdpmhsttvwme" alt="image-20230831160053298"><ul><li>mean 为特征的平均值</li><li>σ 为特征的标准差</li></ul><p>数据标准化的API实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm03_StandardScaler</span>():</span><br><span class="line">    <span class="comment"># 1.准备数据</span></span><br><span class="line">    raw_data = [</span><br><span class="line">        [<span class="number">90</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">40</span>],</span><br><span class="line">        [<span class="number">60</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">45</span>],</span><br><span class="line">        [<span class="number">75</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">46</span>]</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.初始化标准化对象</span></span><br><span class="line">    transformer = StandardScaler()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.对原始特征进行变换(特征处理)</span></span><br><span class="line">    data = transformer.fit_transform(raw_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.打印归一化结果</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#5.打印每一列的均值和方差</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;transformer.mean_--&gt;&#x27;</span>, transformer)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;transformer.var_--&gt;&#x27;</span>, transformer.var_)</span><br></pre></td></tr></table></figure><p>对于标准化来说，如果出现异常点，由于具有<strong>一定数据量</strong>，<strong>少量</strong>的异常点<strong>对于平均值的影响并不大</strong></p><h3 id="利用KNN算法进行鸢尾花分类"><a href="#利用KNN算法进行鸢尾花分类" class="headerlink" title="利用KNN算法进行鸢尾花分类"></a>利用KNN算法进行鸢尾花分类</h3><p>鸢尾花Iris Dataset数据集是机器学习领域经典数据集，鸢尾花数据集包含了150条鸢尾花信息，每50条取自三个鸢尾花中之一：Versicolour（变色鸢尾）、Setosa（山鸢尾）和Virginica（维吉尼亚鸢尾）</p><p>花瓣petal，花萼sepal</p><style>.yfqdclhnfwvt{zoom:50%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/0_QHogxF9l4hy0Xxub-1747654811063-25.png" class="yfqdclhnfwvt" alt="0_QHogxF9l4hy0Xxub"><p>每个花的特征用如下属性描述：</p><style>.npontqrkoixk{zoom:67%;}</style><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/0_SHhnoaaIm36pc1bd-1747654838095-27.png" class="npontqrkoixk" alt="0_SHhnoaaIm36pc1bd"><p>代码实现：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.加载数据集</span></span><br><span class="line">iris_data = load_iris()</span><br><span class="line"><span class="comment"># print(iris_data)</span></span><br><span class="line"><span class="comment"># print(iris_data.target)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.数据展示</span></span><br><span class="line">iris_df = pd.DataFrame(iris_data[<span class="string">&#x27;data&#x27;</span>], columns=iris_data.feature_names)</span><br><span class="line">iris_df[<span class="string">&#x27;label&#x27;</span>] = iris_data.target</span><br><span class="line"><span class="comment"># print(iris_data.feature_names)</span></span><br><span class="line"><span class="comment"># sns.lmplot(x=&#x27;sepal length (cm)&#x27;,y=&#x27;sepal width (cm)&#x27;,data = iris_df,hue=&#x27;label&#x27;)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.特征工程(预处理-标准化)</span></span><br><span class="line"><span class="comment"># 3.1 数据集划分</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size=<span class="number">0.3</span>, random_state=<span class="number">22</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(iris_data.data))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x_train))</span><br><span class="line"><span class="comment"># 3.2 标准化</span></span><br><span class="line">process = StandardScaler()</span><br><span class="line">x_train = process.fit_transform(x_train)</span><br><span class="line">x_test = process.transform(x_test)</span><br><span class="line"><span class="comment"># 4.模型训练</span></span><br><span class="line"><span class="comment"># 4.1 实例化</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 4.2 调用fit法</span></span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line"><span class="comment"># 5.模型预测</span></span><br><span class="line">x = [[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>]]</span><br><span class="line">x=process.transform(x)</span><br><span class="line">y_predict =model.predict(x_test)</span><br><span class="line"><span class="built_in">print</span>(model.predict_proba(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.模型评估(准确率)</span></span><br><span class="line"><span class="comment"># 6.1 使用预测结果</span></span><br><span class="line">acc =accuracy_score(y_test,y_predict)</span><br><span class="line"><span class="built_in">print</span>(acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.2 直接计算</span></span><br><span class="line">acc = model.score(x_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(acc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="超参数选择的方法"><a href="#超参数选择的方法" class="headerlink" title="超参数选择的方法"></a>超参数选择的方法</h2><h3 id="超参数的定义与核心作用"><a href="#超参数的定义与核心作用" class="headerlink" title="超参数的定义与核心作用"></a>超参数的定义与核心作用</h3><p><strong>超参数</strong>是机器学习模型在训练前需<strong>人为设定的参数</strong>，用于<strong>控制</strong>模型的<strong>学习过程和性能</strong>，其选择直接影响模型的<strong>训练效果和泛化能力</strong>。与<strong>模型参数</strong>（如线性回归的权重）不同，超参数无法通过数据自动学习，需通过<strong>经验或优化方法确定</strong></p><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p>交叉验证是一种<strong>数据集的分割方法</strong>，将训练集划分为 n 份，其中<strong>一份做验证集</strong>、其他n-1份做训练集</p><p><img src="/2025/05/19/KNN%E7%AE%97%E6%B3%95/image-20230831163236810-1747654869823-29.png" alt="image-20230831163236810"></p><p><strong>交叉验证法原理</strong>：将数据集划分为 <strong>cv&#x3D;10 份</strong>：</p><ul><li><ol><li>第一次：把<strong>第一份</strong>数据做<strong>验证集</strong>，其他数据<strong>做训练</strong></li></ol></li><li><ol start="2"><li>第二次：把第二份数据做验证集，其他数据做训练</li></ol></li><li><ol start="3"><li>… 以此类推，<strong>总共训练10次</strong>，<strong>评估10次</strong>。</li></ol></li><li><ol start="4"><li>使用训练集+验证集多次评估模型，<strong>取平均值</strong>做交叉验证为<strong>模型得分</strong></li></ol></li><li><ol start="5"><li>若k&#x3D;5模型得分最好，再使用全部训练集(训练集+验证集) 对k&#x3D;5模型<strong>再训练一遍</strong>，<strong>再</strong>使用测试集对k&#x3D;5模型<strong>做评估</strong></li></ol></li></ul><blockquote><p>交叉验证法，是划分数据集的一种方法，目的就是为了得到<strong>更加准确</strong>可信的<strong>模型评分</strong>。</p></blockquote><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><ul><li><p>网格搜索的需求</p><ul><li>模型有很多<strong>超参数（如k）</strong>，其能力也存在很大的差异。需要<strong>手动产生很多超参数组合</strong>，来<strong>训练模型</strong></li><li>每组超参数都采用<strong>交叉验证</strong>评估，最后选出最优参数组合建立模型</li></ul></li><li><p>网格搜索是<strong>模型调参</strong>的<strong>有力工具</strong>。寻找<strong>最优超参数</strong>的工具</p><blockquote><p>只需要将<strong>若干参数</strong>传递给<strong>网格搜索对象</strong>，它自动帮我们完成<strong>不同超参数的组合</strong>、<strong>模型训练</strong>、<strong>模型评估</strong>，最终<strong>返回一组最优</strong>的超参数</p></blockquote></li><li><p>网格搜索 + 交叉验证的强力组合 (模型选择和调优)</p><ul><li>交叉验证解决<strong>模型的数据输入问题</strong>(数据集划分)得到更可靠的模型</li><li>网格搜索解决<strong>超参数组合</strong></li><li>两个组合在一起形成一个模型参数调优的解决方案</li></ul></li></ul><p><img src="/./KNN%E7%AE%97%E6%B3%95/image-20230910154650041-1747654887000-31.png" alt="image-20230910154650041"></p><h3 id="交叉验证网格搜索的API"><a href="#交叉验证网格搜索的API" class="headerlink" title="交叉验证网格搜索的API"></a>交叉验证网格搜索的API</h3><ul><li>参数详解</li></ul><table><thead><tr><th align="center"><strong>参数</strong></th><th align="center"><strong>功能说明</strong></th></tr></thead><tbody><tr><td align="center"><code>estimator</code></td><td align="center">指定待调参的模型对象（如KNN、SVM、随机森林等）。</td></tr><tr><td align="center"><code>param_grid</code></td><td align="center">超参数网格字典，定义需搜索的参数组合（例如<code>&#123;&quot;n_neighbors&quot;: [1,3,5]&#125;</code>）。</td></tr><tr><td align="center"><code>cv</code></td><td align="center">交叉验证折数（如<code>cv=5</code>表示5折交叉验证）。</td></tr></tbody></table><ul><li>方法</li></ul><table><thead><tr><th align="center"><strong>方法&#x2F;属性</strong></th><th align="center"><strong>作用</strong></th></tr></thead><tbody><tr><td align="center"><code>fit(X, y)</code></td><td align="center">输入训练数据，执行交叉验证网格搜索。</td></tr><tr><td align="center"><code>score(X, y)</code></td><td align="center">返回模型在测试数据上的准确率（需在<code>fit</code>后调用）。</td></tr><tr><td align="center"><code>best_score_</code></td><td align="center">交叉验证中验证集的最佳得分（如最高准确率）。</td></tr><tr><td align="center"><code>best_estimator_</code></td><td align="center">返回最优超参数对应的模型对象（可直接用于预测）。</td></tr><tr><td align="center"><code>cv_results_</code></td><td align="center">保存每次交叉验证的详细结果（包括训练集和验证集的得分、参数组合等）。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义模型及参数网格</span></span><br><span class="line">knn = KNeighborsClassifier()</span><br><span class="line">param_grid = &#123;<span class="string">&quot;n_neighbors&quot;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]&#125;  <span class="comment"># 搜索k=1,3,5,7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 初始化GridSearchCV对象</span></span><br><span class="line">grid_search = GridSearchCV(</span><br><span class="line">    estimator=knn, <span class="comment"># 待调优的模型对象</span></span><br><span class="line">    param_grid=param_grid,</span><br><span class="line">    cv=<span class="number">5</span>  <span class="comment"># 5折交叉验证</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 训练并输出结果</span></span><br><span class="line">grid_search.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最优k值：<span class="subst">&#123;grid_search.best_estimator_.n_neighbors&#125;</span>&quot;</span>)  <span class="comment"># 如输出5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;验证集最高准确率：<span class="subst">&#123;grid_search.best_score_:<span class="number">.2</span>f&#125;</span>&quot;</span>)     <span class="comment"># 如0.92</span></span><br></pre></td></tr></table></figure><p>交叉验证网格搜索在鸢尾花分类中的应用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.导入工具包</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split,GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.加载数据</span></span><br><span class="line">data = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 数据集划分</span></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data.data,data.target,test_size=<span class="number">0.2</span>,random_state=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.特征预处理</span></span><br><span class="line">pre = StandardScaler()</span><br><span class="line">x_train=pre.fit_transform(x_train)</span><br><span class="line">x_test=pre.transform(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.模型实例化+交叉验证+网格搜索</span></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">paras_grid = &#123;<span class="string">&#x27;n_neighbors&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]&#125;</span><br><span class="line"><span class="comment"># estimator =GridSearchCV(estimator=model,param_grid=paras_grid,cv=4)</span></span><br><span class="line"><span class="comment"># estimator.fit(x_train,y_train)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(estimator.best_score_)</span></span><br><span class="line"><span class="comment"># print(estimator.best_estimator_)</span></span><br><span class="line"><span class="comment"># print(estimator.cv_results_)</span></span><br><span class="line"></span><br><span class="line">model = KNeighborsClassifier(n_neighbors=<span class="number">7</span>)</span><br><span class="line">model.fit(x_train,y_train)</span><br><span class="line">x = [[<span class="number">5.1</span>, <span class="number">3.5</span>, <span class="number">1.4</span>, <span class="number">0.2</span>]]</span><br><span class="line">x=pre.transform(x)</span><br><span class="line">y_prdict=model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(accuracy_score(y_test,y_prdict))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入漏洞</title>
      <link href="/2025/05/19/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/05/19/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础</title>
      <link href="/2025/05/19/PHP%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/19/PHP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h3 id="一、PHP-代码基础"><a href="#一、PHP-代码基础" class="headerlink" title="一、PHP 代码基础"></a>一、PHP 代码基础</h3><ol><li><p><strong>注释</strong><br>PHP 支持单行注释 <code>//</code> 和多行注释 <code>/* ... */</code>，以及用 <code>#</code> 开头的注释。注释内容会被解析器忽略。</p></li><li><p><strong>输出内容</strong><br>使用 <code>echo</code> 关键字可将内容输出到页面。例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>PHP 代码可嵌入 HTML 中，动态生成页面内容。</p></li><li><p><strong>字符串拼接</strong><br>PHP 通过 <code>.</code> 操作符合并字符串，例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$message</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&quot;老李&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$message</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$name</span>; <span class="comment">// 输出 &quot;Hello 老李&quot;</span></span><br></pre></td></tr></table></figure><p>若需格式化输出，可用双引号包裹变量（如 <code>&quot;$name&quot;</code>），单引号则直接输出字面值。</p></li></ol><h3 id="二、语法特性"><a href="#二、语法特性" class="headerlink" title="二、语法特性"></a>二、语法特性</h3><ol><li><p><strong>单双引号区别</strong><br>• 双引号解析变量（如 <code>&quot;$name&quot;</code>）和转义字符（如 <code>&quot;\n&quot;</code>）；<br>• 单引号仅输出字面值，需用 <code>\&#39;</code> 转义单引号本身。</p></li><li><p><strong>调试函数</strong><br><code>var_dump()</code> 可输出变量的类型、长度及值，常用于调试：  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$domain</span> = <span class="string">&quot;example.com&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$domain</span>); <span class="comment">// 输出 string(11) &quot;example.com&quot;</span></span><br></pre></td></tr></table></figure><p>与 <code>echo</code> 不同，<code>var_dump()</code> 无返回值，仅用于调试。</p></li></ol><h1 id="变量与作用域"><a href="#变量与作用域" class="headerlink" title="变量与作用域"></a>变量与作用域</h1><p>今天我们来学习 PHP 的变量及其作用域，结合编程语言的共性特征与 PHP 的特性展开分析：</p><hr><h3 id="一、PHP-变量的基本概念"><a href="#一、PHP-变量的基本概念" class="headerlink" title="一、PHP 变量的基本概念"></a>一、PHP 变量的基本概念</h3><ol><li><p><strong>变量定义</strong><br>PHP 变量以美元符号 <code>$</code> 开头，后接变量名，通过 <code>=</code> 赋值。变量类型在运行时自动确定，<strong>无需显式声明</strong>。例如： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="string">&quot;张三&quot;</span>; <span class="comment">// 字符串类型</span></span><br><span class="line"><span class="variable">$age</span> = <span class="number">25</span>;      <span class="comment">// 整型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>弱类型特性</strong><br>PHP 是动态类型语言，变量类型由值<strong>自动推断</strong>。例如，整型变量可被赋值为字符串：  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$var</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 自动转为字符串类型</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="二、变量命名规则"><a href="#二、变量命名规则" class="headerlink" title="二、变量命名规则"></a>二、变量命名规则</h3><ol><li><p><strong>基本规范</strong><br>• 必须<strong>以字母或下划线开头</strong>，后接字母、数字或下划线。<br>• <strong>区分大小写</strong>（如 <code>$name</code> 与 <code>$Name</code> 不同）。<br>• 避免使用拼音或无意义缩写，推荐使用英文单词组合（如 <code>$userAge</code>）。</p></li><li><p><strong>命名风格</strong><br>• <strong>驼峰命名法</strong>：<code>$firstName</code>（小驼峰）或 <code>$FirstName</code>（大驼峰）。<br>• <strong>下划线命名法</strong>：<code>$user_age</code>（推荐用于常量或全局变量）。</p></li></ol><hr><h3 id="三、变量作用域"><a href="#三、变量作用域" class="headerlink" title="三、变量作用域"></a>三、变量作用域</h3><p>PHP 变量作用域分为以下四类，通过代码示例说明差异：</p><ol><li><p><strong>局部作用域（Local Scope）</strong><br>函数内部声明的变量仅在该函数内有效： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$localVar</span> = <span class="string">&quot;I&#x27;m local&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$localVar</span>; <span class="comment">// 报错：未定义变量</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局作用域（Global Scope）</strong><br>函数外部声明的变量需通过 <code>global</code> 关键字或 <code>$GLOBALS</code> 数组访问： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$globalVar</span> = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showGlobal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$globalVar</span>; <span class="comment">// 引用全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$globalVar</span>;  <span class="comment">// 输出 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态作用域（Static Scope）</strong><br>使用 <code>static</code> 关键字声明的局部变量，其值在函数调用间保留： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$count</span>++;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$count</span>; <span class="comment">// 输出 1,2,3...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>参数作用域（Parameter Scope）</strong><br>函数参数作为局部变量，仅在函数内部有效： </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>; <span class="comment">// 输出传入的值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">printName</span>(<span class="string">&quot;张三&quot;</span>); <span class="comment">// 输出 &quot;张三&quot;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="四、特殊变量与注意事项"><a href="#四、特殊变量与注意事项" class="headerlink" title="四、特殊变量与注意事项"></a>四、特殊变量与注意事项</h3><ol><li><p><strong>未初始化变量</strong><br>PHP 未初始化的变量默认值为 <code>NULL</code>（布尔型）或空值（如空字符串、空数组）。 </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$undefinedVar</span>; <span class="comment">// 类型为 NULL，empty() 返回 true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>超全局变量</strong><br>如 <code>$_GET</code>、<code>$_POST</code> 等，可在任何作用域直接访问。</p></li><li><p><strong>变量引用与解引用</strong><br>• 引用：<code>$b = &amp;$a</code>，修改 <code>$b</code> 会影响 <code>$a</code>。<br>• 解引用：<code>$$b</code> 表示变量名由 <code>$b</code> 的值决定。</p></li></ol><h1 id="常量与数据类型"><a href="#常量与数据类型" class="headerlink" title="常量与数据类型"></a>常量与数据类型</h1><h3 id="一、PHP-常量"><a href="#一、PHP-常量" class="headerlink" title="一、PHP 常量"></a>一、PHP 常量</h3><ol><li><p><strong>定义与特性</strong><br>• 常量通过 <code>define()</code> 函数或 <code>const</code> 关键字定义，一旦创建不可修改。<br>• 常量名必须全大写（如 <code>MESSAGE</code>），默认大小写敏感，但 <code>define()</code> 的 <code>case_insensitive</code> 参数（PHP 7.3+）可设为 <code>true</code> 实现不敏感。<br>• 值只能是标量类型（整型、浮点型、布尔型、字符串），不能是数组、对象或资源。 </p></li><li><p><strong>推荐写法</strong><br>• 优先使用 <code>const</code> 关键字（PHP 5.3+），语法更简洁： </p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>• 避免使用 <code>define()</code> 的旧语法（已弃用），如： </p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;MESSAGE&quot;</span>, <span class="string">&quot;Hello&quot;</span>, <span class="literal">true</span>); <span class="comment">// 不推荐</span></span><br></pre></td></tr></table></figure></li><li><p><strong>作用域</strong><br>• 常量默认全局有效，无需 <code>global</code> 关键字即可在函数内访问。</p></li></ol><hr><h3 id="二、PHP-数据类型"><a href="#二、PHP-数据类型" class="headerlink" title="二、PHP 数据类型"></a>二、PHP 数据类型</h3><p>PHP 支持 9 种原始数据类型，分为以下三类： </p><h4 id="1-标量类型"><a href="#1-标量类型" class="headerlink" title="1. 标量类型"></a>1. <strong>标量类型</strong></h4><p>   • <strong>布尔型（Boolean）</strong>：<br>     ◦ 值为 <code>true</code> 或 <code>false</code>，不区分大小写（如 <code>TRUE</code>、<code>False</code> 均可）。<br>     ◦ 转换规则：<code>0</code>、<code>&quot;&quot;</code>、<code>null</code> 等值转为 <code>false</code>，其余为 <code>true</code>。<br>   • <strong>整型（Integer）</strong>：<br>     ◦ 整数（如 <code>42</code>、<code>-15</code>），支持十进制、十六进制（<code>0x</code>）、八进制（<code>0</code>）表示。<br>   • <strong>浮点型（Float）</strong>：<br>     ◦ 小数（如 <code>3.14</code>）或科学计数法（如 <code>2.5e2</code>）。<br>   • <strong>字符串（String）</strong>：<br>     ◦ 单引号或双引号包裹的文本，支持转义字符（如 <code>&quot;\n&quot;</code>）。  </p><h4 id="2-复合类型"><a href="#2-复合类型" class="headerlink" title="2. 复合类型"></a>2. <strong>复合类型</strong></h4><p>   • <strong>数组（Array）</strong>：<br>     ◦ 存储有序集合，可包含不同类型的元素（如 <code>[&quot;apple&quot;, 123](@ref)</code>）。<br>   • <strong>对象（Object）</strong>：<br>     ◦ 类的实例，包含属性和方法。  </p><h4 id="3-特殊类型"><a href="#3-特殊类型" class="headerlink" title="3. 特殊类型"></a>3. <strong>特殊类型</strong></h4><p>   • <strong>NULL</strong>：表示变量无值（如 <code>unset($var)</code> 或未定义的变量）。<br>   • <strong>资源（Resource）</strong>：<br>     ◦ 外部资源（如数据库连接、文件句柄），需手动释放。  </p><hr><h3 id="三、类型检测与转换"><a href="#三、类型检测与转换" class="headerlink" title="三、类型检测与转换"></a>三、类型检测与转换</h3><ol><li><p><strong>检测类型</strong><br>• 使用 <code>gettype()</code> 函数或类型判断函数（如 <code>is_int()</code>、<code>is_string()</code>）。<br>• 布尔值检测推荐 <code>is_bool()</code>，而非直接比较 <code>== true</code>。 </p></li><li><p><strong>类型转换</strong><br>• 弱类型语言特性：运算时自动转换（如字符串 <code>&quot;123&quot;</code> + <code>456</code> 结果为 <code>579</code>）。<br>• 强制转换：<code>(int)</code>、<code>(string)</code> 等语法。</p></li></ol><hr><h3 id="四、调试与最佳实践"><a href="#四、调试与最佳实践" class="headerlink" title="四、调试与最佳实践"></a>四、调试与最佳实践</h3><p>• <strong>调试</strong>：使用 <code>var_dump()</code> 查看变量类型和值，<code>defined()</code> 检查常量是否定义。<br>• <strong>命名规范</strong>：<br>  • 常量全大写，变量以 <code>$</code> 开头且具描述性（如 <code>$userAge</code>）。<br>  • 避免使用拼音或无意义缩写。 </p><h1 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h1><h3 id="一、浮点型（Float）"><a href="#一、浮点型（Float）" class="headerlink" title="一、浮点型（Float）"></a>一、浮点型（Float）</h3><p>浮点型用于表示小数，但存在精度问题，<strong>永远不要直接比较两个浮点数是否相等</strong>。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pi</span> = <span class="number">3.1415926535</span>;</span><br><span class="line"><span class="variable">$approx</span> = <span class="number">22</span>/<span class="number">7</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$pi</span> == <span class="variable">$approx</span>)? <span class="string">&quot;相等&quot;</span> : <span class="string">&quot;不相等&quot;</span>; <span class="comment">// 输出 &quot;不相等&quot; </span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ol><li>浮点数运算可能产生舍入误差，建议使用 <code>abs($a-$b) &lt; 0.0001</code> 判断近似相等。</li><li>若需高精度计算，可使用 <code>BC Math</code> 或 <code>GMP</code> 扩展库。</li></ol><hr><h3 id="二、整型（Integer）"><a href="#二、整型（Integer）" class="headerlink" title="二、整型（Integer）"></a>二、整型（Integer）</h3><p>整型表示整数，支持十进制、十六进制（<code>0x</code>）、八进制（<code>0</code>）表示。例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">25</span>;       <span class="comment">// 十进制</span></span><br><span class="line"><span class="variable">$hex</span> = <span class="number">0x1A</span>;     <span class="comment">// 十六进制（26）</span></span><br><span class="line"><span class="variable">$oct</span> = <span class="number">012</span>;      <span class="comment">// 八进制（10）</span></span><br></pre></td></tr></table></figure><p><strong>关键特性</strong>：<br>• <strong>溢出处理</strong>：超出范围时自动转为浮点型（如 <code>2147483648</code> 会变成 <code>2.147483648E+9</code>）。<br>• <strong>弱类型转换</strong>：字符串 <code>123abc</code> 会被转为整型 <code>123</code>，非数字部分被忽略。</p><hr><h3 id="三、字符串（String）"><a href="#三、字符串（String）" class="headerlink" title="三、字符串（String）"></a>三、字符串（String）</h3><p>字符串由字符序列组成，支持三种定义方式：</p><ol><li><p><strong>单引号</strong>：不解析变量和转义字符（如 <code>&#39;$name&#39;</code> 输出 <code>$name</code>）。</p></li><li><p><strong>双引号</strong>：解析变量（如 <code>&quot;$name&quot;</code> 输出变量值）和转义字符（如 <code>&quot;\n&quot;</code> 表示换行）。</p></li><li><p><strong>Heredoc</strong>：适合多行字符串，通过 <code>&lt;&lt;&lt;标识符</code> 定义，例如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$html</span> = <span class="string">&lt;&lt;&lt;EOT</span></span><br><span class="line"><span class="string">&lt;h1&gt;Hello, <span class="subst">&#123;$name&#125;</span>&lt;/h1&gt;</span></span><br><span class="line"><span class="string">EOT</span>;</span><br></pre></td></tr></table></figure><p>标识符需顶格写，结束符与开始符一致。</p></li></ol><p><strong>字符串操作</strong>：<br>• <strong>转义</strong>：反斜杠 <code>\</code> 用于转义单引号、双引号等（如 <code>\&quot;</code> 输出 <code>&quot;</code>）。<br>• **类型转换**：使用 <code>strval()</code> 函数将其他类型转为字符串。</p><hr><h3 id="四、布尔值（bool）-和-NULL"><a href="#四、布尔值（bool）-和-NULL" class="headerlink" title="四、布尔值（bool） 和 NULL"></a>四、<strong>布尔值（<code>bool</code>）</strong> 和 <strong>NULL</strong></h3><p>• <strong>布尔值</strong>：<code>true</code> 或 <code>false</code>，<code>0</code>、<code>&quot;&quot;</code>、<code>null</code> 等值会被隐式转换为 <code>false</code>。<br>• <strong>NULL</strong>：表示无值，可通过 <code>is_null()</code> 检测。</p><h1 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h1><h3 id="一、PHP-数组"><a href="#一、PHP-数组" class="headerlink" title="一、PHP 数组"></a>一、PHP 数组</h3><h4 id="1-数组类型"><a href="#1-数组类型" class="headerlink" title="1. 数组类型"></a>1. <strong>数组类型</strong></h4><p>PHP 支持三种数组类型：<br>• <strong>索引数组</strong>：使用数字键（默认从 0 开始自动递增）</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>]; <span class="comment">// 简写语法</span></span><br></pre></td></tr></table></figure><p>• <strong>关联数组</strong>：使用字符串键存储键值对</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span> =&gt; <span class="number">30</span>];</span><br></pre></td></tr></table></figure><p>• <strong>多维数组</strong>：数组嵌套数组，用于复杂数据结构</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$matrix</span> = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="2-数组操作"><a href="#2-数组操作" class="headerlink" title="2. 数组操作"></a>2. <strong>数组操作</strong></h4><p>• <strong>创建</strong>：通过 <code>array()</code> 函数或简写 <code>[]</code> 语法</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fruits</span> = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>]; <span class="comment">// 索引数组</span></span><br><span class="line"><span class="variable">$person</span> = [<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;city&quot;</span> =&gt; <span class="string">&quot;Beijing&quot;</span>]; <span class="comment">// 关联数组</span></span><br></pre></td></tr></table></figure><p>• <strong>增删改查</strong>：<br>  • <strong>添加元素</strong>：<code>$arr[] = &quot;new_element&quot;</code>（末尾追加）或 <code>array_push()</code><br>  • <strong>删除元素</strong>：<code>unset($arr[1])</code><br>  • <strong>遍历</strong>：<code>foreach</code> 循环（推荐）或 <code>for</code> 循环</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$fruits</span> <span class="keyword">as</span> <span class="variable">$fruit</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fruit</span> . <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>排序</strong>：<code>sort()</code>（索引数组升序）、<code>rsort()</code>（降序）或 <code>usort()</code>（自定义排序）</p><hr><h3 id="二、PHP-对象"><a href="#二、PHP-对象" class="headerlink" title="二、PHP 对象"></a>二、PHP 对象</h3><h4 id="1-对象定义"><a href="#1-对象定义" class="headerlink" title="1. 对象定义"></a>1. <strong>对象定义</strong></h4><p>• <strong>类与实例化</strong>：通过 <code>class</code> 关键字定义类，<code>new</code> 关键字创建对象</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello, my name is &quot;</span> . <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h4 id="2-对象属性与方法"><a href="#2-对象属性与方法" class="headerlink" title="2. 对象属性与方法"></a>2. <strong>对象属性与方法</strong></h4><p>• <strong>属性</strong>：通过 <code>$this-&gt;属性名</code> 访问和修改</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span>-&gt;name = <span class="string">&quot;Jane&quot;</span>; <span class="comment">// 修改属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person</span>-&gt;age; <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><p>• <strong>方法</strong>：通过对象调用，<code>$this</code> 指向当前实例</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, my name is John&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-对象数组"><a href="#3-对象数组" class="headerlink" title="3. 对象数组"></a>3. <strong>对象数组</strong></h4><p>• <strong>存储多个对象</strong>：将对象作为数组元素</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$people</span> = [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>)</span><br><span class="line">];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$people</span> <span class="keyword">as</span> <span class="variable">$person</span>) &#123;</span><br><span class="line">    <span class="variable">$person</span>-&gt;<span class="title function_ invoke__">sayHello</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、关键区别与注意事项"><a href="#三、关键区别与注意事项" class="headerlink" title="三、关键区别与注意事项"></a>三、关键区别与注意事项</h3><ol><li><strong>数组 vs 对象</strong><br>• 数组是数据集合，对象是数据与行为的封装<br>• 数组通过键访问元素，对象通过属性和方法操作数据</li><li><strong>弱类型语言特性</strong><br>PHP 自动转换数据类型，但需注意精度问题（如浮点数比较）</li><li><strong>作用域与访问</strong><br>• 全局变量需用 <code>global</code> 访问，对象属性通过 <code>$this</code> 直接访问<br>• 静态属性&#x2F;方法使用 <code>self::</code> 或 <code>ClassName::</code> 访问</li></ol><h1 id="特殊类型"><a href="#特殊类型" class="headerlink" title="特殊类型"></a>特殊类型</h1><h3 id="一、null-类型"><a href="#一、null-类型" class="headerlink" title="一、null 类型"></a>一、<code>null</code> 类型</h3><h4 id="1-定义与特性"><a href="#1-定义与特性" class="headerlink" title="1. 定义与特性"></a>1. <strong>定义与特性</strong></h4><p>• <strong><code>null</code> 表示变量无值</strong>，既不是空字符串、零，也不是布尔值 <code>false</code>。<br>• <strong>不区分大小写</strong>：<code>NULL</code>、<code>null</code>、<code>NuLL</code> 均等价。<br>• <strong>三种赋值为 <code>null</code> 的场景</strong>：</p><pre><code>1. **显式赋值**：`$var = null;`2. **未初始化变量**：函数内未声明的变量默认为 `null`。3. **显式释放**：通过 `unset($var)` 删除变量。</code></pre><h4 id="2-隐式转换风险"><a href="#2-隐式转换风险" class="headerlink" title="2. 隐式转换风险"></a>2. <strong>隐式转换风险</strong></h4><p>• <strong>算术运算中的陷阱</strong>：<code>null</code> 在运算中会被转换为 <code>0</code>。例如：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>; <span class="comment">// 未初始化，默认为 null</span></span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> + <span class="variable">$a</span>; <span class="comment">// 相当于 0 + 0，结果为 0</span></span><br></pre></td></tr></table></figure><p>  若代码中出现类似 <code>a + b</code> 的意外结果（如输出 <code>0</code>），需检查变量是否未初始化。</p><h4 id="3-检测方法"><a href="#3-检测方法" class="headerlink" title="3. 检测方法"></a>3. <strong>检测方法</strong></h4><p>• 使用 <code>is_null($var)</code> 判断变量是否为 <code>null</code>。<br>• 通过 <code>isset($var)</code> 检测变量是否已声明且不为 <code>null</code>。</p><h4 id="4-显式释放变量"><a href="#4-显式释放变量" class="headerlink" title="4. 显式释放变量"></a>4. <strong>显式释放变量</strong></h4><p>• 使用 <code>unset($var)</code> 删除变量，此时变量值变为 <code>null</code>，但不影响内存释放（PHP 自动管理）。</p><hr><h3 id="二、resource-类型"><a href="#二、resource-类型" class="headerlink" title="二、resource 类型"></a>二、<code>resource</code> 类型</h3><h4 id="1-定义与用途"><a href="#1-定义与用途" class="headerlink" title="1. 定义与用途"></a>1. <strong>定义与用途</strong></h4><p>• <strong><code>resource</code> 表示外部资源引用</strong>，如数据库连接、文件句柄、图像画布等。<br>• <strong>无法直接操作</strong>，需通过特定函数间接使用（如 <code>mysqli_query()</code> 操作数据库连接）。</p><h4 id="2-生命周期管理"><a href="#2-生命周期管理" class="headerlink" title="2. 生命周期管理"></a>2. <strong>生命周期管理</strong></h4><p>• <strong>自动垃圾回收</strong>：PHP 通过引用计数自动释放不再使用的资源，无需手动关闭。<br>• <strong>手动释放建议</strong>：对长时间运行的脚本（如 CLI 任务），建议显式调用 <code>fclose()</code> 或 <code>mysqli_close()</code> 释放资源。</p><h4 id="3-示例：数据库连接"><a href="#3-示例：数据库连接" class="headerlink" title="3. 示例：数据库连接"></a>3. <strong>示例：数据库连接</strong></h4>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;user&quot;</span>, <span class="string">&quot;pass&quot;</span>, <span class="string">&quot;db&quot;</span>); <span class="comment">// $conn 是 resource 类型</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$conn</span>)) &#123;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$conn</span>, <span class="string">&quot;SELECT * FROM users&quot;</span>);</span><br><span class="line">    <span class="comment">// 操作完成后可显式关闭连接</span></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$conn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、总结与对比"><a href="#三、总结与对比" class="headerlink" title="三、总结与对比"></a>三、总结与对比</h3><table><thead><tr><th>类型</th><th>核心特性</th><th>典型场景</th></tr></thead><tbody><tr><td><strong><code>null</code></strong></td><td>表示无值，参与运算时转为 <code>0</code>，可通过 <code>is_null()</code> 检测</td><td>未初始化变量、显式释放变量</td></tr><tr><td><strong><code>resource</code></strong></td><td>引用外部资源（如数据库、文件），需通过专用函数操作，自动垃圾回收</td><td>数据库连接、文件读写</td></tr></tbody></table><hr><h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><ol><li><strong><code>null</code> 的隐式转换</strong>：在运算中可能导致意外结果（如 <code>null + 5</code> 结果为 <code>5</code>），建议初始化变量。</li><li><strong>资源管理</strong>：依赖 PHP 自动垃圾回收机制，但显式释放资源可提升性能。</li></ol><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、<strong>算术运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>$a + $b</code></td><td>数值相加，字符串拼接</td></tr><tr><td><code>-</code></td><td>减法</td><td><code>$a - $b</code></td><td>数值相减</td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>$a * $b</code></td><td>数值相乘</td></tr><tr><td><code>/</code></td><td>除法</td><td><code>$a / $b</code></td><td>数值相除，结果为浮点数</td></tr><tr><td><code>%</code></td><td>取模（余数）</td><td><code>$a % $b</code></td><td>返回除法的余数</td></tr><tr><td><code>-</code></td><td>取反</td><td><code>-$a</code></td><td>取负数</td></tr></tbody></table><p><strong>注意</strong>：<br>• 除法结果类型：整除返回 <code>int</code>，非整除返回 <code>float</code>。<br>• 取模运算前会将操作数转为整型（如 <code>1.1 % 2</code> → <code>1</code>）。</p><hr><h3 id="二、字符串运算符"><a href="#二、字符串运算符" class="headerlink" title="二、字符串运算符"></a>二、<strong>字符串运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>连接符</td><td><code>$a . $b</code></td><td>拼接两个字符串</td></tr><tr><td><code>.=</code></td><td>字符串赋值</td><td><code>$a .= $b</code></td><td>将 <code>$b</code> 拼接到 <code>$a</code> 后</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="string">&quot; &quot;</span> . <span class="variable">$b</span>; <span class="comment">// 输出 &quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、比较运算符"><a href="#三、比较运算符" class="headerlink" title="三、比较运算符"></a>三、<strong>比较运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td><td><code>$a == $b</code></td><td>值相等（<strong>不比较类型</strong>）</td></tr><tr><td><code>===</code></td><td>全等</td><td><code>$a === $b</code></td><td>值和类型均相等</td></tr><tr><td><code>!=</code></td><td>不等于</td><td><code>$a != $b</code></td><td>值不等（<strong>不比较类型</strong>）</td></tr><tr><td><code>!==</code></td><td>不全等</td><td><code>$a !== $b</code></td><td>值或类型任一不等</td></tr><tr><td><code>&gt;</code></td><td>大于</td><td><code>$a &gt; $b</code></td><td></td></tr><tr><td><code>&lt;</code></td><td>小于</td><td><code>$a &lt; $b</code></td><td></td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td><td><code>$a &gt;= $b</code></td><td></td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td><td><code>$a &lt;= $b</code></td><td></td></tr></tbody></table><p><strong>类型转换规则</strong>：<br>• 比较数字和字符串时，字符串会被转为数值（如 <code>&quot;123abc&quot; == 123</code> → <code>true</code>）。<br>• 全等运算符 <code>===</code> 严格比较类型（如 <code>1 == &quot;1&quot;</code> → <code>true</code>，但 <code>1 === &quot;1&quot;</code> → <code>false</code>）。</p><hr><h3 id="四、逻辑运算符"><a href="#四、逻辑运算符" class="headerlink" title="四、逻辑运算符"></a>四、<strong>逻辑运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>逻辑与</td><td><code>$a &amp;&amp; $b</code></td><td>两者为 <code>true</code> 时返回 <code>true</code></td></tr><tr><td>&#96;</td><td></td><td>&#96;</td><td>逻辑或</td></tr><tr><td><code>!</code></td><td>逻辑非</td><td><code>!$a</code></td><td>取反</td></tr><tr><td><code>and</code></td><td>逻辑与（低优先级）</td><td><code>$a and $b</code></td><td>同 <code>&amp;&amp;</code>，但优先级更低</td></tr><tr><td><code>or</code></td><td>逻辑或（低优先级）</td><td><code>$a or $b</code></td><td>同 &#96;</td></tr><tr><td><code>xor</code></td><td>异或</td><td><code>$a xor $b</code></td><td>仅一个为 <code>true</code> 时返回 <code>true</code></td></tr></tbody></table><p><strong>优先级</strong>：<code>!</code> &gt; 算术运算符 &gt; <code>*</code> <code>/</code> <code>%</code> &gt; <code>+</code> <code>-</code> &gt; 比较运算符 &gt; <code>&amp;&amp;</code> &gt; <code>||</code>。</p><hr><h3 id="五、数组运算符"><a href="#五、数组运算符" class="headerlink" title="五、数组运算符"></a>五、<strong>数组运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>+</code></td><td>合并</td><td><code>$a + $b</code></td><td>合并数组，重复键保留左侧值</td></tr><tr><td><code>==</code></td><td>相等</td><td><code>$a == $b</code></td><td>数组键值对相等（不比较顺序）</td></tr><tr><td><code>===</code></td><td>全等</td><td><code>$a === $b</code></td><td>键值对、顺序、类型均相等</td></tr></tbody></table><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">4</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span> + <span class="variable">$b</span>; <span class="comment">// 结果 [&#x27;a&#x27; =&gt; 1, &#x27;b&#x27; =&gt; 2, &#x27;c&#x27; =&gt; 3]</span></span><br></pre></td></tr></table></figure><hr><h3 id="六、递增-递减运算符"><a href="#六、递增-递减运算符" class="headerlink" title="六、递增&#x2F;递减运算符"></a>六、<strong>递增&#x2F;递减运算符</strong></h3><table><thead><tr><th>运算符</th><th>名称</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td><code>++</code></td><td>前递增</td><td><code>++$a</code></td><td>先加1，再返回值</td></tr><tr><td><code>++</code></td><td>后递增</td><td><code>$a++</code></td><td>先返回值，再加1</td></tr><tr><td><code>--</code></td><td>前递减</td><td><code>--$a</code></td><td>先减1，再返回值</td></tr><tr><td><code>--</code></td><td>后递减</td><td><code>$a--</code></td><td>先返回值，再减1</td></tr></tbody></table><p><strong>注意</strong>：对布尔值、<code>null</code> 或字符串操作时，直接转为整型 <code>0</code> 后计算。</p><hr><h3 id="七、三元运算符"><a href="#七、三元运算符" class="headerlink" title="七、三元运算符"></a>七、<strong>三元运算符</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$condition</span> ? <span class="variable">$value_if_true</span> : <span class="variable">$value_if_false</span>;</span><br></pre></td></tr></table></figure><p><strong>简写形式（PHP 5.3+）</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$condition</span> ?: <span class="variable">$default</span>; <span class="comment">// 若 $condition 为真，返回 $condition，否则返回 $default</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$username</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="comment">// 简写为：$username = $_GET[&#x27;user&#x27;] ?? &#x27;guest&#x27;; （PHP 7+）</span></span><br></pre></td></tr></table></figure><hr><h3 id="八、太空船操作符（PHP-7-）"><a href="#八、太空船操作符（PHP-7-）" class="headerlink" title="八、太空船操作符（PHP 7+）"></a>八、<strong>太空船操作符（PHP 7+）</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><strong>返回值</strong>：<br>• <code>-1</code>：若 <code>$a &lt; $b</code><br>• <code>0</code>：若 <code>$a == $b</code><br>• <code>1</code>：若 <code>$a &gt; $b</code></p><p><strong>用途</strong>：简化比较逻辑（如排序）。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$array</span>, function(<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span> &lt;=&gt; <span class="variable">$b</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>优先级</th><th>运算符类型</th><th>示例</th></tr></thead><tbody><tr><td>最高</td><td>括号、函数调用、属性访问</td><td><code>($a + $b) * $c</code></td></tr><tr><td>高</td><td>一元运算符（<code>++</code>, <code>!</code>）</td><td><code>++$a + !$b</code></td></tr><tr><td>中</td><td>算术运算符（<code>*</code>, <code>/</code>）</td><td><code>$a * $b + $c</code></td></tr><tr><td>低</td><td>比较运算符（<code>==</code>, <code>&lt;</code>）</td><td><code>$a == $b &amp;&amp; $c &lt; $d</code></td></tr><tr><td>最低</td><td>逻辑运算符（<code>&amp;&amp;</code>, &#96;</td><td></td></tr></tbody></table><hr><h1 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h1><h4 id="一、类型比较的两种模式"><a href="#一、类型比较的两种模式" class="headerlink" title="一、类型比较的两种模式"></a>一、<strong>类型比较的两种模式</strong></h4><table><thead><tr><th>比较类型</th><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><strong>松散比较</strong></td><td><code>==</code></td><td>只比较值，不比较类型（会触发隐式类型转换）</td></tr><tr><td><strong>严格比较</strong></td><td><code>===</code></td><td>比较值和类型，两者均需相等才返回 <code>true</code></td></tr></tbody></table><hr><h4 id="二、松散比较（-）"><a href="#二、松散比较（-）" class="headerlink" title="二、松散比较（==）"></a>二、<strong>松散比较（<code>==</code>）</strong></h4><p>PHP 在松散比较时会自动转换类型，以下为常见转换逻辑：</p><ol><li><p><strong>布尔类型与其他类型比较</strong>：<br>• <code>false</code> 会被转换为 <code>0</code>，<code>true</code> 转换为 <code>1</code>。<br>• 其他类型转为布尔值时：<code>0</code>、<code>null</code>、空字符串 <code>&quot;&quot;</code>、空数组 <code>[]</code> 转换为 <code>false</code>，其余为 <code>true</code>。</p></li><li><p><strong>字符串与数比较</strong>：<br>• 字符串会被解析为数值进行比较（如 <code>&quot;42&quot; == 42</code> → <code>true</code>，但 <code>&quot;hello&quot; == 0</code> → <code>true</code>）。</p></li><li><p><strong><code>null</code> 的特殊处理</strong>：<br>• <code>null</code> 仅与 <code>null</code> 或未定义变量相等（<code>null == null</code> → <code>true</code>）。<br>• 与其他类型比较时，<code>null</code> 转为 <code>false</code>（如 <code>null == false</code> → <code>true</code>）。</p></li><li><p><strong>数组与标量比较</strong>：<br>• 数组与标量（如整数、字符串）比较时，直接返回 <code>false</code>。<br>• 空数组 <code>[]</code> 与 <code>false</code> 相等（<code>[] == false</code> → <code>true</code>）。</p></li></ol><hr><h4 id="三、严格比较（-）"><a href="#三、严格比较（-）" class="headerlink" title="三、严格比较（===）"></a>三、<strong>严格比较（<code>===</code>）</strong></h4><p>• <strong>值和类型必须完全一致</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="number">42</span> === <span class="string">&quot;42&quot;</span>); <span class="comment">// false（类型不同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">true</span> === <span class="number">1</span>);  <span class="comment">// false（类型不同）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="literal">null</span> === []); <span class="comment">// false（类型不同）</span></span><br></pre></td></tr></table></figure><p>• <strong>数组比较</strong>：<br>  • 结构和键值对均相同才返回 <code>true</code>（顺序敏感）：<br>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>];</span><br><span class="line"><span class="variable">$b</span> = [<span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> === <span class="variable">$b</span>); <span class="comment">// false（顺序不同）</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="四、常见类型比较陷阱"><a href="#四、常见类型比较陷阱" class="headerlink" title="四、常见类型比较陷阱"></a>四、<strong>常见类型比较陷阱</strong></h4><table><thead><tr><th>示例</th><th>松散比较结果</th><th>严格比较结果</th><th>原因</th></tr></thead><tbody><tr><td><code>&quot;&quot; == false</code></td><td><code>true</code></td><td><code>false</code></td><td>空字符串转为 <code>false</code></td></tr><tr><td><code>&quot;0&quot; == false</code></td><td><code>true</code></td><td><code>false</code></td><td>字符串 <code>&quot;0&quot;</code> 转为 <code>0</code></td></tr><tr><td><code>&quot;hello&quot; == 0</code></td><td><code>true</code></td><td><code>false</code></td><td>非数字字符串转为 <code>0</code></td></tr><tr><td><code>[] == false</code></td><td><code>true</code></td><td><code>false</code></td><td>空数组转为 <code>false</code></td></tr><tr><td><code>null == []</code></td><td><code>true</code></td><td><code>false</code></td><td><code>null</code> 和空数组均转为 <code>false</code></td></tr><tr><td><code>&quot;123abc&quot; == 123</code></td><td><code>true</code></td><td><code>false</code></td><td>字符串解析为数值 <code>123</code></td></tr></tbody></table><hr><h4 id="五、类型比较实战技巧"><a href="#五、类型比较实战技巧" class="headerlink" title="五、类型比较实战技巧"></a>五、<strong>类型比较实战技巧</strong></h4><ol><li><p><strong>优先使用严格比较</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$userInput</span> === <span class="number">123</span>) &#123; <span class="comment">/* 避免字符串 &quot;123&quot; 被误判 */</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>显式类型转换</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable">$num</span> = (<span class="keyword">int</span>)<span class="variable">$str</span>; <span class="comment">// 显式转为整数</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num</span> === <span class="number">123</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>安全处理 <code>null</code> 和空值</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$var</span> !== <span class="literal">null</span> &amp;&amp; <span class="variable">$var</span> !== <span class="string">&quot;&quot;</span>) &#123; <span class="comment">/* 确保值非空且类型正确 */</span> &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h4 id="一、流程控制的三大结构"><a href="#一、流程控制的三大结构" class="headerlink" title="一、流程控制的三大结构"></a>一、<strong>流程控制的三大结构</strong></h4><ol><li><p><strong>顺序结构</strong><br>• 代码从上到下依次执行，无分支或跳转。<br>• 示例：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Step 1&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Step 2&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>选择结构</strong><br>• 根据条件判断决定执行哪段代码。<br>• <strong>常用语句</strong>：<code>if</code>、<code>if-else</code>、<code>switch-case</code>。</p></li><li><p><strong>循环结构</strong><br>• 重复执行某段代码，直到满足退出条件。<br>• <strong>常用语句</strong>：<code>while</code>、<code>do-while</code>、<code>for</code>、<code>foreach</code>。</p></li></ol><hr><h4 id="二、选择结构详解"><a href="#二、选择结构详解" class="headerlink" title="二、选择结构详解"></a>二、<strong>选择结构详解</strong></h4><ol><li><p><strong><code>if</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$age</span> &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;成年了&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>if-else</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时执行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 条件为假时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$score</span> = <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$score</span> &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;及格&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;不及格&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>switch-case</code> 语句</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        <span class="comment">// 匹配值1时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">// 匹配值2时执行</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 无匹配时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$grade</span> = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$grade</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;优秀&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;良好&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;需努力&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>注意</strong>：<code>break</code> 用于跳出 <code>switch</code>，否则会继续执行后续 <code>case</code>（<strong>case穿透</strong>）。</p></li></ol><hr><h4 id="三、循环结构详解"><a href="#三、循环结构详解" class="headerlink" title="三、循环结构详解"></a>三、<strong>循环结构详解</strong></h4><ol><li><p><strong><code>while</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">    <span class="comment">// 条件为真时重复执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>风险</strong>：若条件始终为真，会导致<strong>死循环</strong>。</p></li><li><p><strong><code>do-while</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 先执行一次，再判断条件</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 至少输出一次</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="variable">$i</span> &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong><code>for</code> 循环</strong><br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化; 条件; 增量) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>foreach</code> 循环</strong><br>• 专用于遍历数组或对象。<br>• 语法：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历数组元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;banana&quot;</span>];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span>: <span class="subst">$value</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、循环控制关键字"><a href="#四、循环控制关键字" class="headerlink" title="四、循环控制关键字"></a>四、<strong>循环控制关键字</strong></h4><ol><li><p><strong><code>break</code></strong><br>• <strong>作用</strong>：立即终止当前循环。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 当 $i=5 时退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong><code>continue</code></strong><br>• <strong>作用</strong>：跳过当前循环的剩余代码，进入下一次循环。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$i</span> == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳过 $i=5 的输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>; <span class="comment">// 输出 0,1,2,3,4,6,7,8,9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="五、流程控制综合示例"><a href="#五、流程控制综合示例" class="headerlink" title="五、流程控制综合示例"></a>五、<strong>流程控制综合示例</strong></h4><ol><li><p><strong>猜数字游戏</strong>（结合 <code>if-else</code> 和循环）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$secretNumber</span> = <span class="number">7</span>;</span><br><span class="line"><span class="variable">$guess</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$guess</span> != <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;请输入猜测的数字：&quot;</span>;</span><br><span class="line">    <span class="variable">$guess</span> = (<span class="keyword">int</span>)<span class="title function_ invoke__">readline</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$guess</span> &lt; <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;太小了！</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$guess</span> &gt; <span class="variable">$secretNumber</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;太大了！</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;恭喜猜对了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>数组去重</strong>（结合 <code>foreach</code> 和条件判断）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable">$uniqueArray</span> = [];</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$value</span>, <span class="variable">$uniqueArray</span>)) &#123;</span><br><span class="line">        <span class="variable">$uniqueArray</span>[] = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$uniqueArray</span>); <span class="comment">// 输出 [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="六、关键总结"><a href="#六、关键总结" class="headerlink" title="六、关键总结"></a>六、<strong>关键总结</strong></h4><table><thead><tr><th>结构类型</th><th>关键字&#x2F;语法</th><th>核心用途</th><th>注意事项</th></tr></thead><tbody><tr><td><strong>顺序结构</strong></td><td>无</td><td>按顺序执行代码</td><td>无额外逻辑</td></tr><tr><td><strong>选择结构</strong></td><td><code>if</code>, <code>switch</code></td><td>根据条件选择执行路径</td><td>避免嵌套过多，使用 <code>else if</code> 优化可读性</td></tr><tr><td><strong>循环结构</strong></td><td><code>while</code>, <code>for</code>, <code>foreach</code></td><td>重复执行代码块</td><td>防止死循环，合理使用 <code>break</code> 和 <code>continue</code></td></tr></tbody></table><h1 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h1><h4 id="一、超全局变量的定义"><a href="#一、超全局变量的定义" class="headerlink" title="一、超全局变量的定义"></a>一、<strong>超全局变量的定义</strong></h4><p>• <strong>概念</strong>：超全局变量是 PHP 内置的全局变量，在脚本的任何作用域（函数、类、方法）中均可直接访问，无需通过 <code>global</code> 关键字声明。<br>• <strong>特点</strong>：<br>  • 全局可见性：所有函数、类、方法均可直接使用。<br>  • 预定义：PHP 已内置多个超全局变量，用于处理请求、服务器信息、环境变量等。</p><hr><h4 id="二、常用超全局变量及用途"><a href="#二、常用超全局变量及用途" class="headerlink" title="二、常用超全局变量及用途"></a>二、<strong>常用超全局变量及用途</strong></h4><h5 id="1-GLOBALS"><a href="#1-GLOBALS" class="headerlink" title="1. $GLOBALS"></a>1. <strong><code>$GLOBALS</code></strong></h5><p>• <strong>作用</strong>：存储所有全局变量的关联数组，键为变量名，值为变量值。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$y</span> = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$GLOBALS</span>[<span class="string">&#x27;z&#x27;</span>] = <span class="variable">$GLOBALS</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$GLOBALS</span>[<span class="string">&#x27;y&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">sum</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$z</span>; <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure><h5 id="2-POST"><a href="#2-POST" class="headerlink" title="2. $_POST"></a>2. <strong><code>$_POST</code></strong></h5><p>• <strong>作用</strong>：收集通过 <strong>POST 方法</strong>提交的表单数据。<br>• <strong>特点</strong>：<br>  • 数据不显示在 URL 中，安全性较高。<br>  • 适用于传输敏感信息（如密码）。<br>• <strong>示例</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单提交方式为 POST --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;process.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// process.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]; <span class="comment">// 获取表单提交的用户名</span></span><br></pre></td></tr></table></figure><h5 id="3-GET"><a href="#3-GET" class="headerlink" title="3. $_GET"></a>3. <strong><code>$_GET</code></strong></h5><p>• <strong>作用</strong>：收集通过 <strong>GET 方法</strong>提交的表单数据。<br>• <strong>特点</strong>：<br>  • 数据附加在 URL 后（如 <code>?name=value</code>），可见且不安全。<br>  • 适用于非敏感数据（如搜索关键词）。<br>• <strong>示例</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单提交方式为 GET --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;search.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;keyword&#x27;</span>]; <span class="comment">// 获取 URL 中的关键词</span></span><br></pre></td></tr></table></figure><h5 id="4-REQUEST"><a href="#4-REQUEST" class="headerlink" title="4. $_REQUEST"></a>4. <strong><code>$_REQUEST</code></strong></h5><p>• <strong>作用</strong>：合并 <code>$_POST</code> 和 <code>$_GET</code> 的数据，兼容两种提交方式。<br>• <strong>注意</strong>：因安全性问题，建议优先使用 <code>$_POST</code> 或 <code>$_GET</code>。</p><h5 id="5-SERVER"><a href="#5-SERVER" class="headerlink" title="5. $_SERVER"></a>5. <strong><code>$_SERVER</code></strong></h5><p>• <strong>作用</strong>：存储服务器和请求的环境信息，如请求方法、路径、客户端 IP 等。<br>• <strong>常用键</strong>：<br>  • <code>$_SERVER[&#39;REQUEST_METHOD&#39;]</code>：请求方法（GET&#x2F;POST）。<br>  • <code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>：客户端 IP 地址。<br>  • <code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code>：当前脚本路径。</p><h5 id="6-COOKIE"><a href="#6-COOKIE" class="headerlink" title="6. $_COOKIE"></a>6. <strong><code>$_COOKIE</code></strong></h5><p>• <strong>作用</strong>：存储通过 Cookie 传递的数据。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 Cookie</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="title function_ invoke__">time</span>() + <span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 Cookie</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]; <span class="comment">// 输出 &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure><h5 id="7-SESSION"><a href="#7-SESSION" class="headerlink" title="7. $_SESSION"></a>7. <strong><code>$_SESSION</code></strong></h5><p>• <strong>作用</strong>：存储会话数据，跨页面共享。<br>• <strong>示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>] = <span class="number">123</span>; <span class="comment">// 存储会话数据</span></span><br></pre></td></tr></table></figure>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他页面</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>]; <span class="comment">// 输出 123</span></span><br></pre></td></tr></table></figure><h5 id="8-ENV"><a href="#8-ENV" class="headerlink" title="8. $_ENV"></a>8. <strong><code>$_ENV</code></strong></h5><p>• <strong>作用</strong>：存储通过环境变量传递的数据（如服务器配置）。</p><hr><h4 id="三、超全局变量的使用场景"><a href="#三、超全局变量的使用场景" class="headerlink" title="三、超全局变量的使用场景"></a>三、<strong>超全局变量的使用场景</strong></h4><table><thead><tr><th>场景</th><th>推荐使用的超全局变量</th><th>原因</th></tr></thead><tbody><tr><td>处理表单提交</td><td><code>$_POST</code> &#x2F; <code>$_GET</code></td><td>安全性高（POST）或简单传递（GET）</td></tr><tr><td>获取客户端信息</td><td><code>$_SERVER</code></td><td>如 IP 地址、请求方法</td></tr><tr><td>跨页面数据共享</td><td><code>$_SESSION</code></td><td>数据持久化，安全性高</td></tr><tr><td>临时存储用户偏好</td><td><code>$_COOKIE</code></td><td>数据持久化，但安全性较低</td></tr></tbody></table><hr><h4 id="四、注意事项-1"><a href="#四、注意事项-1" class="headerlink" title="四、注意事项"></a>四、<strong>注意事项</strong></h4><ol><li><strong>安全性</strong>：<br>• 避免直接输出 <code>$_GET</code> 或 <code>$_POST</code> 数据（可能含恶意代码），需过滤和验证。<br>• 使用 <code>htmlspecialchars()</code> 或 <code>filter_input()</code> 处理用户输入。</li><li><strong>表单提交优先级</strong>：<br>• 表单默认提交方式为 <code>GET</code>，需显式设置 <code>method=&quot;post&quot;</code>。</li><li><strong>Cookie 与 Session</strong>：<br>• 使用 <code>session_start()</code> 开启会话。<br>• Cookie 需设置过期时间，否则浏览器关闭后失效。</li></ol><hr><h4 id="五、实战示例：表单处理"><a href="#五、实战示例：表单处理" class="headerlink" title="五、实战示例：表单处理"></a>五、<strong>实战示例：表单处理</strong></h4><ol><li><p><strong>HTML 表单（<code>index.html</code>）</strong>：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;process.php&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>PHP 处理脚本（<code>process.php</code>）</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;欢迎, &quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$username</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="PHP-表单校验"><a href="#PHP-表单校验" class="headerlink" title="PHP 表单校验"></a>PHP 表单校验</h1><h4 id="一、表单校验的核心目标"><a href="#一、表单校验的核心目标" class="headerlink" title="一、表单校验的核心目标"></a>一、<strong>表单校验的核心目标</strong></h4><ol><li><strong>数据合法性</strong>：确保用户输入符合业务规则（如邮箱格式、密码强度）。</li><li><strong>安全性</strong>：防止恶意数据提交（如 SQL 注入、XSS 攻击）。</li><li><strong>用户体验</strong>：通过前端校验减少无效请求，后端校验保障数据安全。</li></ol><hr><h4 id="二、前后端校验分工"><a href="#二、前后端校验分工" class="headerlink" title="二、前后端校验分工"></a>二、<strong>前后端校验分工</strong></h4><table><thead><tr><th>场景</th><th>前端校验（JS）</th><th>后端校验（PHP）</th></tr></thead><tbody><tr><td><strong>目的</strong></td><td>提升用户体验，即时反馈</td><td>保障数据安全，防止非法数据入库</td></tr><tr><td><strong>典型场景</strong></td><td>输入框实时校验（如密码强度）</td><td>表单提交后的完整性、合法性校验</td></tr><tr><td><strong>局限性</strong></td><td>可绕过（用户禁用 JS）</td><td>必须执行，无法绕过</td></tr></tbody></table><hr><h4 id="三、后端校验实现步骤"><a href="#三、后端校验实现步骤" class="headerlink" title="三、后端校验实现步骤"></a>三、<strong>后端校验实现步骤</strong></h4><h5 id="1-获取表单数据"><a href="#1-获取表单数据" class="headerlink" title="1. 获取表单数据"></a>1. <strong>获取表单数据</strong></h5><p>• 使用超全局变量 <code>$_POST</code> 接收表单提交的数据：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$mobile</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="2-校验逻辑"><a href="#2-校验逻辑" class="headerlink" title="2. 校验逻辑"></a>2. <strong>校验逻辑</strong></h5><p>• <strong>必填项检查</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$email</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱为必填项&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$mobile</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;手机号为必填项&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>邮箱格式校验（正则表达式）</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\.[a-zA-Z]&#123;2,&#125;$/&quot;</span>, <span class="variable">$email</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱格式不合法&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>手机号格式校验</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^1[3-9]\d&#123;9&#125;$/&quot;</span>, <span class="variable">$mobile</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;手机号格式不合法&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>密码复杂度校验</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\w&#123;6,&#125;$/&quot;</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">    <span class="variable">$errors</span>[] = <span class="string">&quot;密码需6位及以上（字母/数字/下划线）&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-错误处理与反馈"><a href="#3-错误处理与反馈" class="headerlink" title="3. 错误处理与反馈"></a>3. <strong>错误处理与反馈</strong></h5><p>• <strong>收集错误信息</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$errors</span> = [];</span><br><span class="line"><span class="comment">// 校验逻辑...</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$errors</span>)) &#123;</span><br><span class="line">    <span class="comment">// 返回错误到前端</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>, <span class="string">&quot;errors&quot;</span> =&gt; <span class="variable">$errors</span>]);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>前端展示错误</strong>：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AJAX 提交表单后处理响应</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;index.php&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">        data.<span class="property">errors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">alert</span>(error));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="四、关键代码解析"><a href="#四、关键代码解析" class="headerlink" title="四、关键代码解析"></a>四、<strong>关键代码解析</strong></h4><h5 id="1-表单提交处理"><a href="#1-表单提交处理" class="headerlink" title="1. 表单提交处理"></a>1. <strong>表单提交处理</strong></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$email</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]);</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>]);</span><br><span class="line">    <span class="variable">$password</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$errors</span> = [];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必填项校验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$email</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱必填&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$mobile</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;手机必填&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$password</span>)) <span class="variable">$errors</span>[] = <span class="string">&quot;密码必填&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 格式校验</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-zA-Z0-9_]+@[a-zA-Z0-9_]+\.[a-zA-Z]&#123;2,&#125;$/&quot;</span>, <span class="variable">$email</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;邮箱格式错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^1[3-9]\d&#123;9&#125;$/&quot;</span>, <span class="variable">$mobile</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;手机号格式错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\w&#123;6,&#125;$/&quot;</span>, <span class="variable">$password</span>)) &#123;</span><br><span class="line">        <span class="variable">$errors</span>[] = <span class="string">&quot;密码需6位以上&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$errors</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>, <span class="string">&quot;errors&quot;</span> =&gt; <span class="variable">$errors</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>([<span class="string">&quot;status&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-前端表单"><a href="#2-前端表单" class="headerlink" title="2. 前端表单"></a>2. <strong>前端表单</strong></h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;signupForm&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;signupForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;index.php&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span></span><br><span class="line"><span class="language-javascript">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (data.<span class="property">status</span> === <span class="string">&quot;error&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            data.<span class="property">errors</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="title function_">alert</span>(error));</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;注册成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="五、安全与性能优化"><a href="#五、安全与性能优化" class="headerlink" title="五、安全与性能优化"></a>五、<strong>安全与性能优化</strong></h4><ol><li><p><strong>防 XSS 攻击</strong>：输出用户输入时使用 <code>htmlspecialchars()</code>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$userInput</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>防 SQL 注入</strong>：使用预处理语句（后续课程内容）。</p></li><li><p><strong>减少服务器压力</strong>：前端校验减少无效请求。</p></li></ol><hr><h4 id="六、错误与调试"><a href="#六、错误与调试" class="headerlink" title="六、错误与调试"></a>六、<strong>错误与调试</strong></h4><table><thead><tr><th>错误场景</th><th>解决方案</th></tr></thead><tbody><tr><td>表单数据未提交</td><td>检查表单的 <code>method</code> 是否为 <code>post</code></td></tr><tr><td>正则表达式不匹配</td><td>使用在线工具（如 regex101.com）调试</td></tr><tr><td>错误信息未显示</td><td>确保 <code>json_encode</code> 正确输出 JSON</td></tr></tbody></table><hr><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h4 id="一、PHP-与-MySQL-的定位"><a href="#一、PHP-与-MySQL-的定位" class="headerlink" title="一、PHP 与 MySQL 的定位"></a>一、<strong>PHP 与 MySQL 的定位</strong></h4><table><thead><tr><th>技术</th><th>定位</th><th>核心作用</th></tr></thead><tbody><tr><td><strong>PHP</strong></td><td>服务器端脚本语言</td><td>处理业务逻辑、生成动态内容、操作数据库、管理会话等。</td></tr><tr><td><strong>MySQL</strong></td><td>关系型数据库管理系统（RDBMS）</td><td>存储结构化数据（如用户信息、商品数据），提供高效的数据查询和管理能力。</td></tr></tbody></table><hr><h4 id="二、关系型数据库的核心概念"><a href="#二、关系型数据库的核心概念" class="headerlink" title="二、关系型数据库的核心概念"></a>二、<strong>关系型数据库的核心概念</strong></h4><ol><li><p><strong>表（Table）</strong><br>• 数据存储的基本单元，由**行（记录）<strong>和</strong>列（字段）**组成。<br>• <strong>示例</strong>：用户表 <code>user_center</code> 包含 <code>id</code>、<code>name</code>、<code>password</code> 等字段。</p></li><li><p><strong>主键（Primary Key）</strong><br>• 唯一标识一条记录的字段（如 <code>id</code>），确保数据唯一性。</p></li><li><p><strong>数据类型</strong><br>• 常见类型：<code>INT</code>（整数）、<code>VARCHAR</code>（字符串）、<code>DATE</code>（日期）等。<br>• <strong>示例</strong>：<code>id INT(11) AUTO_INCREMENT PRIMARY KEY</code>。</p></li><li><p><strong>SQL 语句</strong><br>• <strong>增删查改</strong>：<br>  ◦ <strong>插入数据</strong>：<code>INSERT INTO user_center (name, password) VALUES (&#39;meng&#39;, &#39;123456&#39;);</code><br>  ◦ <strong>查询数据</strong>：<code>SELECT * FROM user_center WHERE name = &#39;meng&#39;;</code><br>  ◦ <strong>更新数据</strong>：<code>UPDATE user_center SET password = &#39;654321&#39; WHERE id = 1;</code><br>  ◦ <strong>删除数据</strong>：<code>DELETE FROM user_center WHERE id = 1;</code></p></li></ol><hr><h4 id="三、PHP-操作-MySQL-的核心步骤"><a href="#三、PHP-操作-MySQL-的核心步骤" class="headerlink" title="三、PHP 操作 MySQL 的核心步骤"></a>三、<strong>PHP 操作 MySQL 的核心步骤</strong></h4><ol><li><p><strong>连接数据库</strong><br>使用 <code>mysqli</code> 扩展建立连接：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>执行 SQL 语句</strong><br>• <strong>查询示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ID: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;id&quot;</span>] . <span class="string">&quot; - Name: &quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>插入示例</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user_center (name, password) VALUES (&#x27;lee&#x27;, &#x27;123456&#x27;)&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;新记录插入成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;&lt;br&gt;&quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭连接</strong>  </p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、PHPMyAdmin-的核心功能"><a href="#四、PHPMyAdmin-的核心功能" class="headerlink" title="四、PHPMyAdmin 的核心功能"></a>四、<strong>PHPMyAdmin 的核心功能</strong></h4><ol><li><p><strong>图形化管理工具</strong><br>• 支持数据库的创建、表结构设计、数据增删改查。<br>• <strong>常用操作</strong>：<br>  ◦ 创建数据库：<code>CREATE DATABASE ma_soldier;</code><br>  ◦ 新建表：定义字段名、类型、约束（如自增长 <code>AUTO_INCREMENT</code>）。<br>  ◦ 导入&#x2F;导出数据：支持 SQL 文件或 CSV 格式。</p></li><li><p><strong>SQL 执行界面</strong><br>• 直接编写并执行 SQL 语句，实时查看结果。</p></li></ol><hr><h4 id="五、安全性注意事项"><a href="#五、安全性注意事项" class="headerlink" title="五、安全性注意事项"></a>五、<strong>安全性注意事项</strong></h4><ol><li><p><strong>防 SQL 注入</strong><br>• 使用预处理语句（Prepared Statements）：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO user_center (name, password) VALUES (?, ?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;ss&quot;</span>, <span class="variable">$name</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>敏感数据保护</strong><br>• 密码加密存储：使用 <code>password_hash()</code> 函数。<br>• 避免明文存储密码：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT);</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="六、实战场景示例"><a href="#六、实战场景示例" class="headerlink" title="六、实战场景示例"></a>六、<strong>实战场景示例</strong></h4><p><strong>用户注册功能流程</strong>：</p><ol><li>用户提交表单（HTML）。</li><li>PHP 接收表单数据，校验合法性（如邮箱格式、密码长度）。</li><li>通过 <code>mysqli</code> 连接 MySQL，将数据插入 <code>user_center</code> 表。</li><li>返回注册成功&#x2F;失败提示。</li></ol><p><strong>代码片段</strong>：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验输入</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;用户名和密码不能为空&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], PASSWORD_DEFAULT);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO user_center (name, password) VALUES (&#x27;<span class="subst">$name</span>&#x27;, &#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;错误: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><hr><h4 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、<strong>总结</strong></h4><table><thead><tr><th>关键点</th><th>说明</th></tr></thead><tbody><tr><td><strong>PHP 角色</strong></td><td>处理业务逻辑，通过 SQL 语句操作 MySQL 数据库。</td></tr><tr><td><strong>MySQL 角色</strong></td><td>存储结构化数据，提供高效查询和管理能力。</td></tr><tr><td><strong>核心协作</strong></td><td>PHP 通过 <code>mysqli</code> 或 PDO 扩展与 MySQL 交互，实现动态 Web 应用。</td></tr><tr><td><strong>学习路径</strong></td><td>掌握 SQL 语法 → 学习 PHP 数据库操作 → 实战项目（如用户系统、商品管理）。</td></tr></tbody></table><hr><h1 id="PHP-MySQL"><a href="#PHP-MySQL" class="headerlink" title="PHP+MySQL"></a>PHP+MySQL</h1><h4 id="一、功能概述"><a href="#一、功能概述" class="headerlink" title="一、功能概述"></a>一、<strong>功能概述</strong></h4><p>• <strong>目标</strong>：实现用户注册、登录功能，结合前端交互与后端数据库操作。<br>• <strong>技术栈</strong>：<br>  • <strong>前端</strong>：HTML表单 + JavaScript校验（使用ydata插件）。<br>  • <strong>后端</strong>：PHP处理业务逻辑，MySQL存储用户数据。<br>  • <strong>数据库</strong>：<code>user_center</code>表（字段：<code>id</code>, <code>name</code>, <code>password</code>, <code>mobile</code>）。</p><hr><h4 id="二、核心实现步骤"><a href="#二、核心实现步骤" class="headerlink" title="二、核心实现步骤"></a>二、<strong>核心实现步骤</strong></h4><h5 id="1-数据库设计"><a href="#1-数据库设计" class="headerlink" title="1. 数据库设计"></a>1. <strong>数据库设计</strong></h5><p>• <strong>表结构</strong>：</p>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> user_center (</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">11</span>) AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    mobile <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>• <strong>关键字段</strong>：<br>  • <code>id</code>：自增长主键。<br>  • <code>mobile</code>：唯一约束，防止重复注册。</p><h5 id="2-前端表单与校验"><a href="#2-前端表单与校验" class="headerlink" title="2. 前端表单与校验"></a>2. <strong>前端表单与校验</strong></h5><p>• <strong>注册表单</strong>：</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mobile&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;手机号&quot;</span> <span class="attr">data-v-mobile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">data-v-password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;确认密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>• <strong>校验规则</strong>（通过ydata插件配置）：<br>  • 密码长度≥8，包含字母&#x2F;数字&#x2F;下划线。<br>  • 手机号格式校验（正则表达式）。</p><h5 id="3-后端处理逻辑（PHP）"><a href="#3-后端处理逻辑（PHP）" class="headerlink" title="3. 后端处理逻辑（PHP）"></a>3. <strong>后端处理逻辑（PHP）</strong></h5><p>• <strong>连接数据库</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;ma_soldier&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>注册功能</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;register&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$mobile</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mobile&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], PASSWORD_DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户名或手机号是否已存在</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27; OR mobile=&#x27;<span class="subst">$mobile</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名或手机号已被注册&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 插入新用户</span></span><br><span class="line">        <span class="variable">$insertSql</span> = <span class="string">&quot;INSERT INTO user_center (name, password, mobile) VALUES (&#x27;<span class="subst">$name</span>&#x27;, &#x27;<span class="subst">$password</span>&#x27;, &#x27;<span class="subst">$mobile</span>&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$insertSql</span>) === <span class="literal">TRUE</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;错误: &quot;</span> . <span class="variable">$conn</span>-&gt;error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>• <strong>登录功能</strong>：</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="comment">// 验证密码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>, <span class="variable">$user</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;欢迎, &quot;</span> . <span class="variable">$user</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户不存在&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-前端交互与反馈"><a href="#4-前端交互与反馈" class="headerlink" title="4. 前端交互与反馈"></a>4. <strong>前端交互与反馈</strong></h5><p>• <strong>AJAX提交</strong>（示例）：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;registerForm&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;register.php&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">alert</span>(data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="三、关键问题与解决方案"><a href="#三、关键问题与解决方案" class="headerlink" title="三、关键问题与解决方案"></a>三、<strong>关键问题与解决方案</strong></h4><ol><li><p><strong>防止SQL注入</strong>：<br>• <strong>解决方案</strong>：使用预处理语句（Prepared Statements）。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&quot;INSERT INTO user_center (name, password, mobile) VALUES (?, ?, ?)&quot;</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bind_param</span>(<span class="string">&quot;sss&quot;</span>, <span class="variable">$name</span>, <span class="variable">$password</span>, <span class="variable">$mobile</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>密码安全</strong>：<br>• <strong>解决方案</strong>：使用 <code>password_hash()</code> 加密存储，<code>password_verify()</code> 验证。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册时加密</span></span><br><span class="line"><span class="variable">$hashed_password</span> = <span class="title function_ invoke__">password_hash</span>(<span class="variable">$password</span>, PASSWORD_DEFAULT);</span><br><span class="line"><span class="comment">// 登录时验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">password_verify</span>(<span class="variable">$input_password</span>, <span class="variable">$db_password</span>)) &#123; ... &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>重复注册校验</strong>：<br>• <strong>逻辑修正</strong>：查询时检查用户名或手机号是否存在。</p>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user_center WHERE name=&#x27;<span class="subst">$name</span>&#x27; OR mobile=&#x27;<span class="subst">$mobile</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="四、扩展与优化方向"><a href="#四、扩展与优化方向" class="headerlink" title="四、扩展与优化方向"></a>四、<strong>扩展与优化方向</strong></h4><ol><li><p><strong>前后端分离</strong>：<br>• 前端通过AJAX与后端API交互，后端返回JSON数据。<br>• 示例响应格式：</p>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;注册成功&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>功能增强</strong>：<br>• <strong>找回密码</strong>：通过邮箱或手机验证码重置密码。<br>• <strong>用户角色</strong>：区分普通用户与管理员权限。</p></li><li><p><strong>部署与性能</strong>：<br>• 使用缓存（如Redis）减轻数据库压力。<br>• 配置HTTPS保障数据传输安全。</p></li></ol><hr><h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、<strong>总结</strong></h4><p> <strong>核心流程</strong>：</p><pre><code>1. 用户填写表单 → 前端校验 → 提交到后端。2. 后端连接数据库 → 校验数据合法性 → 执行增删查改。3. 返回结果至前端，提示用户操作状态。</code></pre><p><strong>关键技术</strong>：</p><ul><li>PHP与MySQL交互（<code>mysqli</code>扩展）。</li><li>密码加密与验证。</li><li>前端数据校验与异步请求。</li></ul><p>通过本课程，您已掌握用户认证系统的核心实现，下一阶段可挑战电商、社交等复杂业务场景！</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BurtSuite的应用</title>
      <link href="/2025/05/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/05/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="BurpSuite渗透测试"><a href="#BurpSuite渗透测试" class="headerlink" title="BurpSuite渗透测试"></a>BurpSuite渗透测试</h1><h2 id="bp的Proxy模块"><a href="#bp的Proxy模块" class="headerlink" title="bp的Proxy模块"></a>bp的Proxy模块</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>拦截</li><li>突破IP限制，隐藏IP，加速访问</li></ul><h3 id="代理设置方法"><a href="#代理设置方法" class="headerlink" title="代理设置方法"></a>代理设置方法</h3><ul><li>操作系统级别代理，设置IP和端口</li><li>浏览器</li><li>插件Proxy Switch</li></ul><h3 id="详细板块"><a href="#详细板块" class="headerlink" title="详细板块"></a>详细板块</h3><ul><li><p>拦截Intercept</p><ul><li>Forward：放行，放回浏览器</li><li>Drop：显示错误</li><li>Message actions：扫描，发送包到板块，修改内容，复制URL，做规则处理，拦截响应</li><li>Open browser：打开bp内置浏览器</li></ul></li><li><p>History：历史处理</p></li><li><p>march and replace：对请求和响应做一些规则的替换</p></li><li><p>proxy setting：拦截规则，响应内容修改，TLS穿透（不经过bp）</p></li></ul><h3 id="bp拦截HTTPS"><a href="#bp拦截HTTPS" class="headerlink" title="bp拦截HTTPS"></a>bp拦截HTTPS</h3><h4 id="HTTPS原理"><a href="#HTTPS原理" class="headerlink" title="HTTPS原理"></a>HTTPS原理</h4><ul><li>（1）浏览器和服务器建立https链接，浏览器将加密规则发送给服务器。 </li><li>（2）服务器从中选出一组加密算法与HASH算法，并将自己的身份信息以证书（地址，公钥）的形式发回给浏览器。</li><li>（3）浏览器得到服务器证书之后，浏览器进行以下处理： <ul><li>验证证书的合法性（颁发证书的机构是否合法，证书中包含的服务器地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。 </li><li>如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。 </li><li>使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给服务器。</li></ul></li><li>（4）服务器接收浏览器发来的数据之后要做以下的操作： a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。 b) 使用密码加密一段握手消息，发送给浏览器。 </li><li>（5）浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</li></ul><p><strong>服务器和浏览器各进行一次加解密</strong></p><h4 id="bp拦截HTTPS原理"><a href="#bp拦截HTTPS原理" class="headerlink" title="bp拦截HTTPS原理"></a>bp拦截HTTPS原理</h4><p>bp当作中间人</p><ul><li><p>bp截取客户端发送给服务器的请求，然后伪装成客户端与服务器进行通信；</p></li><li><p>bp就获取了服务器的发送给客服端的公钥，然后在bp上生成公私钥，再把bp生成的公钥发送给客户端。</p></li><li><p>客户端发送的对称加密密钥，也是发送给bp的，客户端就与bp建立了https连接。而bp则代替了客户端与服务器建立了https连接。</p></li><li><p>完成这一流程之后，客户端发送给服务器的内容，在bp上解密得到明文，在bp上看到的内容就是明文。而向服务器发送请求的时候，bp会用服务器协商好的密钥进行加密然后传输内容。</p></li><li><p>同样服务器返回的内容也是，bp会先解密，然后得到明文，bp 会伪装成服务器，再用bp与客户端协商好的密钥进行加密然后传输内容。</p></li><li><p>通过这样的手段，便可以获取客户端和服务器之间通信的所有内容。 使用中间人攻击手段，必须要让客户端信任中间人的证书，如果客户端不信任，则这种攻击手段也无法发挥作用。</p></li></ul><p><strong>bp拦截https，进行4次加解密</strong></p><h2 id="bp的Target模块"><a href="#bp的Target模块" class="headerlink" title="bp的Target模块"></a>bp的Target模块</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ul><li>把握网站整体情况</li><li>对一次工作的域进行分析</li><li>分析网站存在的的攻击面</li></ul><h3 id="设置作用域"><a href="#设置作用域" class="headerlink" title="设置作用域"></a>设置作用域</h3><ul><li><p>同一个域：协议，域名，端口，必须一致</p></li><li><p>Scope：添加作用域</p></li><li><p>使用场景：</p><ul><li>限定Sitemap和https记录</li><li>限定Spider抓取哪些作用域的内容</li><li>限定Scanner扫描内容</li><li><strong>不会影响拦截功能</strong></li></ul></li></ul><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><ul><li><p>记录类型（关闭拦截）</p><ul><li>自动（爬行）：获取全面信息</li><li>手动（浏览器访问）：仅仅根据自己需要</li></ul></li><li><p>过滤器</p></li></ul><h3 id="结果操作"><a href="#结果操作" class="headerlink" title="结果操作"></a>结果操作</h3><p>扫描，发送包，再次发起请求，</p><p>交互功能：search，搜索comment，脚本，字段（告诉服务器当前请求是从哪个页面链接来的）</p><h2 id="bp的scan模块"><a href="#bp的scan模块" class="headerlink" title="bp的scan模块"></a>bp的scan模块</h2><h3 id="主动扫描（crawl-and-audit）"><a href="#主动扫描（crawl-and-audit）" class="headerlink" title="主动扫描（crawl and audit）"></a>主动扫描（crawl and audit）</h3><ul><li>方式：爬取所有链接，显示漏洞</li><li>针对漏洞：<ul><li>客户端：如XSS，HTTP头注入，操作重定向</li><li>服务端：如SQL注入，命令行注入，文件遍历</li></ul></li></ul><h3 id="被动扫描-live-audit"><a href="#被动扫描-live-audit" class="headerlink" title="被动扫描  (live audit)"></a>被动扫描  (live audit)</h3><ul><li>方式：只检测经过BP代理服务器的地址，不爬取</li></ul><p><img src="/2025/05/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/image-20250208113932507-1739072494281-5.png" alt="image-20250208113932507"></p><h2 id="bp的repeater模块"><a href="#bp的repeater模块" class="headerlink" title="bp的repeater模块"></a>bp的repeater模块</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ul><li>发起http请求，分析响应</li><li>重放请求</li></ul><h2 id="bp的intruder模块"><a href="#bp的intruder模块" class="headerlink" title="bp的intruder模块"></a>bp的intruder模块</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>修改请求参数，分析响应内容，获得特征数据</p><h3 id="实现密码暴力破解"><a href="#实现密码暴力破解" class="headerlink" title="实现密码暴力破解"></a>实现密码暴力破解</h3><ul><li>设计攻击模式<ul><li>sniper：使用一组payload和一个字段</li><li>batter ram：同时在所有字段放置相同 payload</li><li>pitchfork：设置多组payload，按出现顺序分配给多个字段</li><li>Cluster bomb： 为每个位置分配一组 payload，对每组所有可能组合进行迭代</li></ul></li><li>设计攻击字段</li><li>设置payload</li><li>设置线程值</li></ul><h3 id="获取CSFR-token"><a href="#获取CSFR-token" class="headerlink" title="获取CSFR token"></a>获取CSFR token</h3><p>token一次使用就销毁，因此要<strong>利用上一次响应结果的内容，作为本次请求的参数</strong>。</p><p>使用pitchfork，两组payload，type：recursive grep、单线程</p><p><img src="/2025/05/19/BurtSuite%E7%9A%84%E5%BA%94%E7%94%A8/image-20250208173650096-1739072403970-2-1739072472938-2.png" alt="image-20250208173650096-1739072403970-2"></p><h3 id="爆破验证码"><a href="#爆破验证码" class="headerlink" title="爆破验证码"></a>爆破验证码</h3><ul><li>爆破</li><li>修改响应为true</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习概述</title>
      <link href="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/"/>
      <url>/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习概述"><a href="#机器学习概述" class="headerlink" title="机器学习概述"></a>机器学习概述</h1><h2 id="人工智能三大概念"><a href="#人工智能三大概念" class="headerlink" title="人工智能三大概念"></a>人工智能三大概念</h2><h3 id="人工智能-AI-Artificial-Intelligence"><a href="#人工智能-AI-Artificial-Intelligence" class="headerlink" title="人工智能(AI): Artificial Intelligence"></a>人工智能(AI): Artificial Intelligence</h3><ul><li><p>像人一样机器智能的综合与分析；机器模拟人类</p></li><li><p>释义：是一个系统，像人那样思考 像人那样理性思考  </p></li><li><p>释义：是一个系统，像人那样活动 像人那样合理系统</p></li></ul><h3 id="机器学习-ML-Machine-Learning"><a href="#机器学习-ML-Machine-Learning" class="headerlink" title="机器学习(ML): Machine Learning"></a>机器学习(ML): Machine Learning</h3><ul><li>让机器<strong>自动学习</strong>，而不是基于规则的编程（不依赖特定规则编程）</li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830154802582.png" alt="image-20230830154802582"></p><ul><li>从数据中获取规律；来了一个新的数据，产生一个新的预测</li></ul><h3 id="深度学习-DL-Deep-Learning"><a href="#深度学习-DL-Deep-Learning" class="headerlink" title="深度学习(DL): Deep Learning"></a>深度学习(DL): Deep Learning</h3><p>深度学习 : ，也叫<strong>深度神经网络</strong>，大脑仿生，设计一层一层的神经元<strong>模拟万事万物</strong></p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830155136554.png" alt="image-20230830155136554"></p><h3 id="三者之间的关系"><a href="#三者之间的关系" class="headerlink" title="三者之间的关系"></a>三者之间的关系</h3><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20250410155154900.png" alt="image-20250410155154900"></p><p>机器学习是实现人工智能的一种<strong>途径</strong></p><p>深度学习是机器学习的一种<strong>方法</strong></p><h3 id="学习方式"><a href="#学习方式" class="headerlink" title="学习方式"></a>学习方式</h3><h4 id="基于规则的学习"><a href="#基于规则的学习" class="headerlink" title="基于规则的学习"></a>基于规则的学习</h4><p>基于规则的预测 ： 程序员根据经验利用<strong>手工的if-else方式</strong>进行预测</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830160037927.png" alt="image-20230830160037927"></p><p>但是有好多问题， <strong>无法明确的写下规则</strong>，此时我们无法使用规则学习的方式来解决这一类问题，比如：</p><ul><li>图像和语音识别</li><li>自然语言处理</li></ul><h4 id="基于模型的学习"><a href="#基于模型的学习" class="headerlink" title="基于模型的学习"></a>基于模型的学习</h4><p>基于模型的学习就是通过<strong>编写机器学习算法</strong>，让机器自己学习<strong>从历史数据中</strong>获得经验、训练模型：</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/04.jpg" alt="04"></p><p>案例巩固</p><p>比如房价预测，数据如下图</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20220117155634566.png" alt="image-20220117155634566"></p><ul><li>我们可以使用一条直线尽可能多的通过这些点，不通过的点尽量分布在直线的两侧，利用这条直线所表示的线性关系，我们就可以预测房价。</li><li>直线可以写成y&#x3D;ax+b，若a,b已知，我们就能够预测房价。机器学习中a,b称为<strong>参数</strong>，y&#x3D;ax+b称为<strong>模型</strong>。通常a,b未知，是我们需要求解的量。</li></ul><h2 id="人工智能应用领域和发展史"><a href="#人工智能应用领域和发展史" class="headerlink" title="人工智能应用领域和发展史"></a>人工智能应用领域和发展史</h2><h3 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h3><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723143316864.png" alt="image-20240723143316864"></p><hr><h3 id="机器学习发展三要素"><a href="#机器学习发展三要素" class="headerlink" title="机器学习发展三要素"></a>机器学习发展三要素</h3><ul><li><strong>数据、算法、算力</strong>三要素相互作用，是AI发展的基石</li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830164846564.png" alt="image-20230830164846564"></p><ol><li><strong>CPU</strong>：负责调度任务、计算任务等；主要适合I\O密集型的任务</li><li><strong>GPU</strong>：更加适合矩阵运算；主要适合计算密集型任务</li><li><strong>TPU：Tensor</strong>，专门针对神经网络训练设计一款处理器</li></ol><h2 id="机器学习常见术语"><a href="#机器学习常见术语" class="headerlink" title="机器学习常见术语"></a>机器学习常见术语</h2><h3 id="样本，特征，标签-目标值"><a href="#样本，特征，标签-目标值" class="headerlink" title="样本，特征，标签&#x2F;目标值"></a>样本，特征，标签&#x2F;目标值</h3><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830170447442.png" alt="image-20230830170447442"></p><p><strong>样本(sample)</strong> ：<strong>一行数据</strong>就是<strong>一个样本</strong>；多个样本组成数据集；有时<strong>一条样本</strong>被叫成<strong>一条记录</strong>；</p><p>通常由<strong>特征</strong>和<strong>标签</strong>构成</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830172741928.png" alt="image-20230830172741928"></p><p><strong>特征(feature)</strong> ：<strong>一列数据一个特征</strong>，有时也被称为<strong>属性</strong></p><p> 用X_train或X_test表示</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830172814624.png" alt="image-20230830172814624"></p><p><strong>标签&#x2F;目标(label&#x2F;target)</strong> ：模型<strong>要预测的那一列数据</strong>。本场景是就业薪资</p><p>用Y_train或Y_test表示 </p><p>特征如何理解：特征是从数据中<strong>抽取</strong>出来的，对<strong>结果预测</strong>有用的信息(不是所有信息)  如:房价预测、车图片识别</p><h3 id="数据集-样本的集合-划分"><a href="#数据集-样本的集合-划分" class="headerlink" title="数据集(样本的集合)划分"></a>数据集(样本的集合)划分</h3><p>多行样本组成数据集</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830173235334.png" alt="image-20230830173235334"></p><p>数据集可划分两部分：训练集、测试集  比例：8 : 2，7 : 3 </p><p>训练集(training set) ：用来<strong>学习数据模式，优化模型参数</strong>（model）的数据集</p><p>测试集(testing set)：用来<strong>模拟真实场景，评估性能模型</strong>的数据集，与训练集完全独立</p><h2 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h2><h3 id="有监督学习"><a href="#有监督学习" class="headerlink" title="有监督学习"></a>有监督学习</h3><ul><li><p>定义：输入数据是由<strong>输入特征值和目标值</strong>所组成，即输入的训练数据<strong>有标签的</strong></p></li><li><p>数据集：需要人工标注数据</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830173907526.png" alt="image-20230830173907526"></p></li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>目标值（标签值）是<strong>不连续</strong>的</p></li><li><p>分类种类：二分类、多分类任务、</p></li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174449204.png" alt="image-20230830174449204"></p><h4 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h4><p>目标值（标签值）是<strong>连续</strong>的</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174516047.png" alt="image-20230830174516047"></p><hr><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><ul><li><p>定义：输入数据<strong>没有被标记</strong>，即样本数据类别未知，<strong>没有标签</strong>，根据样本间的<strong>相似性</strong>，对样本集<strong>聚类</strong>，以发现事物<strong>内部结构及相互关系</strong>。</p></li><li><p>数据集：不需要标注数据</p></li></ul><ul><li><strong>无监督学习特点：</strong><ul><li>1 ：训练数据<strong>无标签</strong></li><li>2 ：根据样本间的相似性对样本集进行聚类，发现事物<strong>内部结构及相互关系</strong></li></ul></li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174630247.png" alt="image-20230830174630247"></p><hr><h3 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h3><ul><li><p>定义：通过同时利用少量<strong>有标记数据</strong>和大量<strong>无标记数据</strong>来提升模型的性能与泛化能力</p></li><li><p>原理：</p><ul><li><p>利用已经<strong>标记的数据</strong>（也就  是带有类标签）训练出一个模型</p></li><li><p>再利用该模型去套用<strong>未标记的数据</strong></p></li><li><p><strong>（人工矫正）<strong>通过询问领域专家分类结果与模型分类结果</strong>做对比</strong>从而对模型做进 一步改善和提高</p></li></ul></li><li><p>核心机制</p><ul><li>数据构成：<strong>有标记数据</strong>和<strong>无标记数据</strong></li><li>目标：成本高或数据少情况下，挖掘无标记数据的<strong>潜在信息</strong>，弥补有监督学习中<strong>标记不足</strong>的缺陷，提升模型在数据上的表现。</li></ul></li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830174748910.png" alt="image-20230830174748910"></p><p><strong>半监督学习方式可大幅降低标记成本</strong></p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><ul><li><p>强化学习（Reinforcement Learning）：机器学习的一个重要分支</p></li><li><p>应用场景：里程碑AlphaGo围棋、各类游戏、对抗比赛、无人驾驶场景</p></li><li><p>核心目标：让智能体（Agent）通过与环境的动态交互，自主习得最优决策策略，以最大化长期累积奖励</p></li><li><p>核心机制：</p><ul><li><strong>试错与延迟反馈</strong>智能体通过不断尝试动作(action)，获得环境奖励反馈的奖励信号(Reward)，逐步优化策略。</li><li><strong>马尔可夫决策过程</strong>：强化学习的数学模型，强调当前状态仅依赖于前一状态和动作，与历史无关。</li></ul></li><li><p><strong>基本组成要素</strong></p></li></ul><table><thead><tr><th align="center"><strong>要素</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>示例</strong></th></tr></thead><tbody><tr><td align="center"><strong>智能体（Agent）</strong></td><td align="center">执行决策的主体，如自动驾驶中的车辆、游戏中的角色。</td><td align="center">超级马里奥中的马里奥。</td></tr><tr><td align="center"><strong>环境（Environment）</strong></td><td align="center">智能体交互的对象，提供状态和奖励反馈。</td><td align="center">游戏程序、物理世界。</td></tr><tr><td align="center"><strong>状态（State）</strong></td><td align="center">对当前环境的抽象表示，如棋盘棋子位置或传感器数据。</td><td align="center">围棋棋盘布局。</td></tr><tr><td align="center"><strong>动作（Action）</strong></td><td align="center">智能体可执行的操作集合。</td><td align="center">马里奥的“跳跃”“移动”，自动驾驶中的“加速”“转向”。</td></tr><tr><td align="center"><strong>奖励（Reward）</strong></td><td align="center">环境反馈的标量信号，指导智能体行为优化。</td><td align="center">游戏通关奖励+1000，碰撞敌人惩罚-1000。</td></tr><tr><td align="center"><strong>策略（Policy）</strong></td><td align="center">状态到动作的映射规则，决定智能体行为。</td><td align="center">基于价值（Value-based）或直接优化策略（Policy-based）。</td></tr></tbody></table><p> agent：根据<strong>环境状态</strong>进行<strong>行动</strong>获得最多的累计奖励。</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830175128039.png" alt="image-20230830175128039"></p><p>小孩子学走路：</p><p>​    (1) 小孩就是 <strong>agent</strong>，他试图通过采取<strong>行动</strong>（即行走）来操纵<strong>环境</strong>（地面）</p><p>​    (2) 并且从<strong>一个状态转变到另一个状态</strong>（即他走的每一步）</p><p>​    (3) 当他完成任务的子任务（即走了几步）时，孩子得到<strong>奖励</strong>（给巧克力吃）</p><p>​    (4) 并且当他不能走路时，就不会给巧克力。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191436541.png" alt="image-20240723191436541"></p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191405779.png" alt="image-20240723191405779"></p><h2 id="机器学习的建模流程"><a href="#机器学习的建模流程" class="headerlink" title="机器学习的建模流程"></a>机器学习的建模流程</h2><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830180151157.png" alt="image-20230830180151157"></p><ul><li>获取数据：搜集与完成机器学习任务相关的数据集 </li><li>数据基本处理：数据集中异常值,缺失值的处理等 </li><li>特征工程：对数据特征进行提取、转成向量，让模型达到最好的效果 </li><li>机器学习(模型训练)：选择合适的算法对模型进行训练 </li><li>模型评估：评估效果好上线服务,评估效果不好则重复上述步骤</li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831115439968.png" alt="image-20230831115439968"></p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230830180344230.png" alt="image-20230830180344230"></p><h3 id="三大经典任务"><a href="#三大经典任务" class="headerlink" title="三大经典任务"></a>三大经典任务</h3><h4 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h4><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B97E1FEFF-2C83-4A87-B737-FD1BAD2D2990%7D.png" alt="{97E1FEFF-2C83-4A87-B737-FD1BAD2D2990}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==== 第一部分：模型训练与预测 ====</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm01_Regression_Pred</span>():</span><br><span class="line">    <span class="comment"># 准备数据 [平时成绩, 期末成绩]</span></span><br><span class="line">    x = [[<span class="number">180</span>,<span class="number">86</span>], [<span class="number">82</span>,<span class="number">80</span>], [<span class="number">90</span>,<span class="number">80</span>], [<span class="number">86</span>,<span class="number">94</span>], [<span class="number">94</span>,<span class="number">90</span>]]</span><br><span class="line">    y = [<span class="number">84.2</span>, <span class="number">80.6</span>, <span class="number">80.1</span>, <span class="number">90.0</span>, <span class="number">83.2</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 实例化模型</span></span><br><span class="line">    estimator = LinearRegression()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    estimator.fit(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;系数:&#x27;</span>, estimator.coef_)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;截距:&#x27;</span>, estimator.intercept_)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 新数据预测</span></span><br><span class="line">    mypred = estimator.predict([[<span class="number">90</span>,<span class="number">80</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;预测成绩:&#x27;</span>, mypred[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==== 第二部分：模型保存与加载 ====</span></span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm02_Regression_save_load</span>():</span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    estimator = LinearRegression()</span><br><span class="line">    joblib.dump(estimator, <span class="string">&#x27;/model/myrmlmodel01.bin&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    loaded_model = joblib.load(<span class="string">&#x27;/model/myrmlmodel01.bin&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用加载的模型预测</span></span><br><span class="line">    mypred2 = loaded_model.predict([[<span class="number">90</span>,<span class="number">80</span>]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;加载模型预测成绩:&#x27;</span>, mypred2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h4><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B2C6CC2EC-9EE3-4927-8B89-35E72FECF96D%7D.png" alt="{2C6CC2EC-9EE3-4927-8B89-35E72FECF96D}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm03_knn_chas</span>():</span><br><span class="line">    <span class="comment"># 数据准备</span></span><br><span class="line">    x = [</span><br><span class="line">        [<span class="number">39</span>, <span class="number">0</span>, <span class="number">31</span>],    <span class="comment"># 0-喜剧片</span></span><br><span class="line">        [<span class="number">3</span>, <span class="number">2</span>, <span class="number">65</span>],     <span class="comment"># 1-动作片</span></span><br><span class="line">        [<span class="number">2</span>, <span class="number">3</span>, <span class="number">55</span>],     <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">9</span>, <span class="number">38</span>, <span class="number">2</span>],     <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">8</span>, <span class="number">34</span>, <span class="number">17</span>],    <span class="comment"># 2-爱情片</span></span><br><span class="line">        [<span class="number">5</span>, <span class="number">2</span>, <span class="number">57</span>],     <span class="comment"># 1-动作片</span></span><br><span class="line">        [<span class="number">21</span>, <span class="number">17</span>, <span class="number">5</span>],    <span class="comment"># 0-喜剧片</span></span><br><span class="line">        [<span class="number">45</span>, <span class="number">2</span>, <span class="number">9</span>]      <span class="comment"># 0-喜剧片（新增）</span></span><br><span class="line">    ]</span><br><span class="line">    y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]  </span><br><span class="line">       </span><br><span class="line">    estimator = KNeighborsClassifier(n_neighbors=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;模型参数：&#x27;</span>, estimator)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    estimator.fit(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测</span></span><br><span class="line">    mypre = estimator.predict([[<span class="number">23</span>, <span class="number">17</span>, <span class="number">5</span>]])  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;预测结果：&#x27;</span>, mypre)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 执行函数</span></span><br><span class="line">dm03_knn_chas()</span><br></pre></td></tr></table></figure><h4 id="聚类问题"><a href="#聚类问题" class="headerlink" title="聚类问题"></a>聚类问题</h4><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7BEB8BE956-A88E-4F60-AEB8-DD1AB830E688%7D.png" alt="{EB8BE956-A88E-4F60-AEB8-DD1AB830E688}"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  </span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> calinski_harabasz_score</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dm04_kmeans</span>():</span><br><span class="line">    <span class="comment"># 创建数据集</span></span><br><span class="line">    X, y = make_blobs(n_samples=<span class="number">1000</span>, n_features=<span class="number">2</span>, </span><br><span class="line">                     centers=[[<span class="number">1</span>, -<span class="number">1</span>], [<span class="number">0</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">2</span>]], </span><br><span class="line">                     cluster_std=[<span class="number">0.4</span>, <span class="number">0.2</span>, <span class="number">0.2</span>, <span class="number">0.2</span>],  </span><br><span class="line">                     random_state=<span class="number">22</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 原始数据绘图</span></span><br><span class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], marker=<span class="string">&#x27;o&#x27;</span>)  </span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不同聚类数实验</span></span><br><span class="line">    <span class="keyword">for</span> n_clusters <span class="keyword">in</span> [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]:  </span><br><span class="line">        <span class="comment"># 训练模型</span></span><br><span class="line">        model = KMeans(n_clusters=n_clusters, init=<span class="string">&#x27;k-means++&#x27;</span>, random_state=<span class="number">22</span>)</span><br><span class="line">        y_pred = model.fit_predict(X) </span><br><span class="line">       </span><br><span class="line">        <span class="comment"># 结果可视化</span></span><br><span class="line">        plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y_pred)</span><br><span class="line">        plt.show()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 模型评估</span></span><br><span class="line">        ch_score = calinski_harabasz_score(X, y_pred)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;n_clusters=<span class="subst">&#123;n_clusters&#125;</span> -&gt; CH值：<span class="subst">&#123;ch_score:<span class="number">.2</span>f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行函数</span></span><br><span class="line">dm04_kmeans()</span><br></pre></td></tr></table></figure><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><h3 id="特征工程-1"><a href="#特征工程-1" class="headerlink" title="特征工程"></a>特征工程</h3><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831101912582.png" alt="image-20230831101912582"></p><p>从数据集角度来看：    一列一列的数据为特征。</p><p>从模型训练角度来看： 对预测结果有用的属性为特征</p><p>特征工程是：利用专业背景知识和技巧处理数据，让机器学习算法<strong>效果最好</strong>。这个过程就是特征工程</p><p>释义：特征工程是困难、耗时、需要专业知识。应用机器学习基础就是特征工程                             </p><p><code>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已</code></p><h3 id="特征提取-特征向量"><a href="#特征提取-特征向量" class="headerlink" title="特征提取(特征向量)"></a>特征提取(特征向量)</h3><p>从原始数据中提取与任务<strong>相关的</strong>特征，构成<strong>特征向量</strong></p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831103857938.png" alt="image-20230831103857938"></p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831104203971.png" alt="image-20230831104203971"></p><p>对于文本、图片这种非行列形式的数据行列形式转换，一旦转换成行列形式，一列就是特征</p><h3 id="特征预处理-影响一致性"><a href="#特征预处理-影响一致性" class="headerlink" title="特征预处理(影响一致性)"></a>特征预处理(影响一致性)</h3><p>特征对模型产生影响；因量纲问题，有些特征对模型影响大、有些影响小</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831103613657.png" alt="image-20230831103613657"></p><p>将不同的单位的特征数据转换成<strong>同一个范围</strong>内</p><p>使训练数据中<strong>不同特征</strong>对模型产生<strong>较为一致的影响</strong></p><h3 id="特征降维-保留主要"><a href="#特征降维-保留主要" class="headerlink" title="特征降维(保留主要)"></a>特征降维(保留主要)</h3><p>将原始数据的维度降低，叫做特征降维</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831105649036.png" alt="image-20230831105649036"></p><p>会<strong>丢失部分信息</strong>。降维就需要保证数据的<strong>主要信息要保留下来</strong></p><p>原始数据<strong>会发生变化</strong>，不需要了解数据本身是什么含义，它保留了最主要的信息</p><h3 id="特征选择-选择重要"><a href="#特征选择-选择重要" class="headerlink" title="特征选择(选择重要)"></a>特征选择(选择重要)</h3><p>原始数据特征很多，但是对<strong>任务相关</strong>是其中一个特征<strong>集合子集</strong>。</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20240723191521322.png" alt="image-20240723191521322"></p><p>从特征中选择出一些<strong>重要特征</strong>（选择就需要根据一些<strong>指标</strong>来选择）</p><p>特征选择<strong>不会改变</strong>原来的数据</p><h3 id="特征组合"><a href="#特征组合" class="headerlink" title="特征组合"></a>特征组合</h3><p>把多个的特征合并成一个特征。</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831112038043.png" alt="image-20230831112038043"></p><p>通过加法、乘法等方法将特征值合并</p><h2 id="模型拟合问题"><a href="#模型拟合问题" class="headerlink" title="模型拟合问题**"></a>模型拟合问题**</h2><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230831113029823.png" alt="image-20230831113029823"></p><p>拟合：用来表示模型对样本点的拟合情况</p><ul><li><p>欠拟合：模型在<strong>训练集</strong>上<strong>表现很差</strong>、在<strong>测试集</strong>表现也<strong>很差</strong></p><p>原因：模型<strong>过于简单</strong></p></li><li><p>过拟合：模型在<strong>训练集上表现很好</strong>、在<strong>测试集表现很差</strong></p><p>原因：模型<strong>太过于复杂</strong>、数据<strong>不纯</strong>、<strong>训练数据太少</strong></p></li></ul><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/%7B0A1C40C3-2A20-47EB-8FB5-FE92CD1B7A86%7D.png" alt="{0A1C40C3-2A20-47EB-8FB5-FE92CD1B7A86}"></p><ul><li><p>泛化：模型在<strong>新数据集</strong>（非训练数据）上的表现好坏的能力</p></li><li><p>奥卡姆剃刀原则：给定两个具有<strong>相同泛化误差</strong>的模型，<strong>较简单</strong>的模型比较复杂的模型<strong>更可取</strong></p></li></ul><p>(如无必要，勿增实体&#x2F;简单有效原理)</p><p><img src="/2025/05/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/image-20230909170335989.png" alt="image-20230909170335989"></p>]]></content>
      
      
      <categories>
          
          <category> 大模型 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
